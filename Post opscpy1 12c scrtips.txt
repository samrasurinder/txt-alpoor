

Step 1) build_driver_OPS.pre
--------------------

builds_dir = /infshare/oracle/scripts/refresh/bin/build/OPS



# ALL loggings, spools generated by this script
# will be in one location specified by parameter log_dir
####################################################################################

echo "Creating Refresh File Directories & Preserve All Grants"
export ORACLE_SID=`ps -ef|grep pmon|grep ora_pmon_${to_db}|grep -v grep|awk '{print $8}'|cut -d_ -f3`
sqlplus -s / as sysdba  <<EOF
select name from v\$database;
drop directory dp_rfrsh_dmp;
create directory dp_rfrsh_dmp as '$builds_dir';
drop directory dp_rfrsh_lg;
create directory dp_rfrsh_lg as '$log';
@$builds_dir/PRE_preserve_grants.sql
exit
EOF


(

--
-- Preserve Grants
--
-- V001 - Ferrellmd
--

DROP TABLE sysutil.dba_tab_privs_;
DROP TABLE sysutil.dba_sys_privs_;
DROP TABLE sysutil.dba_role_privs_;

CREATE TABLE sysutil.dba_tab_privs_  AS SELECT * FROM dba_tab_privs;
CREATE TABLE sysutil.dba_sys_privs_  AS SELECT * FROM dba_sys_privs;
CREATE TABLE sysutil.dba_role_privs_ AS SELECT * FROM dba_role_privs;

--@s:\OracleUtilityScripts\PreserveGrants.sql


)



==============================================================================================================================================================




[?8/?27/?2019 1:45 PM]  Khan, Ali:  
#!/bin/bash
. /home/opscfgadm/.bash_profile
echo 'Stopping appserver domain:' $1
psadmin -c stop -d $1
psadmin -c kill -d $1
psadmin -c cleanipc -d $1
rm -vrf /ops/cfg/psft/pt/857/appserv/$1/CACHE/*
echo 'Stopping process scheduler domain:' $1
psadmin -p stop -d $1
psadmin -p kill -d $1
psadmin -p cleanipc -d $1
rm -vrf /ops/cfg/psft/pt/857/appserv/prcs/$1/CACHE/*
echo 'Starting appserver domain:' $1
psadmin -c start -d $1
echo 'Starting process scheduler domain:' $1
psadmin -p start -d $1  

server name - hrvlcpyap7601.hr.state.sbu  
 


/bin/bash PRE_preserve_pwd.bash ${to_db}


sqlplus -s / as sysdba <<EOF

#--================== Save Password to file for Alter User ==================
set pagesize 0
set feedback off
set verify off
set echo off
set termout off
spool POST_${to_db}_alter_pwd_spool.sql
select 'alter user "'||username||'" identified by values '''||extract(xmltype(dbms_metadata.get_xml('USER',username)),'//USER_T/PASSWORD/text()').getStringVal()||''';'  old_password from  dba_users where username not in ('XS\$NULL');
select 'alter user "'||username||'" account unlock ;' from dba_users where profile='HR_PROFILE_USER';
spool off

#--================= Save Password to file for CREATE User ============================
set pagesize 0
set lines 180
set feedback off
set verify off
set echo off
set termout off
spool POST_${to_db}_cr_user_spool.sql
select 'create user "'||username||'" Profile "'||PROFILE||'" identified by values '''||extract(xmltype(dbms_metadata.get_xml('USER',username)),'//USER_T/PASSWORD/text()').getStringVal()||''' DEFAULT TABLESPACE USERS TEMPORARY TABLESPACE TEMP ACCOUNT UNLOCK;'  old_password
from dba_users
where username not in (select username from dba_users where username in ('XS\$NULL','SYS','SYSTEM','SYSADM','DBSNMP','APEX','PS','PEOPLE','HRPSINS'))
and default_tablespace='USERS'
and profile like 'HR_PROFILE%';
spool off

set pagesize 0
set lines 180
set feedback off
set verify off
set echo off
set termout off
spool POST_${to_db}_grant_connect_spool.sql
select 'GRANT CREATE SESSION TO "'||username||'" ;'
from dba_users
where username not in (select username from dba_users where username in ('XS\$NULL','SYS','SYSTEM','SYSADM','DBSNMP','APEX','PS','PEOPLE','HRPSINS'))
and default_tablespace='USERS'
and profile like 'HR_PROFILE%';
spool off

set pagesize 0
set lines 180
set feedback off
set verify off
set echo off
set termout off
spool POST_${to_db}_grant_sysadm_spool.sql
select 'GRANT HREXREADONLY TO "'||username||'" ;'
from dba_users
where username not in (select username from dba_users where username in ('XS\$NULL','SYS','SYSTEM','SYSADM','DBSNMP','APEX','PS','PEOPLE','HRPSINS'))
and default_tablespace='USERS'
and profile like 'HR_PROFILE%';
spool off
exit
EOF



=============================================================================================================================================================


/bin/bash PRE_PS_SchemaPwd.bash ${to_db}
----------------------------------------


sqlplus -s / as sysdba <<EOF
set pagesize 0
set lines 180
set feedback off
set verify off
set echo off
set termout off
set head off
set trimspool on
spool POST_${to_db}_PS_SchemaPwd_spool.sql
select 'update sysadm.psoprdefn set operpswd='''||operpswd||''',OPERPSWDSALT='''||OPERPSWDSALT||''',LASTPSWDCHANGE = sysdate+60 where oprid=''PSADM'';'from sysadm.psoprdefn where oprid='PSADM';
select 'update sysadm.psoprdefn set operpswd='''||operpswd||''',OPERPSWDSALT='''||OPERPSWDSALT||''',LASTPSWDCHANGE = sysdate+60 where oprid=''HREXOPSSRV'';'from sysadm.psoprdefn where oprid='HREXOPSSRV';
select 'update sysadm.psoprdefn set operpswd='''||operpswd||''',OPERPSWDSALT='''||OPERPSWDSALT||''',LASTPSWDCHANGE = sysdate+60 where oprid=''PHRMGR'';'from sysadm.psoprdefn where oprid='PHRMGR';
select 'update sysadm.psoprdefn set operpswd='''||operpswd||''',OPERPSWDSALT='''||OPERPSWDSALT||''',LASTPSWDCHANGE = sysdate+60 where oprid=''PSEM'';'from sysadm.psoprdefn where oprid='PSEM';
select 'update sysadm.psoprdefn set operpswd='''||operpswd||''',OPERPSWDSALT='''||OPERPSWDSALT||''',LASTPSWDCHANGE = sysdate+60 where oprid=''PTWEBSERVER'';'from sysadm.psoprdefn where oprid='PTWEBSERVER';
select 'update sysadm.psoprdefn set operpswd='''||operpswd||''',OPERPSWDSALT='''||OPERPSWDSALT||''',LASTPSWDCHANGE = sysdate+60 where oprid=''PSSTNBY'';'from sysadm.psoprdefn where oprid='PSSTNBY';
select 'commit;' from dual;
spool off
EOF



=============================================================================================================================================================


/bin/bash PRE_OPS_All_dblinks.bash ${to_db}

sqlplus -s / as sysdba <<EOF
set pagesize 0
set lines 300
set feedback off
set verify off
set echo off
set termout off
set head off
set trimspool on
set long 50000
drop user temporary_user cascade;
create user temporary_user identified by oracle;
grant connect to temporary_user;
Alter user temporary_user quota unlimited on users;
create table temporary_user.refresh_db_links_tab (owner varchar2(40), db_links varchar2(100),cr_dblinks varchar2(4000));
Truncate table temporary_user.refresh_db_links_tab;
spool ${builds_dir}/PRE_OPS_All_dblinks.sql
select 'insert into temporary_user.refresh_db_links_tab values ('||''''||owner||''''||','||''''||db_link||''''||','||'(select dbms_metadata.get_ddl('||''''||'DB_LINK'||''''||','||''''||db_link||''''||','||''''||owner||''''||') from dual));' from dba_db_links;
spool off
@${builds_dir}/PRE_OPS_All_dblinks.sql
commit;
EOF

expdp \"/ as sysdba\" schemas=temporary_user dumpfile=dp_rfrsh_dmp:expdp_PRE_${to_db}_preserve_All_dblinks.dmp  logfile=dp_rfrsh_lg:expdp_PRE_${to_db}_preserve_All_dblinks.log REUSE_DUMPFILES=Y


============================================================================================================================================================



# This to preserve TAB,SYS Privs and Roles.
expdp \"/ as sysdba\"  Tables=sysutil.dba_tab_privs_,sysutil.dba_role_privs_,sysutil.dba_sys_privs_  dumpfile=dp_rfrsh_dmp:expdp_PRE_${to_db}_preserve_grants.dmp logfile=dp_rfrsh_lg:expdp_PRE_${to_db}_preserve_grants.log REUSE_DUMPFILES=Y
echo "################################## Completed: *** Exported Privs, Roles ##########################################"

# This to preserve PeopleSoft Tables and Data
expdp \"/ as sysdba\" tables=sysadm.PSDSDIR,sysadm.PSDSSRVR,sysadm.DSCONNECTID,sysadm.PSDSEXT_INSTALL,sysadm.PSDSSECMAPMAIN,sysadm.PSDSSECMAPSRVR,sysadm.PS_DSUSRPRFLMAP,sysadm.PSDSUSERPRFL,sysadm.PSDSSECROLERULE,sysadm.DSSRCH_SBR,sysadm.DSSRCHATTR,sysadm.DSSECFILTER,sysadm.PT_WF_NOT_DSCFG,sysadm.PSPRSMPERM,SYSADM.psaccessprfl,SYSADM.PS_PTSF_SRCH_ENGN,SYSADM.psibsvcsetup,SYSADM.psnodeuritext,sysadm.psaccessprfl,SYSADM.PS_SERVERCLASS,SYSADM.PS_SERVERDEFN,SYSADM.PS_SERVERDEFN_LNG,SYSADM.PS_SERVERNOTIFY,SYSADM.PS_SERVERMESSAGE,SYSADM.PS_SERVEROPRTN,SYSADM.PS_SERVERCATEGORY,SYSADM.PS_CDM_DIST_NODE,SYSADM.PSGATEWAY,SYSADM.psnodeconprop,SYSADM.psurldefn,SYSADM.pswebprofile,sysadm.psren,sysadm.psmcfrenurlid,sysadm.psrenclus_owner,sysadm.psrencluster,sysadm.psibfailover,PS.PSDBOWNER,SYSADM.PSMSGNODEDEFN,SYSADM.PSNODEDEFNLANG,SYSADM.PSIBGATEWAYURLS,SYSADM.PSIBLBURLS,SYSADM.PSIBRTNGDEFN,SYSADM.PSIBRTNGSUBDEFN,SYSADM.PSRTNGDFNCONPRP,SYSADM.PSRTNGDFNPARM,SYSADM.PS_SM_BP_USR_CTGRY,SYSADM.PS_GM_EDEO_CONFIG,SYSADM.PSCERTDB dumpfile=dp_rfrsh_dmp:expdp_PRE_${to_db}_SYSADM_PS_Tables.dmp logfile=dp_rfrsh_lg:expdp_PRE_${to_db}_SYSADM_PS_Tables.log REUSE_DUMPFILES=Y
echo "################################## Completed: *** Exported PS Tables Data ########################################"




===========================================================================================================================================================





function POST_REFRESH() {
if [ ! -f $builds_dir/build_driver_${ENV}.post ] && [ "$run_post" == "Y" ] ; then
    echo "`date`" |tee -i  $log/check_files_ifexist.log
    echo "*** ERROR: No post refresh scripts found!!" |tee -a -i   $log/check_files_ifexist.log
    echo "*** ERROR: $builds_dir/build_driver_${ENV}.post" |tee -a -i  $log/check_files_ifexist.log
    send_mail "No_build_driver_post"
    cat $log/check_files_ifexist.log
fi
# Check if post_refresh is required, otherwise skip and continue...
if [ -f $builds_dir/build_driver_${ENV}.post ] && [ "$run_post" == "Y" ] ; then

cat <<EOF |tee -i $log/build_driver_${ENV}.post.MASTER

################################# ** BEGIN OF POST REFRESH ** ######################################
`date`

EOF

echo |send_mail "Entering_POST_Refresh"

                                                      ###############################################
                                                                      cd $builds_dir
                                                      ###############################################

/bin/bash  $builds_dir/build_driver_${ENV}.post $to_db |tee -a -i $log/build_driver_${ENV}.post.MASTER 2>&1

                                                      ###############################################
                                                                      cd $scripts_dir
                                                      ###############################################

cat <<EOF |tee  -a -i  $log/build_driver_${ENV}.post.MASTER

################################ ** END OF POST REFRESH ** #########################################

EOF





function CR_USRS () {
echo "##########################################################################"
echo "##################### BEGIN CREATE DB USERS ##############################"
echo "##########################################################################"
# Drop existing export & import directories created by refresh scripts
/bin/bash REFRESH_drop_directories.bash ${to_db}
# Drop of procedures created by refresh script
/bin/bash REFRESH_drop_procedure.bash ${to_db}
sqlplus  / as sysdba <<EOF
ALTER TABLESPACE temp ADD TEMPFILE '+OPSCPY_DATA' SIZE 500M REUSE AUTOEXTEND ON NEXT 100M MAXSIZE UNLIMITED;
ALTER TABLESPACE pstemp ADD TEMPFILE '+OPSCPY_DATA' SIZE 500M REUSE AUTOEXTEND ON NEXT 100M MAXSIZE UNLIMITED;
alter system set db_recovery_file_dest_size=600G scope=spfile sid='*';
create directory dp_rfrsh_dmp as '/hrewwnonprdfs01/Output/exports/OPSCPY1';
create directory dp_rfrsh_lg as '/hrewwnonprdfs01/Output/exports/OPSCPY1';
@${builds_dir}/POST_${postRefresh_as}_cr_user_spool.sql;
@${builds_dir}/POST_${postRefresh_as}_grant_connect_spool.sql;
@${builds_dir}/POST_${postRefresh_as}_grant_sysadm_spool.sql;
@${builds_dir}/POST_${postRefresh_as}_alter_pwd_spool.sql;
exit
EOF
}






/bin/bash REFRESH_drop_directories.bash
---------------------------------------

sqlplus / as sysdba <<EOF
SET SERVEROUTPUT ON SIZE 1000000
BEGIN
  FOR cur_rec IN (SELECT directory_name
                  FROM   dba_directories
                  WHERE  directory_name IN ('DP_RFRSH_DMP','DP_RFRSH_LG')) LOOP
    BEGIN
        EXECUTE IMMEDIATE 'DROP DIRECTORY ' ||cur_rec.directory_name||'';
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.put_line('FAILED: DROP '||cur_rec.directory_name||'');
    END;
  END LOOP;
END;
/
EOF


/bin/bash REFRESH_drop_procedure.bash
-------------------------------------

sqlplus / as sysdba <<EOF
SET SERVEROUTPUT ON SIZE 1000000
BEGIN
  FOR cur_rec IN (SELECT object_name, object_type, owner
                  FROM   dba_objects
                  WHERE  object_name IN ('EOPF_IMPERSONATION_PWDSET','EOPFUSER_PWDSET','SECREF_GALPWDSET','CRE_DB_LNK') and object_type IN ('PROCEDURE')) LOOP
    BEGIN
        EXECUTE IMMEDIATE 'DROP ' ||cur_rec.object_type||' ' ||cur_rec.owner||'.'|| cur_rec.object_name||'';
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.put_line('FAILED: DROP ' || cur_rec.object_type || ' "' || cur_rec.object_name || '"');
    END;
  END LOOP;
END;
/
EOF








======================================================================================================================================================================================================


function IMP_SYSUTIL () {
echo "###########################################################################"
echo "###################### BEGIN impdp SYSUTIL  ###############################"
echo "###########################################################################"
impdp \"/ as sysdba\" Tables=sysutil.dba_tab_privs_,sysutil.dba_role_privs_,sysutil.dba_sys_privs_  dumpfile=dp_rfrsh_dmp:expdp_PRE_OPSCPY1_preserve_grants.dmp logfile=dp_rfrsh_lg:impdp_POST_OPSCPY1_preserve_grants.log table_exists_action=Truncate
}
###
function APPLY_POST_ESRT () {
echo "###########################################################################"
echo "###################### BEGIN APPLY POST ESRT ##############################"
echo "###########################################################################"
/bin/bash ${builds_dir}/POST_CPY_ESRT_directories.bash ${to_db}
impdp \"/ as sysdba\" REMAP_SCHEMA=OAB_REFRESH:ESRT dumpfile=dp_rfrsh_dmp:expdp_PRE_${ENV}_dblnk.dmp logfile=dp_rfrsh_lg:impdp_POST_${ENV}_dblnk.log table_exists_action=Truncate
sqlplus / as sysdba <<EOF
set echo on
exec ESRT.cre_db_lnk;
EOF
}




===================================================================================================================================================================================================

function APPLY_POST_PS () {
echo "###########################################################################"
echo "###################### BEGIN APPLY POST PS  ###############################"
echo "###########################################################################"
sqlplus  / as sysdba <<EOF
set echo on
@${builds_dir}/POST_truncate_PS_SYSADM_Tables.sql;
EOF
impdp \"/ as sysdba\" full=y dumpfile=dp_rfrsh_dmp:expdp_PRE_${postRefresh_as}_SYSADM_PS_Tables.dmp logfile=dp_rfrsh_lg:impdp_POST_${postRefresh_as}_SYSADM_PS_Tables.log table_exists_action=replace
sqlplus  / as sysdba <<EOF
set echo on
@${builds_dir}/POST_PS_Mailing_List.sql;
@${builds_dir}/POST_${postRefresh_as}_PS_SchemaPwd_spool.sql;
exit
EOF
}

[oracle@hrewoel29 OPS]$ vi POST_truncate_PS_SYSADM_Tables.sql
TRUNCATE TABLE sysadm.psprcsrqst;
TRUNCATE TABLE sysadm.psprcsque;
TRUNCATE TABLE sysadm.ps_gm_run_cntl_hr;
TRUNCATE TABLE sysadm.ps_schdldefn;
TRUNCATE TABLE sysadm.ps_gm_pi_run_parms;
TRUNCATE TABLE sysadm.ps_cdm_dist_node;
TRUNCATE TABLE sysadm.psren;
TRUNCATE TABLE sysadm.psserverstat;
TRUNCATE TABLE sysadm.psmcfrenurlid;
TRUNCATE TABLE sysadm.psrenclus_owner;
TRUNCATE TABLE sysadm.ps_serverdefn;
TRUNCATE TABLE  sysadm.psrencluster;
TRUNCATE TABLE sysadm.psibfailover;
TRUNCATE TABLE sysadm.psapmsgdomstat;
TRUNCATE TABLE sysadm.psapmsgdspstat;
TRUNCATE TABLE sysadm.psgateway;
TRUNCATE TABLE SYSADM.PS_SERVERCLASS;
TRUNCATE TABLE SYSADM.PS_SERVERDEFN;
TRUNCATE TABLE SYSADM.PS_SERVERDEFN_LNG;
TRUNCATE TABLE SYSADM.PS_SERVERNOTIFY;
TRUNCATE TABLE SYSADM.PS_SERVERMESSAGE;
TRUNCATE TABLE SYSADM.PS_SERVEROPRTN;
TRUNCATE TABLE SYSADM.PS_SERVERCATEGORY;
TRUNCATE TABLE SYSADM.PS_CDM_DIST_NODE;
TRUNCATE TABLE SYSADM.PSGATEWAY;
TRUNCATE TABLE SYSADM.psnodeconprop;
TRUNCATE TABLE SYSADM.psurldefn;
TRUNCATE TABLE SYSADM.pswebprofile;
TRUNCATE TABLE PS.PSDBOWNER;
TRUNCATE TABLE SYSADM.PSMSGNODEDEFN;
TRUNCATE TABLE SYSADM.PSNODEDEFNLANG;
TRUNCATE TABLE SYSADM.PSIBGATEWAYURLS;
TRUNCATE TABLE SYSADM.PSIBLBURLS;
TRUNCATE TABLE SYSADM.PSIBRTNGDEFN;
TRUNCATE TABLE SYSADM.PSIBRTNGSUBDEFN;
TRUNCATE TABLE SYSADM.PSRTNGDFNCONPRP;
TRUNCATE TABLE SYSADM.PSRTNGDFNPARM;
TRUNCATE TABLE SYSADM.PS_SM_BP_USR_CTGRY;
TRUNCATE TABLE SYSADM.PS_GM_EDEO_CONFIG;




POST_PS_Mailing_List.sql
------------------------


/*************************************************************/
/* Update WFR Mailing List   :  HRRefreshes                  */
/*************************************************************/
GRANT SELECT ON SYSADM.PSAPMSGDOMSTAT TO HREXREADONLY;
GRANT SELECT ON SYSADM.PSAPMSGDOMSTAT TO ROLE_RO;
grant Select on sysadm.PSSTATUS to hrpsins;
grant select on sysadm.PSOPRDEFN to hrpsins;
grant select on sysadm.PSACCESSPRFL to hrpsins;
delete from sysadm.PSSERVERSTAT where SERVERNAME = 'PSUNX2';
update sysadm.psuseremail set emailid = 'OPSRefreshEmail@state.gov' where oprid not in ('PSADM','PTWEBSERVER','PSEM','PHRMGR','PSSTNDBY');
update sysadm.psoprdefn set emailid = 'OPSRefreshEmail@state.gov' where oprid not in ('PSADM','PTWEBSERVER','PSEM','PHRMGR','PSSTNDBY');
update sysadm.ps_rolexlatopr set emailid = 'OPSRefreshEmail@state.gov' where oprid not in ('PSADM','PTWEBSERVER','PSEM','PHRMGR','PSSTNDBY');
update sysadm.ps_email_addresses set email_addr = 'OPSRefreshEmail@state.gov';
Commit;










=====================================================================================================================================================================================================



function APPLY_ALL_DBLINKS () {
echo "############################################################################"
echo "####################### BEGIN APPLY ALL DBLINKS ############################"
echo "############################################################################"
/bin/bash ${builds_dir}/POST_dr_dblinks.bash ${to_db}
}
###



======================================================================================================================================================================================================


function APPLY_POST_IDB () {
echo "#############################################################################"
echo "####################### BEGIN APPLY POST IDB ################################"
echo "#############################################################################"
sqlplus  / as sysdba <<EOF
set echo on
@${builds_dir}/POST_IDB_refresh.sql;
EOF
}


=====================================================================================================================================================================================================


###
function APPLY_POST_PCSTRAVEL () {
echo "#############################################################################"
echo "####################### BEGIN APPLY POST PCSTRAVEL ##########################"
echo "#############################################################################"
/bin/bash ${builds_dir}/POST_CPY_PCSTRAVEL_directories.bash ${to_db}
sqlplus  / as sysdba <<EOF
set echo on
@${builds_dir}/POST_PCSTRAVEL_refresh.sql;
EOF
}


=========================================================================================================================================================================================================

###
function APPLY_POST_EOPF () {
echo "#############################################################################"
echo "### BEGIN APPLY POST EOPF,EOPF_DOS,EOPF_CORE,TELEWORK,ELECTRONIC_DOCUMENT ###"
echo "#############################################################################"
### BEGIN POST REFRESH FOR EOPF, EOPF_DOS, EOPF_CORE, TELEWORK, ELECTRONIC_DOCUEMNT"
/bin/bash ${builds_dir}/POST_CPY_EOPF_directories.bash ${to_db}
/bin/bash ${builds_dir}/POST_CPY_EOPF_EOPF_CORE.bash ${to_db}
}
####


=========================================================================================================================================================================================================

####
function APPLY_POST_SECREF () {
echo "#############################################################################"
echo "###################### BEGIN APPLY POST SECREF ##############################"
echo "#############################################################################"
### BEGIN POST REFRESH FOR SECREF"
/bin/bash ${builds_dir}/POST_CPY_SECREF.bash ${to_db}
}
###


========================================================================================================================================================================================================

###
function APPLY_POST_FSBID () {
echo "#############################################################################"
echo "##################### BEGIN APPLY POST FSBID ################################"
echo "#############################################################################"
sqlplus  / as sysdba <<EOF
set echo on
@${builds_dir}/POST_OTHER_general.sql;
EOF
}



POST_OTHER_general.sql

/* FSBID */
UPDATE fsbid.note_memo_element nme set nme.nme_default_clob = 'RawoorRM@state.gov' where nme.me_seq_num = 21;
commit;



===========================================================================================================================================================================================================

function APPLY_DB_GRANTS () {
echo "#############################################################################"
echo "##################### BEGIN APPLY DB GRANTS #################################"
echo "#############################################################################"
sqlplus  / as sysdba <<EOF
set echo on
@${builds_dir}/POST_restore_grants.sql;
-- CREATE CURRENT DATABASE DUMP DIR
create directory ${to_db} as '/infshare/oracle/export/${to_db}';
EOF
}
###



--
-- Restore table privs based on stored table in SYSUTIL schema.
--
-- V001 - Ferrellmd
--
--#################* PRESERVE ALL TABLE PRIVILEGES *#################################################
SET SERVEROUTPUT ON SIZE 30000
DECLARE
  CURSOR c IS
        SELECT a.*, DECODE( a.grantable, 'YES', ' with grant option', '' ) v_grant_option
          FROM sysutil.dba_tab_privs_ a,
               dba_objects o
         WHERE a.owner = o.owner
           AND a.table_name = o.object_name
           AND a.GRANTOR <> a.GRANTEE
        MINUS
        SELECT b.*, DECODE( b.grantable, 'YES', ' with grant option', '' ) v_grant_option FROM dba_tab_privs b;
  object_invalid EXCEPTION;
  PRAGMA EXCEPTION_INIT( object_invalid, -04063 );
  lv_err        VARCHAR2(250);
  lv_sql        VARCHAR2(2000);
        ln_ok      PLS_INTEGER;
        ln_invalid PLS_INTEGER;
        ln_other   PLS_INTEGER;
BEGIN
        ln_ok      := 0;
        ln_invalid := 0;
        ln_other   := 0;
  FOR b in c LOOP
    BEGIN
        lv_sql := 'grant ' || b.privilege || ' on ' || b.owner || '.' || b.table_name || ' to ' || b.grantee || ' ' || b.v_grant_option;
      EXECUTE IMMEDIATE lv_sql;
      ln_ok := ln_ok + 1;
    EXCEPTION
      WHEN object_invalid THEN
        ln_invalid := ln_invalid + 1;
      WHEN OTHERS THEN
        ln_other := ln_other + 1;
        lv_err := SQLERRM;
        DBMS_OUTPUT.PUT_LINE( lv_err );
    END;
  END LOOP;
  DBMS_OUTPUT.PUT_LINE( 'Succeeded:   ' || TO_CHAR( ln_ok ) );
  DBMS_OUTPUT.PUT_LINE( 'Err Invalid: ' || TO_CHAR( ln_invalid ) );
  DBMS_OUTPUT.PUT_LINE( 'Err Other:   ' || TO_CHAR( ln_other ) );
END;
/
--@S:\OracleUtilityScripts\RestoreTabPrivs.sql

--#############################* PRESERVE ALL SYSTEM PRIVILEGE *##############################################
SET SERVEROUTPUT ON SIZE 30000
DECLARE
  CURSOR c IS
        SELECT a.*, DECODE( a.ADMIN_OPTION, 'YES', ' with grant option', '' ) v_grant_option FROM sysutil.dba_sys_privs_ a, dba_users o
        WHERE a.grantee = o.username
        AND o.DEFAULT_TABLESPACE='USERS'
        MINUS
        SELECT b.*, DECODE( b.ADMIN_OPTION, 'YES', ' with grant option', '' ) v_grant_option FROM dba_sys_privs b;
  object_invalid EXCEPTION;
  PRAGMA EXCEPTION_INIT( object_invalid, -04063 );
  lv_err        VARCHAR2(250);
  lv_sql        VARCHAR2(2000);
        ln_ok      PLS_INTEGER;
        ln_invalid PLS_INTEGER;
        ln_other   PLS_INTEGER;
BEGIN
        ln_ok      := 0;
        ln_invalid := 0;
        ln_other   := 0;
  FOR b in c LOOP
    BEGIN
        lv_sql := 'grant ' || b.PRIVILEGE||  ' to ' || b.grantee || ' ' || b.v_grant_option;
      EXECUTE IMMEDIATE lv_sql;
      ln_ok := ln_ok + 1;
    EXCEPTION
      WHEN object_invalid THEN
        ln_invalid := ln_invalid + 1;
      WHEN OTHERS THEN
        ln_other := ln_other + 1;
        lv_err := SQLERRM;
        DBMS_OUTPUT.PUT_LINE( lv_err );
    END;
  END LOOP;
 DBMS_OUTPUT.PUT_LINE( 'Succeeded:   ' || TO_CHAR( ln_ok ) );
  DBMS_OUTPUT.PUT_LINE( 'Err Invalid: ' || TO_CHAR( ln_invalid ) );
  DBMS_OUTPUT.PUT_LINE( 'Err Other:   ' || TO_CHAR( ln_other ) );
END;
/

--#############################* PRESERVE ALL ROLES *#################################################
SET SERVEROUTPUT ON SIZE 30000
DECLARE
  CURSOR c IS
        SELECT a.*, DECODE( a.ADMIN_OPTION, 'YES', ' with grant option', '' ) v_grant_option FROM sysutil.dba_role_privs_ a, dba_users o
        WHERE a.grantee = o.username
        AND o.DEFAULT_TABLESPACE='USERS'
        MINUS
        SELECT b.*, DECODE( b.ADMIN_OPTION, 'YES', ' with grant option', '' ) v_grant_option FROM dba_role_privs b;
  object_invalid EXCEPTION;
  PRAGMA EXCEPTION_INIT( object_invalid, -04063 );
  lv_err        VARCHAR2(250);
  lv_sql        VARCHAR2(2000);
        ln_ok      PLS_INTEGER;
        ln_invalid PLS_INTEGER;
        ln_other   PLS_INTEGER;
BEGIN
        ln_ok      := 0;
        ln_invalid := 0;
        ln_other   := 0;
  FOR b in c LOOP
    BEGIN
        lv_sql := 'grant ' || b.GRANTED_ROLE|| ' to ' || b.grantee || ' ' || b.v_grant_option;
      EXECUTE IMMEDIATE lv_sql;
      ln_ok := ln_ok + 1;
    EXCEPTION
      WHEN object_invalid THEN
        ln_invalid := ln_invalid + 1;
      WHEN OTHERS THEN
   ln_other := ln_other + 1;
        lv_err := SQLERRM;
        DBMS_OUTPUT.PUT_LINE( lv_err );
    END;
  END LOOP;
  DBMS_OUTPUT.PUT_LINE( 'Succeeded:   ' || TO_CHAR( ln_ok ) );
  DBMS_OUTPUT.PUT_LINE( 'Err Invalid: ' || TO_CHAR( ln_invalid ) );
  DBMS_OUTPUT.PUT_LINE( 'Err Other:   ' || TO_CHAR( ln_other ) );
END;
/



===========================================================================================================================================================


function SET_PARMS_JOBS() {

export ORACLE_SID=`ps -ef|grep pmon|grep ora_pmon_${to_db}|grep -v grep|awk '{print $8}'|cut -d_ -f3`

cat <<EOF |tee -i $log/set_parms_jobs.log

############### ** BEGIN OF RESET SPFILE PARAMETERS | DISABLE OF JOBS | ANALYZE ** #################
`date`

EOF

  sqlplus / as sysdba <<EOF |tee -a -i $log/set_parms_jobs.log
  set echo on
  @$ORACLE_HOME/dbs/init${to_db}_REFRESH.ora;
  exit;
EOF
echo "Stopping Database ... `srvctl stop database -d ${to_db}`" |tee -a -i $log/set_parms_jobs.log
 srvctl setenv database -d ${to_db} -t "ORACLE_UNQNAME=${to_db}"
sleep 5
echo "Restarting Database ... `srvctl start database -d ${to_db}`" |tee -a -i $log/set_parms_jobs.log
echo "" |tee -a -i   $log/set_parms_jobs.log
echo "#*************************************************#" |tee -a -i  $log/set_parms_jobs.log
echo "Database restarted to enable new spfile parameters"  |tee -a -i  $log/set_parms_jobs.log
echo "#*************************************************#" |tee -a -i  $log/set_parms_jobs.log
sleep 30
cat <<EOF | tee -a -i $log/set_parms_jobs.log

EOF

sqlplus  / as sysdba <<EOF |tee -a -i $log/set_parms_jobs.log
set echo on
alter system set db_recovery_file_dest='${to_fra_grp}';
exit;
EOF

############## ** END OF RESET SPFILE PARAMETERS | DISABLE OF JOBS | ANALYZE ** ####################


@$ORACLE_HOME/dbs/init${to_db}_REFRESH.ora;


alter system set  sga_max_size=4G  scope=spfile sid='*';
alter system set  sga_target=4G  scope=spfile sid='*';
alter system set O7_DICTIONARY_ACCESSIBILITY=TRUE scope=spfile sid='*';
alter system set "_gby_hash_aggregation_enabled"=false scope=spfile sid='*';
alter system set "_unnest_subquery"=false scope=spfile sid='*';
alter system set audit_trail=DB scope=spfile sid='*';
alter system set archive_lag_target=0 scope=spfile sid='*';
alter system set cursor_sharing=exact scope=spfile sid='*';
alter system set db_files=1000 scope=spfile sid='*';
alter system set deferred_segment_creation=false scope=spfile sid='*';
alter system set dml_locks=6500 scope=spfile sid='*';
alter system set java_pool_size=0 scope=spfile sid='*';
alter system set log_archive_format="%t_%s_%r.arc" scope=spfile sid='*';
alter system set nls_length_semantics=char scope=spfile sid='*';
alter system set open_cursors=1000 scope=spfile sid='*';
alter system set open_links=200 scope=spfile sid='*';
alter system set open_links_per_instance=200 scope=spfile sid='*';
alter system set parallel_max_servers=128 scope=spfile sid='*';
alter system set parallel_min_servers=0 scope=spfile sid='*';
alter system set parallel_servers_target=64 scope=spfile sid='*';
alter system set processes=1000 scope=spfile sid='*';
alter system set result_cache_max_size=0 scope=spfile sid='*';
alter system set sessions=2000 scope=spfile sid='*';
alter system set shared_servers=0 scope=spfile sid='*';
alter system set streams_pool_size=0 scope=spfile sid='*';
alter system set transactions=1000 scope=spfile sid='*';
alter system set db_domain='HR.STATE.SBU' scope=spfile sid='*';
alter system set sec_protocol_error_further_action='drop,3' scope=spfile sid='*';
alter database rename GLOBAL_NAME to OPSCPY1.HR.STATE.SBU;
ALTER TABLESPACE temp ADD TEMPFILE '+OPSCPY_DATA' SIZE 500M REUSE AUTOEXTEND ON NEXT 100M MAXSIZE UNLIMITED;
ALTER TABLESPACE pstemp ADD TEMPFILE '+OPSCPY_DATA' SIZE 500M REUSE AUTOEXTEND ON NEXT 100M MAXSIZE UNLIMITED;
ALTER SYSTEM SET db_recovery_file_dest='+OPSCPY_FRA' scope=spfile sid='*';
alter system set job_queue_processes=0 scope=spfile sid='*';
-- ANALYZE DATABASE
exec dbms_stats.gather_database_stats(options=> 'GATHER AUTO');
ALTER USER SYSADM ACCOUNT UNLOCK;
ALTER USER HRPSINS ACCOUNT UNLOCK;
alter user dbsnmp account unlock;






================================================================================================================


FINAL_STATUS() {

cat <<EOF |tee -i  $log/final_status.log

##################################### ** FINAL STATUS ** ###########################################
`date`

 `srvctl status database -d ${to_db}`

####################################################################################################

EOF

cat >> $log/final_status.log <<EOF

   The Following Output Shows:

     1) Performance Parameters update status.
     2) Jobs Identified to be disabled.
     3) Analyze Database status.

EOF

export error_check_db=`cat $log/final_status.log |grep "not"`
cat $log/set_parms_jobs.log >> $log/final_status.log
# CHECK FINAL DB STATUS
if [[ "$error_check_db" == *"not"* ]] ; then

cat <<EOF |tee -a -i $log/final_status.log

###################################### ** END OF REFRESH ** ########################################

EOF







 
 COL OWNER FORMAT 210
 COL OBJECT_NAME FORMAT A30
 COL OBJECT_TYPE FORMAT A20
 COL STATUS FORMAT A10
 COL CREATED FORMAT A30
 SET LINESIZE 150
 SET PAGESIZE 100
 alter session set nls_date_format = 'DD-MON-YYYY HH24:MI:SS';
 select owner,OBJECT_NAME,object_type,created from dba_objects where object_type='TRIGGER';



# PRESERVE ALL ACCOUNTS TO BE RESTORED AFTER POST REFRESH
/bin/bash PRE_preserve_pwd.bash ${to_db}
echo "################################## Completed: *** Preserved Users Accounts Password(s) ##########################*"

# PRESERVE PEOPLESOFT SCHEMAS PASSWORDS
/bin/bash PRE_PS_SchemaPwd.bash ${to_db}
echo "################################## Completed: *** Preserved PS Schemas Password(s) ###############################"

# PRESERVE ALL ACCOUNTS TO BE RESTORED AFTER POST REFRESH
/bin/bash PRE_preserve_pwd.bash ${to_db}
echo "################################## Completed: *** Preserved Users Accounts Password(s) ##########################*"

# PRESERVE PEOPLESOFT SCHEMAS PASSWORDS
/bin/bash PRE_PS_SchemaPwd.bash ${to_db}
echo "################################## Completed: *** Preserved PS Schemas Password(s) ###############################"

# PRESERVE All DB Links
/bin/bash PRE_OPS_All_dblinks.bash ${to_db}
echo "################################## Completed: *** Preserved All db links #########################################"

# This to preserve TAB,SYS Privs and Roles.
expdp \"/ as sysdba\"  Tables=sysutil.dba_tab_privs_,sysutil.dba_role_privs_,sysutil.dba_sys_privs_  dumpfile=dp_rfrsh_dmp:expdp_PRE_${to_db}_preserve_grants.dmp logfile=dp_rfrsh_lg:expdp_PRE_${to_db}_preserve_grants.log REUSE_DUMPFILES=Y
echo "################################## Completed: *** Exported Privs, Roles ##########################################"

# This to preserve PeopleSoft Tables and Data
expdp \"/ as sysdba\" tables=sysadm.PSDSDIR,sysadm.PSDSSRVR,sysadm.DSCONNECTID,sysadm.PSDSEXT_INSTALL,sysadm.PSDSSECMAPMAIN,sysadm.PSDSSECMAPSRVR,sysadm.PS_DSUSRPRFLMAP,sysadm.PSDSUSERPRFL,sysadm.PSDSSECROLERULE,sysadm.DSSRCH_SBR,sysadm.DSSRCHATTR,sysadm.DSSECFILTER,sysadm.PT_WF_NOT_DSCFG,sysadm.PSPRSMPERM,SYSADM.psaccessprfl,SYSADM.PS_PTSF_SRCH_ENGN,SYSADM.psibsvcsetup,SYSADM.psnodeuritext,sysadm.psaccessprfl,SYSADM.PS_SERVERCLASS,SYSADM.PS_SERVERDEFN,SYSADM.PS_SERVERDEFN_LNG,SYSADM.PS_SERVERNOTIFY,SYSADM.PS_SERVERMESSAGE,SYSADM.PS_SERVEROPRTN,SYSADM.PS_SERVERCATEGORY,SYSADM.PS_CDM_DIST_NODE,SYSADM.PSGATEWAY,SYSADM.psnodeconprop,SYSADM.psurldefn,SYSADM.pswebprofile,sysadm.psren,sysadm.psmcfrenurlid,sysadm.psrenclus_owner,sysadm.psrencluster,sysadm.psibfailover,PS.PSDBOWNER,SYSADM.PSMSGNODEDEFN,SYSADM.PSNODEDEFNLANG,SYSADM.PSIBGATEWAYURLS,SYSADM.PSIBLBURLS,SYSADM.PSIBRTNGDEFN,SYSADM.PSIBRTNGSUBDEFN,SYSADM.PSRTNGDFNCONPRP,SYSADM.PSRTNGDFNPARM,SYSADM.PS_SM_BP_USR_CTGRY,SYSADM.PS_GM_EDEO_CONFIG,SYSADM.PSCERTDB dumpfile=dp_rfrsh_dmp:expdp_PRE_${to_db}_SYSADM_PS_Tables.dmp logfile=dp_rfrsh_lg:expdp_PRE_${to_db}_SYSADM_PS_Tables.log REUSE_DUMPFILES=Y
echo "################################## Completed: *** Exported PS Tables Data ########################################"






hrewlcpyap51.hr.state.sbu
/ops/cfg/psft/pt/854/scripts/start_stop/restart_env.sh OPSCPY1



opscfgadm




TSTKw2wN$0h5IgB

#!/bin/bash
. /home/opscfgadm/.bash_profile

echo 'Stopping appserver domain:' $1

psadmin -c stop -d $1
psadmin -c kill -d $1ls -altrh

psadmin -c cleanipc -d $1
rm -vrf /ops/cfg/psft/pt/857/appserv/$1/CACHE/*

echo 'Stopping process scheduler domain:' $1

psadmin -p stop -d $1
psadmin -p kill -d $1
psadmin -p cleanipc -d $1
rm -vrf /ops/cfg/psft/pt/857/appserv/prcs/$1/CACHE/*

echo 'Starting appserver domain:' $1

psadmin -c start -d $1

echo 'Starting process scheduler domain:' $1

psadmin -p start -d $1  
hrvlcpyap7601.hr.state.sbu

/home/opscfgadm/restart_domain_opscpy1_dryrun.bash OPSCPY1 >> /home/opscfgadm/restart_domain_opscpy1_dryrun.log 2>&1

/home/opscfgadm/dmcommand.sh



https://hropscpy.hr.state.sbu/opscpy1/signon.html 




psdmtx -CT ORACLE -CD OPSCPY1 -CO sysadm -CP 'V$rHp05D' -CI hrpsins -CW 'AqE$8l8P' -FP /home/opscfgadm/reencrypt_opscpy1.dms


SET LOG /home/opscfgadm/encrypt_opscpy1_090519_cron.LOG;

UPDATE PSOPRDEFN SET PTOPERPSWDV2 = 'TSTEtDu605$rKpQ', OPERPSWDSALT=' ', ENCRYPTED = 0 WHERE PTOPERPSWDV2 <> ' ' and OPRID ='PHRMGR';
UPDATE PSOPRDEFN SET PTOPERPSWDV2 = 'TSTX$UgiPJx6n95', OPERPSWDSALT=' ', ENCRYPTED = 0 WHERE PTOPERPSWDV2 <> ' ' and OPRID ='HREXOPSSRV';
UPDATE PSACCESSPRFL SET ACCESSID = 'SYSADM', ACCESSPSWD = 'V$rHp05D', ENCRYPTED = 0;
UPDATE PSACCESSPROFILE SET STM_ACCESS_ID = 'SYSADM', STM_ACCESS_PSWD = 'V$rHp05D', ENCRYPTED = 0;

--  Encrypt user and access password for all operators.
ENCRYPT_PASSWORD *;






select ACT_PASSWORD_TEXT from pmu.ACCOUNT  WHERE ES_CD = 'OPSCPY1' AND ACT_NAME_TEXT = 'SYSADM'

select ACT_PASSWORD_TEXT from pmu.ACCOUNT  WHERE ES_CD = 'OPSCPY1' AND ACT_NAME_TEXT = 'HRPSINS'


select ACT_PASSWORD_TEXT from pmu.ACCOUNT  WHERE ES_CD = 'OPSCPY1' AND ACT_NAME_TEXT = 'PHRMGR';


select ACT_PASSWORD_TEXT from pmu.ACCOUNT  WHERE ES_CD = 'OPSCPY1' AND ACT_NAME_TEXT ='HREXOPSSRV';
