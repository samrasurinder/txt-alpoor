whenever sqlerror continue;
set verify off echo off feedback off heading off autoprint off serveroutput on;
accept seed default 'SDMJ20213y$'
variable tseed number;
execute :tseed := TO_NUMBER(RAWTOHEX(UTL_RAW.SUBSTR(DBMS_CRYPTO.hash(UTL_I18N.string_to_raw(&seed , 'AL32UTF8'),2),1,4)),'xxxxxxxx');
BEGIN
    IF ( :tseed  < 0 or :tseed  > 4294967295) THEN
        DBMS_STANDARD.RAISE_APPLICATION_ERROR(-20001, 'Seed is not an integer from 0 to 4294967295.');
    END IF;
END;
/
accept confirmseed default 'SDMJ20213y$'
BEGIN
    IF (&seed != &confirmseed) THEN
        DBMS_STANDARD.RAISE_APPLICATION_ERROR(-20002, 'Seed and Confirm Seed values do not match.');
    END IF;
END;
/
variable seed number;
execute :seed := :tseed;
accept spa_trial prompt 'Enter Y to run SQL Performance Analyzer to compare SQL execution plans before and after masking :' default 'N';
prompt Enter 1 to create new tablespace for intermittent objects Or
prompt Enter 2 to use existing tablespace for mapping tables Or
prompt Enter 3 to use existing tablespace for all intermittent objects
accept tbps_opt prompt 'Enter your choice, leave blank if you want to use default tablespace :' default 0;
variable tbps_opt varchar2(3);
execute :tbps_opt := '&tbps_opt';
SPOOL temp.sql;
SET ESCAPE ON;
variable spa_trial varchar2(3);
execute :spa_trial := '&spa_trial';
SELECT DECODE (UPPER('&spa_trial'),'N', rpad('variable sts_name varchar2(128);',80)||rpad('execute :sts_name := null;',80)||rpad('variable sts_owner varchar2(128);',80)||rpad('execute :sts_owner := null;',80)||rpad('variable task_name varchar2(30);',80)||rpad('execute :task_name := null;',80)||rpad('variable report_dir varchar2(30);',80)||rpad('execute :report_dir := null;',80),'Y', 'accept sts_owner prompt ''Enter SQL Tuning Set owner :'' default null 
accept sts_name prompt ''Enter  SQL Tuning Set name :'' default null 
accept task_name prompt ''Enter a Task Name :'' default null 
accept report_dir prompt ''Enter a directory to report :'' default -1 
'||rpad('variable sts_owner varchar2(128);',80)||rpad('execute :sts_owner := ''\&sts_owner'';',80)||rpad('variable sts_name varchar2(128);',80)||rpad('execute :sts_name := ''\&sts_name'';',80)||rpad('variable task_name varchar2(30);',80)||rpad('execute :task_name := ''\&task_name'';',80)||rpad('variable report_dir varchar2(30);',80)||rpad('execute :report_dir := ''\&report_dir'';',80 ) )from  DUAL;
Select decode ('&tbps_opt','2', 'accept cst_tbs_n prompt ''Enter the name of existing tablespace :'' default null
'||rpad('variable cst_tbs_n varchar2(130);',80)||rpad('execute :cst_tbs_n := ''\&cst_tbs_n'';',80),'2', 'accept cst_tbs_n prompt ''Enter the name of existing tablespace :'' default null
'||rpad('variable cst_tbs_n varchar2(130);',80)||rpad('execute :cst_tbs_n := ''\&cst_tbs_n'';',80), '3','accept cst_tbs_n prompt ''Enter the name of existing tablespace :'' default null
'||rpad('variable cst_tbs_n varchar2(130);',80)||rpad('execute :cst_tbs_n := ''\&cst_tbs_n'';',80),rpad('variable cst_tbs_n varchar2(130);',80)||rpad('execute :cst_tbs_n :=null;',80))from  DUAL;
SET ESCAPE OFF;
SPOOL OFF;
START temp.sql;
variable count number;
begin
  execute immediate 'select count(*) from dba_advisor_tasks where advisor_name = ''SQL Performance Analyzer'' and task_name = :1 and owner = user' into :count using :task_name;
  if (:count != 0) then
    dbms_standard.raise_application_error(-20003, 'Task name already exists. Specify a different task name.');
end if;
end;
/
undefine screate_omf ;
variable create_omf varchar2(3);
column value new_value screate_omf;
select count(value) value from v$parameter  where name = 'db_create_file_dest' and value is not null;
begin
  if &screate_omf = 0 then
    :create_omf:=null;
  else
    :create_omf:='Y';
  end if;
end;
/
whenever sqlerror continue;
set feedback off
set serveroutput on
set pagesize 0
set ver off
set echo off
set timing off

spool masking13048.log

set escape \
SET FEEDBACK ON
SET ECHO ON
-- Pre script
--Pre Mask Script
DECLARE
   l_ssn          VARCHAR2 (9);
   v_count        NUMBER := 0;
   v_rec_update   NUMBER := 0;
   v_days_to_retain NUMBER :=60;

   CURSOR CUR_NEW_SSN   --CUR_NEW_SSN
   IS
     SELECT SSN FROM ( 
        SELECT DISTINCT (REGEXP_REPLACE (SSN, '[-]', '')) SSN
        FROM (SELECT NATIONAL_ID SSN FROM SYSADM.PS_DEP_BENEF_NID WHERE TRIM(NATIONAL_ID) IS NOT NULL
           UNION
           SELECT NATIONAL_ID SSN FROM SYSADM.PS_PERS_NID WHERE TRIM(NATIONAL_ID) IS NOT NULL)
           WHERE SSN IS NOT NULL)
      MINUS
      SELECT XS_ORG_SSN SSN FROM MASK.XREF_SSN;
      
BEGIN

--loop thru each dup cursor, generate a new masked ssn for any new ssn.
FOR CUR_NEW_SSN_REC IN CUR_NEW_SSN
LOOP
  --generate a new masked ssn.
  SELECT MASK.PKG_MASK.fnc_gen_mask_fmt_ssn () INTO l_ssn FROM DUAL;

  --check to see if new masked ssn already existing in the masked table.
  SELECT COUNT (*)
    INTO v_count
    FROM MASK.XREF_SSN
   WHERE XS_MASK_SSN = l_ssn;

  IF v_count = 0
  THEN
     INSERT INTO MASK.XREF_SSN (XS_ORG_SSN, XS_MASK_SSN)
          VALUES (CUR_NEW_SSN_REC.SSN, l_ssn);

     v_rec_update := v_rec_update + 1;
  ELSE           --NEWLY generated ssn already exists. get another one....
     l_ssn := NULL;

     --try to generate new UNIQUE SSN until we get it.
     WHILE (LENGTH (NVL (l_ssn, 'x')) < 9)
     LOOP
        SELECT MASK.PKG_MASK.fnc_gen_mask_fmt_ssn () INTO l_ssn FROM DUAL;

        SELECT COUNT (*)
          INTO v_count
          FROM MASK.XREF_SSN
         WHERE XS_MASK_SSN = l_ssn;

        IF v_count = 0
        THEN
           INSERT INTO MASK.XREF_SSN (XS_ORG_SSN, XS_MASK_SSN)
                VALUES (CUR_NEW_SSN_REC.SSN, l_ssn);

           v_rec_update := v_rec_update + 1;
        ELSE --DUP
           l_ssn := NULL;
        END IF;
     END LOOP;
  END IF;
END LOOP;

COMMIT;

EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.PUT_LINE (SQLCODE || ':' || SQLERRM);           
END;
/

TRUNCATE TABLE SYSADM.PS_OP_PERS_STG;
/
TRUNCATE TABLE SYSADM.PS_OP_PHONE_STG;
/
TRUNCATE TABLE SYSADM.PS_OP_EMP_POS_RPT;
/
TRUNCATE TABLE SYSADM.PS_OP_ADDR_STG;
/   
TRUNCATE TABLE SYSADM.PS_OP_DEPN_STG;    
/
TRUNCATE TABLE SYSADM.PS_OP_EMAIL_STG;
/   
TRUNCATE TABLE SYSADM.PS_OP_PERS_NID_STG;
/
SET ECHO OFF
SET FEEDBACK OFF
-- Script Header Section
-- ==============================================

-- functions and procedures

CREATE OR REPLACE PROCEDURE mgmt$mask_sendMsg (msg IN VARCHAR2) IS
    msg1 VARCHAR2(1020);
    len INTEGER := length(msg);
    i INTEGER := 1;
BEGIN
    dbms_output.enable (1000000);

    LOOP
      msg1 := SUBSTR (msg, i, 255);
      dbms_output.put_line (msg1);
      len := len - 255;
      i := i + 255;
    EXIT WHEN len <= 0;
    END LOOP;
END mgmt$mask_sendMsg;
/

CREATE OR REPLACE PROCEDURE mgmt$mask_disableFlashback AUTHID CURRENT_USER IS
BEGIN
    EXECUTE IMMEDIATE 'ALTER DATABASE FLASHBACK OFF';
END mgmt$mask_disableFlashback;
/

CREATE OR REPLACE PROCEDURE mgmt$mask_enableFlashback AUTHID CURRENT_USER IS
BEGIN
    EXECUTE IMMEDIATE 'ALTER DATABASE FLASHBACK ON';
END mgmt$mask_enableFlashback;
/

CREATE OR REPLACE PROCEDURE mgmt$mask_errorExit (msg IN VARCHAR2) IS
BEGIN
    mgmt$mask_sendMsg (msg);
    mgmt$mask_sendMsg ('errorExit'||'!');
END mgmt$mask_errorExit;
/

CREATE OR REPLACE PROCEDURE mgmt$mask_errorExitOraError (msg IN VARCHAR2, errMsg IN VARCHAR2) IS
BEGIN
    mgmt$mask_sendMsg (msg);
    mgmt$mask_sendMsg (errMsg);
    mgmt$mask_sendMsg ('errorExitOraError'||'!');
END mgmt$mask_errorExitOraError;
/

CREATE OR REPLACE PROCEDURE mgmt$mask_checkDBAPrivs 
AUTHID CURRENT_USER IS
    granted_role REAL := 0;
    user_name user_users.username%type;
BEGIN
SELECT USERNAME INTO user_name FROM USER_USERS;
    EXECUTE IMMEDIATE 'SELECT 1 FROM SYS.DBA_ROLE_PRIVS WHERE GRANTED_ROLE = ''DBA'' AND GRANTEE = :1'
      INTO granted_role       USING user_name;
EXCEPTION
    WHEN OTHERS THEN
       IF SQLCODE = -01403 OR SQLCODE = -00942  THEN
      mgmt$mask_sendMsg ( 'WARNING checking privileges... User Name: ' || user_name);
      mgmt$mask_sendMsg ( 'User does not have DBA privs. ' );
      mgmt$mask_errorExitOraError ( 'The script will fail if it tries to perform operations for which the user lacks the appropriate privilege. ',' ' );
      END IF;
END mgmt$mask_checkDBAPrivs;
/

CREATE OR REPLACE PROCEDURE mgmt$mask_setUpJobTable (script_id IN INTEGER, job_table IN VARCHAR2, step_num OUT INTEGER)
AUTHID CURRENT_USER IS
    ctsql_text VARCHAR2(200) := 'CREATE TABLE ' || job_table || '(SCRIPT_ID NUMBER, LAST_STEP NUMBER, unique (SCRIPT_ID))';
    itsql_text VARCHAR2(200) := 'INSERT INTO ' || job_table || ' (SCRIPT_ID, LAST_STEP) values (:1, :2)';
    stsql_text VARCHAR2(200) := 'SELECT last_step FROM ' || job_table || ' WHERE script_id = :1';

    TYPE CurTyp IS REF CURSOR;  -- define weak REF CURSOR type
    stsql_cur CurTyp;  -- declare cursor variable

BEGIN
    step_num := 0;
    BEGIN
      EXECUTE IMMEDIATE ctsql_text;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;

    BEGIN
      OPEN stsql_cur FOR  -- open cursor variable
        stsql_text USING  script_id;
      FETCH stsql_cur INTO step_num;
      IF stsql_cur%FOUND THEN
        NULL;
      ELSE
        EXECUTE IMMEDIATE itsql_text USING script_id, step_num;
        COMMIT;
        step_num := 1;
      END IF;
      CLOSE stsql_cur;
    EXCEPTION
      WHEN OTHERS THEN
        mgmt$mask_errorExit ('ERROR selecting or inserting from table: ' || job_table);
        return;
    END;

    return;

EXCEPTION
      WHEN OTHERS THEN
        mgmt$mask_errorExit ('ERROR accessing table: ' || job_table);
        return;
END mgmt$mask_setUpJobTable;
/

CREATE OR REPLACE PROCEDURE mgmt$mask_deleteJobTableEntry(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN INTEGER, highest_step IN INTEGER)
AUTHID CURRENT_USER IS
    delete_text VARCHAR2(200) := 'DELETE FROM ' || job_table || ' WHERE SCRIPT_ID = :1';
BEGIN

    IF step_num <= highest_step THEN
      return;
    END IF;

    BEGIN
      EXECUTE IMMEDIATE delete_text USING script_id;
      IF SQL%NOTFOUND THEN
        mgmt$mask_errorExit ('ERROR deleting entry from table: ' || job_table);
        return;
      END IF;
    EXCEPTION
        WHEN OTHERS THEN
          mgmt$mask_errorExit ('ERROR deleting entry from table: ' || job_table);
          return;
    END;

    COMMIT;
END mgmt$mask_deleteJobTableEntry;
/

CREATE OR REPLACE PROCEDURE mgmt$mask_setStep (script_id IN INTEGER, job_table IN VARCHAR2, step_num IN INTEGER)
AUTHID CURRENT_USER IS
    update_text VARCHAR2(200) := 'UPDATE ' || job_table || ' SET last_step = :1 WHERE script_id = :2';
BEGIN
    -- update job table
    EXECUTE IMMEDIATE update_text USING step_num, script_id;
    IF SQL%NOTFOUND THEN
      mgmt$mask_sendMsg ('NOTFOUND EXCEPTION of sql_text: ' || update_text);
      mgmt$mask_errorExit ('ERROR accessing table: ' || job_table);
      return;
    END IF;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
      mgmt$mask_errorExit ('ERROR accessing table: ' || job_table);
      return;
END mgmt$mask_setStep;
/

create or replace type mgmt_dm_formatmap as table of varchar2(4000);
/
create or replace package mgmt$mask_util authid current_user is

    procedure persist_seed(arg_hsd number);
    procedure drop_seed;
    procedure set_dir_obj( d varchar2 );
    function get_dir_obj return varchar2;
    function isWorkloadMasking return boolean;
    procedure set_sts_mask( s varchar2);
    function get_sts_mask return varchar2;
    function isSTSMasking return boolean;
    procedure set_sts_name( s varchar2);
    function get_sts_name return varchar2;
    procedure set_sts_owner( s varchar2);
    function get_sts_owner return varchar2;
    procedure set_task_name( s varchar2);
    function get_task_name return varchar2;
    procedure set_spa_trial(s varchar2);
    function get_spa_trial return varchar2;
    function isSPATrialRequired return boolean;
    procedure set_report_dir( d varchar2 );
    function get_report_dir return varchar2;
    procedure create_xml_report (clob_pointer CLOB);
    function get_control_xml return xmltype ;
    function strval (len number) return varchar2 parallel_enable;
    function numval (low number, high number) return number parallel_enable;
    function replaceregexpclob (col CLOB, column_id NUMBER) RETURN CLOB; 
    function replaceregexpchar (col VARCHAR2, column_id NUMBER) RETURN VARCHAR2; 
    function randomencode (i_input VARCHAR2, pad_length NUMBER) RETURN VARCHAR2 deterministic parallel_enable; 
    procedure distribute_nos(low number, high number, numd number); 
    function fetchnum(idx number ,low number, high number, numd number) return number; 
    function get_package_version return varchar2; 
    function encrypt( orig_value varchar2, 
                      fmt mgmt_dm_formatmap,
                      max_value number, 
                      inpsd number) return varchar2 
                      deterministic parallel_enable; 
 
    function decrypt( orig_value varchar2, 
                      fmt mgmt_dm_formatmap,
                      max_value number, 
                      inpsd number) return varchar2 
                      deterministic parallel_enable; 
    function encrypt( orig_date Date, 
                      start_date Date, 
                      end_date Date,
                      inpsd number) return Date 
                      deterministic parallel_enable; 
 
    function decrypt( mask_date Date, 
                      start_date Date, 
                      end_date Date,
                      inpsd number) return Date 
                      deterministic parallel_enable; 
 
    procedure set_tbps_option(tbps_option varchar2, 
                              cust_tbps_name varchar2, 
                              create_omf varchar2); 
 
    procedure create_new_tablespace; 
 
    function  isNewTbpsCreated return boolean; 
 
    function get_tbps_name return varchar2; 
 
    function get_tbps_clause return varchar2; 
 
    function get_tbps_clause_dmask return varchar2; 
 
    function get_tbps_clause_stage return varchar2; 
 
    function get_tbps_clause_temp return varchar2; 
 
    procedure drop_tablespace; 
 
    function is_move_dmask return boolean; 

end mgmt$mask_util;
/
create or replace package body mgmt$mask_util is

    dirobj    varchar2(128) := null;
    reportdir varchar2(30) := null;
    stsname   varchar2(128) := null;
    stsowner  varchar2(128) := null;
    stsmask   varchar2(3) := null;
    spatrial  varchar2(3) := null;
    taskname  varchar2(30) := null;
    tbps_name varchar2(128) := null;
    create_new_tbps     boolean := false;
    tbps_data_file_name varchar2(128) := null;
    new_tbps_created    boolean := false;
    move_dmask          boolean := false;
    -- Global Collection for Regular Expression format
    TYPE strarr IS TABLE OF VARCHAR2(4000) INDEX BY PLS_INTEGER;
    TYPE twod_strarr IS TABLE OF strarr INDEX BY PLS_INTEGER;
    regexp_val_arr twod_strarr;
    exp_val_arr    twod_strarr;
 TYPE numarr IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
 permuarr numarr;
 populatearr number := 0;

  dm_package_version varchar2(10) := 'em_version';

FUNCTION encode_format_to_number (orig_value VARCHAR2, orig_format mgmt_dm_formatmap) RETURN NUMBER IS
  ret NUMBER := NULL;                  /* orig val encoded as number */
  flen NUMBER := orig_format.count;    /* length of format */
  len NUMBER := length(orig_value);    /* num iterations */
  i NUMBER := 0;                       /* current digit number being encoded */
  c VARCHAR2(10);                       /* current char being encoded */
  digit number;                        /* numeric representation of char */
  base number;                         /* current chars base for encoding */
  maxval number:=1;
BEGIN

    if (orig_value is null) then
        return orig_value;
    end if;

    ret := 0; /* Initialize */

    --dbms_output.put_line('orig='||orig_value);

    len := least(flen, len);
    FOR i IN 0 .. len-1
    LOOP
        c := substr(orig_value, len-i, 1);
        -- dbms_output.put_line('fmt='||orig_format(len-i));
        digit := instr(orig_format(len-i), c) - 1;
        base := length(orig_format(len-i));
        -- dbms_output.put_line('i='||i||', c='||c||', dig='||digit||', base='||base);

        if (digit < 0) then 
            return ret; -- invalid format
        end if;

        ret := ret + digit*maxval;
        maxval := maxval * base;

    END LOOP;

    -- dbms_output.put_line('encoded value is='||ret);
    return ret;
END;


FUNCTION decode_number_to_format (num_value NUMBER, orig_format mgmt_dm_formatmap) RETURN VARCHAR2 IS
  ret VARCHAR2(4000) := NULL;          /* num val decoded as string */
  num NUMBER;
  flen NUMBER := orig_format.count;    /* max length of format */
  len NUMBER := length(num_value);    /* num iterations */
  i NUMBER := 0;                       /* current digit number being decoded */
  c VARCHAR2(10);                       /* current char being encoded */
  digit number;                        /* numeric representation of char */
  base number;                         /* current chars base for encoding */
BEGIN
    if (num_value is null) then
        return ret;
    end if;

    -- dbms_output.put_line('orig='||num_value);

    num := num_value; /* Initialize */
    ret := null;

    FOR i IN 0 .. flen-1
    LOOP
        base := length(orig_format(flen-i));
        if (num > 0) then
            digit := mod(num, base);
            num := (num - digit)/base; /* reminder */
        else
            digit := 0;
        end if;
        -- dbms_output.put_line('i='||i||', num='||num||', dig='||digit||', base='||base);

        if (digit+1 > length(orig_format(flen-i))) then
            -- dbms_output.put_line('invalid digit='||digit+1||', len='||length(orig_format(flen-i)));
            digit := 0; /* invalid decoded value */
        end if;

        c := substr(orig_format(flen-i), digit+1, 1);
        ret := c || ret;

    END LOOP;

    -- dbms_output.put_line('decoded value is='||ret);
    return ret;
END;

--- TO BINARY
function to_binary(p_in number, h_many in number := 64) return varchar2 is
  v_result varchar2(64);
  v_temp number := p_in;
  large_power_2 number := 0;
begin
  for i in 1 .. h_many loop       -- must match number of bits
    large_power_2 := power(2,64-i); 
    if v_temp >= large_power_2 then
      v_result := v_result || '1';
      v_temp := v_temp - large_power_2;
    else
      v_result := v_result || '0';
    end if;
  end loop;
  return v_result;
end;

-- function get max_bits for the given number
procedure get_max_bits (max_number in number,
                        max_b_value out varchar2,
                        max_b_bits  out number)
is
begin
    max_b_value := to_binary(max_number);
    max_b_bits := 64 - (instr(max_b_value, '1') - 1);
    if MOD(max_b_bits,2) = 1 then
      max_b_bits := max_b_bits + 1;
    end if;
end get_max_bits;


--- BIT OR
function bitor(x in number, y in number)
return number deterministic parallel_enable
is
begin
    Return x + y - bitand(x, y);
end bitor;

--- BIT XOR
function bitxor(x in number, y in number)
return number deterministic parallel_enable
is
begin
    Return bitor(x, y) - bitand(x, y);
end bitxor;

-- bv bit  xor
function bv_bitxor(x in varchar2, y in varchar2)
return varchar deterministic parallel_enable
is
  bv_length number := LENGTH(x);
  output_bv varchar2(64);
begin
  -- ASSUMPTION: both x and y are of the same length
  -- can be improved later
  for i in 1 .. bv_length
  loop
    if substr(x, i, 1) = substr(y, i, 1)  then
      output_bv := output_bv || '0';
    else
      output_bv := output_bv || '1';
    end if;
  end loop;
  return output_bv;
end bv_bitxor;

--- FROM BINARY
function from_binary(p_in varchar2) return number is
  v_result number := 0;
  power_2 number := 1;
  j       number := 64;
begin
  for i in reverse 1 .. length(p_in) loop
    if substr(p_in,i,1) = '1' then
      v_result := v_result  + power(2,64-j);
    end if;
    j := j-1;
  end loop;
  return v_result;
end;

--- From BIN2HEX
function from_bin_2_hex( bin_input varchar2)
return varchar2
is
  hex_output varchar2(16);
  i          number := 0;
begin
  --dbms_output.put_line('hex_input: ' || hex_input);
  -- TBD for now it works only on 64 bit input blocks
  --dbms_output.put_line('b2h: ' || bin_input);
  --dbms_output.put_line('b2h len: ' || LENGTH(bin_input));
  for i in 1..16
  loop
    case
    when substr(bin_input, 4*(i-1)+1, 4) = '0000' then 
      hex_output := hex_output || '0';
    when substr(bin_input, 4*(i-1)+1, 4) = '0001' then 
      hex_output := hex_output || '1';
    when substr(bin_input, 4*(i-1)+1, 4) = '0010' then 
      hex_output := hex_output || '2';
    when substr(bin_input, 4*(i-1)+1, 4) = '0011' then 
      hex_output := hex_output || '3';
    when substr(bin_input, 4*(i-1)+1, 4) = '0100' then 
      hex_output := hex_output || '4';
    when substr(bin_input, 4*(i-1)+1, 4) = '0101' then 
      hex_output := hex_output || '5';
    when substr(bin_input, 4*(i-1)+1, 4) = '0110' then 
      hex_output := hex_output || '6';
    when substr(bin_input, 4*(i-1)+1, 4) = '0111' then 
      hex_output := hex_output || '7';
    when substr(bin_input, 4*(i-1)+1, 4) = '1000' then 
      hex_output := hex_output || '8';
    when substr(bin_input, 4*(i-1)+1, 4) = '1001' then 
      hex_output := hex_output || '9';
    when substr(bin_input, 4*(i-1)+1, 4) = '1010' then 
      hex_output := hex_output || 'A';
    when substr(bin_input, 4*(i-1)+1, 4) = '1011' then 
      hex_output := hex_output || 'B';
    when substr(bin_input, 4*(i-1)+1, 4) = '1100' then 
      hex_output := hex_output || 'C';
    when substr(bin_input, 4*(i-1)+1, 4) = '1101' then 
      hex_output := hex_output || 'D';
    when substr(bin_input, 4*(i-1)+1, 4) = '1110' then 
      hex_output := hex_output || 'E';
    when substr(bin_input, 4*(i-1)+1, 4) = '1111' then 
      hex_output := hex_output || 'F';
    else
      dbms_output.put_line ('Invalid INPUT: b2h');
    end case;
    --dbms_output.put_line ('hex_output: ' || hex_output);
  end loop;

  return hex_output;
end from_bin_2_hex;

--- FROM HEX2BIN
function from_hex_2_bin( hex_input varchar2)
return varchar2
is
  bin_output varchar2(64);
  i          number := 0;
begin
  --dbms_output.put_line('hex_input: ' || hex_input);
  for i in 1..LENGTH(hex_input)
  loop
    case
    when substr(hex_input, i, 1) = '0' then 
      bin_output := bin_output || '0000';
    when substr(hex_input, i, 1) = '1' then 
      bin_output := bin_output || '0001';
    when substr(hex_input, i, 1) = '2' then 
      bin_output := bin_output || '0010';
    when substr(hex_input, i, 1) = '3' then 
      bin_output := bin_output || '0011';
    when substr(hex_input, i, 1) = '4' then 
      bin_output := bin_output || '0100';
    when substr(hex_input, i, 1) = '5' then 
      bin_output := bin_output || '0101';
    when substr(hex_input, i, 1) = '6' then 
      bin_output := bin_output || '0110';
    when substr(hex_input, i, 1) = '7' then 
      bin_output := bin_output || '0111';
    when substr(hex_input, i, 1) = '8' then
      bin_output := bin_output || '1000';
    when substr(hex_input, i, 1) = '9' then 
      bin_output := bin_output || '1001';
    when substr(hex_input, i, 1) = 'A' then 
      bin_output := bin_output || '1010';
    when substr(hex_input, i, 1) = 'B' then 
      bin_output := bin_output || '1011';
    when substr(hex_input, i, 1) = 'C' then 
      bin_output := bin_output || '1100';
    when substr(hex_input, i, 1) = 'D' then 
      bin_output := bin_output || '1101';
    when substr(hex_input, i, 1) = 'E' then 
      bin_output := bin_output || '1110';
    when substr(hex_input, i, 1) = 'F' then 
      bin_output := bin_output || '1111';
    else
      dbms_output.put_line ('Invalid INPUT: h2b');
    end case;
  end loop;

  return bin_output;
end from_hex_2_bin;

-- key is in hex form
function new_mk_prf( orig_b_value varchar2,
                     key_value    varchar2,
                     twk_b_value  varchar2,
                     encrypt      number)
return varchar2
is
  inp_h_value    varchar2(16);
  inp_n_value    number;
  enc_h_value    varchar2(16);
  enc_n_value    number;
  inp_b_value    varchar2(64) := null;
  enc_b_value    varchar2(64) := null;
  --twk_b_value    varchar2(8) := to_binary(tweak, 8);
  num_zeros      number := 0;
  orig_b_length  number := 0;
  l_mod          number := dbms_crypto.ENCRYPT_3DES + dbms_crypto.CHAIN_ECB + 
                         dbms_crypto.PAD_ZERO;
  zero_b_value   varchar2(64) := '0000000000000000000000000000000000000000000000000000000000000000';
  dm_enc_use_ora_hash boolean := FALSE;
begin
  -- form the 64 bit input
  --dbms_output.put_line('mk_prf: ' || orig_b_value);
  orig_b_length := LENGTH(orig_b_value);

  --dbms_output.put_line('mk_prf: o_b_l: ' || orig_b_length);

  if dm_enc_use_ora_hash = TRUE then
    inp_b_value := orig_b_value;
    inp_n_value := from_binary(inp_b_value);
    --enc_n_value := ora_hash(inp_n_value, 4294967295, key_value);
    select ora_hash(inp_n_value, 4294967295, key_value) 
    into enc_n_value
    from dual;
    --dbms_output.put_line('enc_n_value: ' || enc_n_value);
    enc_b_value := to_binary(enc_n_value,32);
    --dbms_output.put_line('enc_b_value: ' || enc_b_value);
  else
    inp_b_value := orig_b_value || substr(zero_b_value, 1, 56 - orig_b_length) ||
                 twk_b_value;
    inp_h_value := from_bin_2_hex(inp_b_value);
    enc_h_value := dbms_crypto.encrypt(inp_h_value, l_mod, key_value);
    enc_b_value := from_hex_2_bin(enc_h_value); 
  end if;

  --dbms_output.put_line('mk_prf: inp_h: ' || inp_h_value);


  --enc_h_value := substr(dbms_crypto.mac(inp_h_value, dbms_crypto.HMAC_SH1 , key_value),
  --                      1, 16);
  --dbms_output.put_line('mk_prf: outp_h: ' || enc_h_value);
  
  --dbms_output.put_line('mk_prf: outp_bin: ' || enc_b_value);
  --dbms_output.put_line('enc ret: ' || substr(enc_b_value, 64-orig_b_length+1,orig_b_length));

  return substr(enc_b_value, 1,orig_b_length);
end new_mk_prf;

function new_mk_round( orig_b_value varchar2,
                       inp_length   number,
                       key_value    varchar2,
                       twk_b_value  varchar,
                       encrypt      number)
return varchar2
is
  inp_br_value    varchar2(64) := null;
  out_b_value     varchar2(64) := null;
  nr_b_value      varchar2(64) := null;
  nl_b_value      varchar2(64) := null;
  nr_value        number := 0;
  nl_value        number := 0;
  inp_bl_value    varchar2(64) := null;
  prf_b_value     varchar2(64) := null;
  num_zeros       number := 0;
begin

  --dbms_output.put_line(' new_mk_round: ' || inp_length);
  --dbms_output.put_line(' new_mk_round: flr' || FLOOR((inp_length/2)));
  --dbms_output.put_line('round b in value: ' || orig_b_value);
  if encrypt = 1 then
    inp_br_value := substr(orig_b_value, FLOOR((inp_length/2))+1, FLOOR(inp_length/2));
    inp_bl_value := substr(orig_b_value, 1, FLOOR((inp_length/2)));

    --dbms_output.put_line('prf input: ' || inp_br_value);
    --dbms_output.put_line('key_value input: ' || key_value);
    --dbms_output.put_line('tweak input: ' || tweak);
    nl_b_value := inp_br_value;
    prf_b_value  := new_mk_prf(inp_br_value, key_value, twk_b_value, encrypt);
    nr_b_value := bv_bitxor(inp_bl_value, prf_b_value);
    out_b_value := nl_b_value || nr_b_value;
  else
    inp_br_value := substr(orig_b_value, FLOOR((inp_length/2))+1, FLOOR(inp_length/2));
    inp_bl_value := substr(orig_b_value, 1, FLOOR((inp_length/2)));

    nr_b_value := inp_bl_value;
    prf_b_value  := new_mk_prf(inp_bl_value, key_value, twk_b_value, encrypt);
    nl_b_value := bv_bitxor(inp_br_value, prf_b_value); 
    out_b_value := nl_b_value || nr_b_value;
  end if;
    
  --dbms_output.put_line('round b out value: ' || out_b_value);
  return out_b_value;
end new_mk_round;

----- ENCRYPT
function new_mk_encrypt( orig_value number,
                         key_value  varchar2 := 'abce12345678234',
                         max_value  number := '999999999999' )
return varchar2
is
  inp_b_value     varchar2(64);
  max_o_bits      number := 0;
  max_b_value     varchar2(64);
  mapped          boolean := FALSE;
  inp_n_value     number := 0;
  DM_ENC_ROUNDS   number := 6;
  TYPE twk_table_array is TABLE of varchar2(8);
  twk_table twk_table_array := twk_table_array('00000001',
                                               '00000010',
                                               '00000011',
                                               '00000100',
                                               '00000101',
                                               '00000110',
                                               '00000111',
                                               '00001000');
begin

  --dbms_output.put_line('LENGTH: ' || LENGTH(to_binary(orig_value)));
  inp_n_value := orig_value;
  if inp_n_value > max_value then
    dbms_standard.raise_application_error(-20001, 
                     ' input is bigger than max permissble vale: cannot encrypt');
  end if;
  -- get max bits need for the max_number and the b value 
  get_max_bits(max_value, max_b_value, max_o_bits);
  --dbms_output.put_line('max_o_bits : ' || max_o_bits);
  inp_b_value := substr(to_binary(orig_value), 64-max_o_bits+1, max_o_bits);
  --dbms_output.put_line('original source: ' || inp_b_value);

  loop
    for j in 1..DM_ENC_ROUNDS
    loop
      inp_b_value := new_mk_round(inp_b_value, LENGTH(inp_b_value), key_value, 
                                  twk_table(j), 1);
      --dbms_output.put_line('round value: ' || from_binary(inp_b_value));
    end loop;
    
    if from_binary(inp_b_value) < max_value then
      mapped := TRUE;
    end if;
    
    /* for i in 1..LENGTH(inp_b_value)
    loop
      if substr(inp_b_value, i, 1) != substr(max_b_value, i, 1) then
        if substr(inp_b_value, i, 1) = '1' then
          mapped := TRUE;
        else
          mapped := FALSE;
        end if;
        exit;
      end if;
    end loop; */
    exit when mapped = TRUE;
  end loop;

  return from_binary(inp_b_value);
end new_mk_encrypt; 

-- DECRYPT
function new_mk_decrypt( orig_value number,
                         key_value  varchar2 := 'abce12345678234',
                         max_value  number := '999999999999' )
return varchar2
is
  inp_b_value     varchar2(64);
  max_b_value     varchar2(64);
  max_o_bits      number := 0;
  mapped          boolean := FALSE;
  inp_n_value     number := 0;
  DM_ENC_ROUNDS   number := 6;
  TYPE twk_table_array is TABLE of varchar2(8);
  twk_table twk_table_array := twk_table_array('00000001',
                                               '00000010',
                                               '00000011',
                                               '00000100',
                                               '00000101',
                                               '00000110',
                                               '00000111',
                                               '00001000');
begin

  inp_n_value := orig_value;
  if inp_n_value > max_value then
    dbms_standard.raise_application_error(-20002, 
                      ' input is bigger than max permissble vale: cannot decrypt');
  end if;
  get_max_bits(max_value, max_b_value, max_o_bits);
  --dbms_output.put_line('max_o_bits : ' || max_o_bits);
  inp_b_value := substr(to_binary(orig_value), 64-max_o_bits+1, max_o_bits);
  --dbms_output.put_line('original source: ' || inp_b_value);

  loop
    for j in 1..DM_ENC_ROUNDS
    loop
      inp_b_value := new_mk_round(inp_b_value, LENGTH(inp_b_value), key_value, 
                                  twk_table(DM_ENC_ROUNDS-j+1), 0);
      --dbms_output.put_line('round value: ' || from_binary(inp_b_value));
    end loop;
    
    if from_binary(inp_b_value) < max_value then
      mapped := TRUE;
    end if;
    
    /* for i in 1..LENGTH(inp_b_value)
    loop
      if substr(inp_b_value, i, 1) != substr(max_b_value, i, 1) then
        if substr(inp_b_value, i, 1) = '1' then
          mapped := TRUE;
        else
          mapped := FALSE;
        end if;
        exit;
      end if;
    end loop; */ 
    exit when mapped = TRUE;
  end loop;

  --if mapped = 0 then
  --  dbms_output.put_line('could not map in 10k iterations');
  --end if;
  --dbms_output.put_line('original out: ' || inp_b_value);
  return from_binary(inp_b_value);
end new_mk_decrypt; 

 function encrypt( orig_value varchar2,  
                    fmt mgmt_dm_formatmap,
                    max_value number,
                    inpsd number) return varchar2 
                    deterministic parallel_enable 
 is 
    num NUMBER; 
    encr NUMBER; 
  begin 
    if (orig_value is null) then
        return orig_value;
    end if;
    num := encode_format_to_number(orig_value, fmt); 
    encr := new_mk_encrypt(num, lpad(inpsd, 47, 9), max_value); 
    return decode_number_to_format(to_number(encr), fmt); 
  end;  
  
  function decrypt( orig_value varchar2,  
                    fmt mgmt_dm_formatmap,
                    max_value number,
                    inpsd number) return varchar2 
                    deterministic parallel_enable 
  is 
    num NUMBER; 
    encr NUMBER; 
  begin 
    if (orig_value is null) then
        return orig_value;
    end if;
    num := encode_format_to_number(orig_value, fmt); 
    encr := new_mk_decrypt(num, lpad(inpsd, 47, 9), max_value); 
    return decode_number_to_format(to_number(encr), fmt); 
  end;  

 /* Date encrypt/decrypt functions */  function encrypt( orig_date Date,  
                    start_date Date,
                    end_date Date, 
                    inpsd NUMBER) return Date 
                    deterministic parallel_enable 
 is 
    num NUMBER; 
    max_value NUMBER; 
    encr NUMBER; 
  begin 
    if (orig_date is null) then
        return orig_date;
    end if;
    if (orig_date < start_date) then
        return start_date;
    end if;
    if (orig_date > end_date) then
        return end_date;
    end if;
    num := round((orig_date - start_date)*86400);
    max_value := round((end_date - start_date)*86400);
    encr := new_mk_encrypt(num, lpad(inpsd, 47, 9), max_value); 
    return start_date + numtodsinterval(encr, 'SECOND'); 
  end;  
  
 function decrypt( mask_date Date,  
                    start_date Date,
                    end_date Date,
                    inpsd NUMBER) return Date 
                    deterministic parallel_enable 
 is 
    num NUMBER; 
    max_value NUMBER; 
    encr NUMBER; 
  begin 
    if (mask_date is null) then
        return mask_date;
    end if;
    if (mask_date < start_date) then
        return start_date;
    end if;
    if (mask_date > end_date) then
        return end_date;
    end if;
    encr := round((mask_date - start_date)*86400);
    max_value := round((end_date - start_date)*86400);
    num := new_mk_decrypt(encr, lpad(inpsd, 47, 9), max_value); 
    return start_date + numtodsinterval(num, 'SECOND'); 
  end;  

    procedure set_task_name(s varchar2) is
    begin
        taskname := s;
    end;

    function get_task_name return varchar2 is
    begin
        return taskname;
    end;

    procedure set_spa_trial(s varchar2) is
    begin
        spatrial := s;
    end;

    function get_spa_trial return varchar2 is
    begin
        return spatrial;
    end;

    function isSPATrialRequired return boolean is
    begin
        if (spatrial IS NULL OR spatrial = 'N' OR spatrial = '-1') then 
            return false;
        else
            return true;
        end if;
    end;

    procedure set_dir_obj(d varchar2) is
    begin
        dirobj := d;
    end;

    function get_dir_obj return varchar2 is
    begin
        return dirobj;
    end;

    procedure set_report_dir(d varchar2) is
    begin
        reportdir := d;
    end;

    function get_report_dir return varchar2 is
    begin
        return reportdir;
    end;

    function isWorkloadMasking return boolean is
    begin
        if (dirobj IS NULL OR dirobj = '-1') then 
            return false;
        else
            return true;
        end if;
    end;

    procedure set_sts_owner(s varchar2) is
    begin
        stsowner := s;
    end;

    function get_sts_owner return varchar2 is
    begin
        return stsowner;
    end;

    function get_sts_name return varchar2 is
    begin
        return stsname;
    end;

    procedure set_sts_name(s varchar2) is
    pos number;
    begin
      pos := instr(s,'.');
      if(pos > 0) then
         stsname := trim(both '"' from substr(s,pos+1));
         set_sts_owner(substr(s,0,pos-1));
      else
        stsname := s;
      end if;
    end;

    procedure set_sts_mask(s varchar2) is
    begin
        stsmask := s;
    end;

    function get_sts_mask return varchar2 is
    begin
        return stsmask;
    end;

    function isSTSMasking return boolean is
    begin
        if (stsmask IS NULL OR stsmask = '-1' OR stsmask = 'N') then 
            return false;
        else
            return true;
        end if;
    end;

    procedure create_xml_report (clob_pointer clob) is
      v_buf varchar2(1000);
      amount binary_integer :=1000;
      position integer :=1;
      fp utl_file.file_type;
      sqlerr_msg varchar2(1000);
      path varchar2(4000);
      dir_name varchar2(30);
    begin
    if (reportdir is NULL or  reportdir = '-1' or reportdir = '') then 
      return;  
    else  
      begin
      dir_name := reportdir;
      execute immediate 'select directory_path FROM dba_directories WHERE directory_name = :1' into path USING dir_name; 
       fp :=utl_file.fopen(dir_name,'DM_RAT_13048_impact.html','w');
       loop
        begin
         dbms_lob.read (clob_pointer,amount,position,v_buf);
         utl_file.put_line(fp,v_buf,true);
         position :=position +amount;
        exception
         when no_data_found then
         exit;
        end;
       end loop;
       utl_file.fclose(fp);
       dbms_output.put_line('SQL Performance analyzer : Impact report generated at ' ||path||'\DM_RAT_13048_impact.html');
       exception
         when others then
          sqlerr_msg := substr(sqlerrm, 1, 100);
          dbms_output.put_line ('Error in writing xml report :' || sqlerr_msg);
       end;
        end if;
       end;

    function get_control_xml return xmltype is
      xmlstring varchar2(4000);
      controlxml XMLTYPE;
    begin
       xmlstring := '<CONTROL_PARAMS>';
       if isWorkloadMasking then 
         xmlString :=  xmlString || '<WORKLOAD>' ||  get_dir_obj() || '</WORKLOAD>';
        else
         xmlString :=  xmlString || '<WORKLOAD></WORKLOAD>';
        end if;
        if isSTSMasking then
         xmlString :=  xmlString || '<STS>Y</STS>';
        else
         xmlString :=  xmlString || '<STS>N</STS>';
        end if;
        xmlString := xmlString || '</CONTROL_PARAMS>';
        controlxml := XMLTYPE(xmlString);
        return controlxml;
    end;

    procedure persist_seed(arg_hsd number)  is
    begin
    drop_seed;
    execute immediate 'create table DM_RAT_13048_seed (seed number)';
    execute immediate 'insert into DM_RAT_13048_seed values( :1)' using arg_hsd;
    commit;
    EXCEPTION
     WHEN OTHERS THEN
      dbms_output.put_line ('Error in persisting seed :' || substr(sqlerrm, 1, 100));
    end;
    procedure drop_seed is
    begin
    execute immediate 'drop table DM_RAT_13048_seed';
    EXCEPTION
     WHEN OTHERS THEN
     NULL;
    end;
    function strval (len number) return varchar2 parallel_enable is
    begin
        return dbms_random.string('l', len);
    end;

    function numval (low number, high number) return number parallel_enable is
    begin
        return dbms_random.value(low,high);
    end;


    FUNCTION  replaceregexpclob (col CLOB, column_id NUMBER) RETURN CLOB IS
        TYPE cur_typ IS REF CURSOR;
        c cur_typ;
        idx NUMBER:=0;
        temp CLOB :=  col;
        query_str VARCHAR2(200) := 'SELECT  REGEX, EXPR FROM mgmt_dm_rule_'||column_id;
        regex VARCHAR2(4000);
        expr VARCHAR2(4000);
        BEGIN
        IF NOT(regexp_val_arr.EXISTS(column_id))
        THEN
          OPEN c FOR query_str;
          LOOP
            FETCH c INTO regex, expr;
            EXIT WHEN c%NOTFOUND;

            regexp_val_arr(column_id)(idx) := regex;
            exp_val_arr(column_id)(idx) := expr;
            idx := idx+1;
          END LOOP;
        END IF;

        FOR i IN regexp_val_arr(column_id).FIRST .. regexp_val_arr(column_id).LAST
        LOOP
          temp := regexp_replace(temp,
                                 regexp_val_arr(column_id)(i),
                                 exp_val_arr(column_id)(i));
        END LOOP;

        RETURN temp;
    end;

    FUNCTION  replaceregexpchar (col VARCHAR2, column_id NUMBER) RETURN VARCHAR2 IS
        TYPE cur_typ IS REF CURSOR;
        c cur_typ;
        idx NUMBER:=0;
        temp varchar2(4000) :=  col;
        query_str VARCHAR2(200) := 'SELECT  REGEX, EXPR FROM mgmt_dm_rule_'||column_id;
        regex VARCHAR2(4000);
        expr VARCHAR2(4000);
        BEGIN
        IF NOT(regexp_val_arr.EXISTS(column_id))
        THEN
          OPEN c FOR query_str;
          LOOP
            FETCH c INTO regex, expr;
            EXIT WHEN c%NOTFOUND;

            regexp_val_arr(column_id)(idx) := regex;
            exp_val_arr(column_id)(idx) := expr;
            idx := idx+1;
          END LOOP;
        END IF;

        FOR i IN regexp_val_arr(column_id).FIRST .. regexp_val_arr(column_id).LAST
        LOOP
          temp := substrb(regexp_replace(temp,
                                 regexp_val_arr(column_id)(i),
                                 exp_val_arr(column_id)(i)), 1, 4000);
        END LOOP;

        RETURN temp;
    end;

 procedure distribute_nos(low number,high number,numd number)
 is
   maparr numarr;
   randmax number := 0;
   randidx number := 0;
 begin
   for i in low..high loop
     maparr(i) := i;
   end loop;

   randmax := high;

   for i in 1..numd loop
     randidx := trunc(dbms_random.value(low, randmax));
     permuarr(i) := maparr(randidx);
     maparr(randidx) := maparr(randmax);
     randmax := randmax - 1;

     if randmax <= 0 OR randmax < low then
       randmax := high;
     end if;
   end loop;

 end distribute_nos;

 function fetchnum(idx number,low number,high number,numd number)
 return number
 is
 retval number := 0; 
 begin

   if populatearr = 0 then
     permuarr.delete();
     distribute_nos(low, high, numd);
     populatearr := 1;
   end if; 

   retval := permuarr(idx); 

   if idx = numd then 
     populatearr := 0; 
     permuarr.delete(); 
   end if; 

   return retval;
 end fetchnum;

    FUNCTION randomencode (i_input VARCHAR2, pad_length NUMBER) RETURN VARCHAR2 deterministic parallel_enable IS
        TYPE charmap IS TABLE OF VARCHAR2(1) INDEX BY BINARY_INTEGER;
        l_input NUMBER;
        l_mod NUMBER;
        l_retCode VARCHAR2(100);
        l_map charmap;
        l_base number := 25;
        BEGIN
        if (i_input is null) then
            return lpad('a',pad_length,'a');
        end if;

        l_map(0)  := 'a';
        l_map(1)  := 'b';
        l_map(2)  := 'c';
        l_map(3)  := 'd';
        l_map(4)  := 'e';
        l_map(5)  := 'f';
        l_map(6)  := 'g';
        l_map(7)  := 'h';
        l_map(8)  := 'i';
        l_map(9)  := 'j';
        l_map(10) := 'k';
        l_map(11) := 'l';
        l_map(12) := 'm';
        l_map(13) := 'n';
        l_map(14) := 'o';
        l_map(15) := 'p';
        l_map(16) := 'q';
        l_map(17) := 'r';
        l_map(18) := 's';
        l_map(19) := 't';
        l_map(20) := 'u';
        l_map(21) := 'v';
        l_map(22) := 'w';
        l_map(23) := 'x';
        l_map(24) := 'y';
        l_map(25) := 'z';

        l_input := i_input;
        l_retCode := '';

        LOOP 
    	   -- skip 'a' for padding
            l_mod := l_input mod l_base + 1; 
            l_retCode := l_retCode || l_map(l_mod) ;
            IF (l_input >= l_base) THEN
                l_input := round(l_input / l_base);
            ELSE 
                l_input := 0;
            END IF;
            -- dbms_output.put_line('left ' || l_input || ' mod ' || l_mod );
            EXIT WHEN l_input = 0;
        END LOOP;
        return lpad(l_retCode, pad_length, 'a');
    END ;

function get_package_version return varchar2 is
begin
   return dm_package_version;
end;
procedure set_tbps_option(tbps_option varchar2, 
                          cust_tbps_name varchar2, 
                          create_omf varchar2) is 
begin
  if tbps_option = '0' then
    tbps_name := null;
    tbps_data_file_name := null;
  elsif tbps_option = '1' then
    tbps_name := 'ORA_DMASK_'|| DBMS_SESSION.UNIQUE_SESSION_ID ||'_TBPS';
    tbps_name := tbps_name ||dbms_random.string('U', 30 - lengthb(tbps_name));
    tbps_name := SYS.DBMS_ASSERT.enquote_name(tbps_name);
    create_new_tbps := true; 
    if create_omf = 'Y' then 
      tbps_data_file_name := null;
    else
      tbps_data_file_name := 'ORA_DMASK_'||
         DBMS_SESSION.UNIQUE_SESSION_ID||'_TBPSDATAFILE';
      tbps_data_file_name := SYS.DBMS_ASSERT.enquote_name(tbps_data_file_name);
      tbps_data_file_name := tbps_data_file_name||'.dbf';
    end if;
  elsif (tbps_option = '2' or tbps_option = '3') and cust_tbps_name is not null then
    tbps_name := SYS.DBMS_ASSERT.enquote_name(cust_tbps_name);
    tbps_data_file_name := null;
    if tbps_option = '3' then
      move_dmask := true;
    end if;
  else
    tbps_name := null;
    tbps_data_file_name := null;
  end if;
end set_tbps_option;
procedure create_new_tablespace as 
begin
 if create_new_tbps then 
  if tbps_data_file_name is not null then
    -- drop tables if exists
    drop_tablespace;
    begin
      execute immediate 'create tablespace '||tbps_name||
       ' datafile '||''''||tbps_data_file_name
         ||''''||' SIZE 100M AUTOEXTEND ON NEXT 
         100M NOLOGGING DEFAULT COMPRESS 
         ONLINE EXTENT MANAGEMENT LOCAL AUTOALLOCATE 
         SEGMENT SPACE MANAGEMENT AUTO ';
      new_tbps_created := true;
    exception
      when others then
        new_tbps_created:=false;
        null;
    end;
  else 
     -- drop tables if exists
    drop_tablespace;
    begin
      execute immediate 'create tablespace       '||tbps_name||' NOLOGGING DEFAULT COMPRESS BASIC';
      new_tbps_created := true;
    exception
      when others then
        new_tbps_created:=false;
        null;
    end;
  end if;
  if new_tbps_created then
    move_dmask := true;
  else 
    -- failed to create tablespace
    -- we will fall back to default option
    move_dmask := false;
    tbps_name := null;
    create_new_tbps := false;
  end if;
 end if;
end create_new_tablespace;
function get_tbps_name return varchar2 is
begin
  return tbps_name;
end get_tbps_name;
function get_tbps_clause return varchar2 is
 tbps_clause varchar2(150) := null;
begin
  if get_tbps_name is not null then
    tbps_clause := ' TABLESPACE '||get_tbps_name;
  end if;
  if isNewTbpsCreated = false then
    tbps_clause := tbps_clause||' COMPRESS BASIC';
  end if;
  return tbps_clause;
end get_tbps_clause;
function get_tbps_clause_dmask return varchar2 is
 tbps_clause varchar2(150) := null;
begin
  if get_tbps_name is not null then
   tbps_clause := ' TABLESPACE '||get_tbps_name; 
   tbps_clause := tbps_clause||' COMPRESS ';
  end if;
  return tbps_clause;
end get_tbps_clause_dmask;
function get_tbps_clause_stage return varchar2 is
  tbps_clause varchar2(150) := null;
begin
  if get_tbps_name is not null then
     tbps_clause := ' TABLESPACE '||get_tbps_name; 
  end if;
  if create_new_tbps then
    tbps_clause := tbps_clause||' NOCOMPRESS ';
  end if;
  tbps_clause := tbps_clause||' PCTFREE 0';
  return tbps_clause;
end get_tbps_clause_stage;
function get_tbps_clause_temp return varchar2 is
 tbps_clause varchar2(150) := null;
begin
  if get_tbps_name is not null then
    tbps_clause := ' TABLESPACE '||get_tbps_name;
  end if;
  if isNewTbpsCreated = false then
    tbps_clause := tbps_clause||' COMPRESS BASIC';
  end if;
  return tbps_clause;
end get_tbps_clause_temp;
procedure drop_tablespace as
begin
  if create_new_tbps then 
    execute immediate 'drop tablespace '    ||tbps_name||' including contents and     datafiles';
  end if;
exception
  when others then
    null;
end drop_tablespace;
function is_move_dmask return boolean is
begin
  return move_dmask;
end is_move_dmask;
function isNewTbpsCreated return boolean is 
begin
  return new_tbps_created;
end isNewTbpsCreated;
END mgmt$mask_util;
/

create or replace type mgmt$mask_array_list as table of varchar2(128)
/
begin mgmt$mask_util.set_tbps_option(:tbps_opt, :cst_tbs_n, :create_omf); end;
/
begin mgmt$mask_util.create_new_tablespace; end;
/
begin mgmt$mask_util.set_spa_trial(:spa_trial); end;
/
begin mgmt$mask_util.set_sts_owner(:sts_owner); end;
/
begin mgmt$mask_util.set_sts_name(:sts_name); end;
/
begin mgmt$mask_util.set_task_name(:task_name); end;
/
begin mgmt$mask_util.set_report_dir(:report_dir); end;
/
CREATE OR REPLACE PROCEDURE mgmt$mask_setUpMappingTable (sid VARCHAR2, sourcecol VARCHAR2, sourcetab VARCHAR2)
AUTHID CURRENT_USER IS
    ctsql_text VARCHAR2(400) := 'CREATE TABLE MGMT_DM_TT_' || sid || 
      '(ORIG_VAL, NEW_VAL) ' ||
      ' AS (SELECT '|| sourcecol || ',' || sourcecol ||
      ' FROM ' || sourcetab || ' WHERE ROWNUM<1) ';
    itsql_text VARCHAR2(400) := 'INSERT INTO  MGMT_DM_TT_' || sid || 
      ' SELECT ' || sourcecol || ', dm_seq.nextval FROM ' ||
      '( SELECT DISTINCT ' || sourcecol || ' FROM ' ||  sourcetab || ')';
    dlsql_text VARCHAR2(400) := 'DELETE FROM  MGMT_DM_TT_' || sid  ;
BEGIN
    BEGIN
      EXECUTE IMMEDIATE ctsql_text;
    EXCEPTION
      WHEN OTHERS THEN
        EXECUTE IMMEDIATE dlsql_text;
    END;
EXCEPTION
      WHEN OTHERS THEN
        mgmt$mask_errorExit ('ERROR accessing table: MGMT_DM_TT_' || sid);
END mgmt$mask_setUpMappingTable;
/

/*

CREATE OR REPLACE PROCEDURE mgmt$step_1_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF NOT mgmt$mask_util.isSPATrialRequired THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('BEGIN mgmt$mask_util.set_task_name (DBMS_SQLPA.create_analysis_task(sqlset_name=>mgmt$mask_util.get_sts_name ,task_name=>mgmt$mask_util.get_task_name , sqlset_owner=>mgmt$mask_util.get_sts_owner)); END; 
');
      EXECUTE IMMEDIATE 'BEGIN mgmt$mask_util.set_task_name (DBMS_SQLPA.create_analysis_task(sqlset_name=>mgmt$mask_util.get_sts_name ,task_name=>mgmt$mask_util.get_task_name , sqlset_owner=>mgmt$mask_util.get_sts_owner)); END; 
';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- -- step_num := -1;
        return;
    END;
END mgmt$step_1_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_2_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 2 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF NOT mgmt$mask_util.isSPATrialRequired THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_SQLPA.execute_analysis_task(task_name => mgmt$mask_util.get_task_name, execution_type  => ''explain plan'', execution_name  => ''pre-mask_DM_RAT_13048''); END; 
');
      EXECUTE IMMEDIATE 'BEGIN DBMS_SQLPA.execute_analysis_task(task_name => mgmt$mask_util.get_task_name, execution_type  => ''explain plan'', execution_name  => ''pre-mask_DM_RAT_13048''); END; 
';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- -- step_num := -1;
        return;
    END;
END mgmt$step_2_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_3_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 3 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TRIGGER "SYSADM"."OP_PSOPRDEFN_TR"');
      EXECUTE IMMEDIATE 'DROP TRIGGER "SYSADM"."OP_PSOPRDEFN_TR"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- -- step_num := -1;
        return;
    END;
END mgmt$step_3_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_4_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 4 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PSOPRDEFN'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PSOPRDEFN'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- -- step_num := -1;
        return;
    END;
END mgmt$step_4_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_5_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 5 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PSOPRDEFN" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PSOPRDEFN" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- -- step_num := -1;
        return;
    END;
END mgmt$step_5_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_6_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 6 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PSOPRDEFN" FROM "HRPSINS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PSOPRDEFN" FROM "HRPSINS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- -- step_num := -1;
        return;
    END;
END mgmt$step_6_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_7_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 7 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PSOPRDEFN'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PSOPRDEFN'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- -- step_num := -1;
        return;
    END;
END mgmt$step_7_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_8_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 8 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS0PSOPRDEFN"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS0PSOPRDEFN"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_8_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_9_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 9 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PSAPSOPRDEFN"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PSAPSOPRDEFN"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_9_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_10_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 10 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PSBPSOPRDEFN"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PSBPSOPRDEFN"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_10_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_11_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 11 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PSCPSOPRDEFN"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PSCPSOPRDEFN"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_11_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_12_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 12 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_PSOPRDEFN"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_PSOPRDEFN"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_12_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_13_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 13 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_JOBCODE_TBL'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_JOBCODE_TBL'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_13_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_14_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 14 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_JOBCODE_TBL" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_JOBCODE_TBL" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_14_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_15_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 15 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_JOBCODE_TBL'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_JOBCODE_TBL'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_15_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_16_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 16 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS0JOBCODE_TBL"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS0JOBCODE_TBL"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_16_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_17_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 17 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS1JOBCODE_TBL"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS1JOBCODE_TBL"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_17_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_18_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 18 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS2JOBCODE_TBL"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS2JOBCODE_TBL"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_18_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_19_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 19 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PSAJOBCODE_TBL"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PSAJOBCODE_TBL"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_19_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_20_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 20 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PSBJOBCODE_TBL"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PSBJOBCODE_TBL"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_20_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_21_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 21 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PSCJOBCODE_TBL"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PSCJOBCODE_TBL"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_21_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_22_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 22 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_JOBCODE_TBL"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_JOBCODE_TBL"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_22_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_23_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 23 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_JOBC_LOD'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_JOBC_LOD'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_23_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_24_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 24 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JOBC_LOD" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JOBC_LOD" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_24_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_25_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 25 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_JOBC_LOD'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_JOBC_LOD'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_25_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_26_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 26 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS0OP_JOBC_LOD"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS0OP_JOBC_LOD"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_26_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_27_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 27 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_JOBC_LOD"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_JOBC_LOD"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_27_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_28_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 28 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_POSITION_DATA'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_POSITION_DATA'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_28_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_29_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 29 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_POSITION_DATA" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_POSITION_DATA" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_29_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_30_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 30 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_POSITION_DATA'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_POSITION_DATA'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_30_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_31_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 31 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS0POSITION_DATA"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS0POSITION_DATA"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_31_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_32_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 32 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS1POSITION_DATA"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS1POSITION_DATA"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_32_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_33_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 33 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS2POSITION_DATA"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS2POSITION_DATA"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_33_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_34_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 34 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS3POSITION_DATA"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS3POSITION_DATA"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_34_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_35_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 35 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS4POSITION_DATA"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS4POSITION_DATA"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_35_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_36_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 36 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS5POSITION_DATA"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS5POSITION_DATA"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_36_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_37_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 37 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS6POSITION_DATA"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS6POSITION_DATA"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_37_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_38_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 38 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_POSITION_DATA"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_POSITION_DATA"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_38_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_39_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 39 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_POSN_STG'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_POSN_STG'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_39_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_40_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 40 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_POSN_STG" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_POSN_STG" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_40_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_41_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 41 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_POSN_STG'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_POSN_STG'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_41_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_42_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 42 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_POSN_STG"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_POSN_STG"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_42_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_43_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 43 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_TRV_MSG_DAT'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_TRV_MSG_DAT'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_43_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_44_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 44 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_TRV_MSG_DAT" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_TRV_MSG_DAT" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_44_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_45_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 45 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_TRV_MSG_DAT'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_TRV_MSG_DAT'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_45_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_46_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 46 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS0OP_TRV_MSG_DAT"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS0OP_TRV_MSG_DAT"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_46_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_47_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 47 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS1OP_TRV_MSG_DAT"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS1OP_TRV_MSG_DAT"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_47_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_48_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 48 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS2OP_TRV_MSG_DAT"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS2OP_TRV_MSG_DAT"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_48_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_49_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 49 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_TRV_MSG_DAT"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_TRV_MSG_DAT"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_49_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_50_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 50 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_TRV_MSG_VAL'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_TRV_MSG_VAL'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_50_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_51_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 51 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_TRV_MSG_VAL" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_TRV_MSG_VAL" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_51_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_52_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 52 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_TRV_MSG_VAL'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_TRV_MSG_VAL'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_52_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_53_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 53 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS0OP_TRV_MSG_VAL"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS0OP_TRV_MSG_VAL"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_53_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_54_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 54 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS1OP_TRV_MSG_VAL"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS1OP_TRV_MSG_VAL"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_54_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_55_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 55 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS2OP_TRV_MSG_VAL"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS2OP_TRV_MSG_VAL"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_55_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_56_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 56 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_TRV_MSG_VAL"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_TRV_MSG_VAL"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_56_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_57_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 57 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_JOBC_STG'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_JOBC_STG'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_57_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_58_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 58 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JOBC_STG" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JOBC_STG" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_58_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_59_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 59 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_JOBC_STG'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_JOBC_STG'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_59_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_60_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 60 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_JOBC_STG"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_JOBC_STG"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_60_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_61_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 61 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_DPLMT_TTL_CD'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_DPLMT_TTL_CD'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_61_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_62_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 62 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_DPLMT_TTL_CD" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_DPLMT_TTL_CD" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_62_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_63_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 63 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_DPLMT_TTL_CD'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_DPLMT_TTL_CD'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_63_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_64_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 64 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS0OP_DPLMT_TTL_CD"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS0OP_DPLMT_TTL_CD"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_64_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_65_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 65 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_DPLMT_TTL_CD"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_DPLMT_TTL_CD"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_65_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_66_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 66 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_EI_SDT_STG'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_EI_SDT_STG'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_66_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_67_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 67 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_EI_SDT_STG" FROM "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_EI_SDT_STG" FROM "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_67_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_68_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 68 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_EI_SDT_STG" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_EI_SDT_STG" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_68_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_69_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 69 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_EI_SDT_STG'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_EI_SDT_STG'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_69_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_70_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 70 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_CI_POS_STG'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_CI_POS_STG'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_70_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_71_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 71 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_CI_POS_STG" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_CI_POS_STG" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_71_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_72_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 72 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_CI_POS_STG'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_CI_POS_STG'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_72_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_73_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 73 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_CI_POS_STG"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_CI_POS_STG"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_73_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_74_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 74 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_EI_AP_STG'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_EI_AP_STG'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_74_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_75_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 75 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_EI_AP_STG" FROM "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_EI_AP_STG" FROM "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_75_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_76_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 76 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_EI_AP_STG" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_EI_AP_STG" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_76_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_77_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 77 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_EI_AP_STG'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_EI_AP_STG'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_77_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_78_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 78 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_EI_FP_STG'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_EI_FP_STG'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_78_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_79_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 79 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_EI_FP_STG" FROM "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_EI_FP_STG" FROM "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_79_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_80_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 80 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_EI_FP_STG" FROM "EAPSREAD"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_EI_FP_STG" FROM "EAPSREAD"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_80_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_81_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 81 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_EI_FP_STG" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_EI_FP_STG" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_81_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_82_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 82 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_EI_FP_STG'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_EI_FP_STG'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_82_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_83_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 83 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_JC_INTF_AET'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_JC_INTF_AET'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_83_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_84_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 84 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JC_INTF_AET" FROM "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JC_INTF_AET" FROM "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_84_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_85_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 85 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JC_INTF_AET" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JC_INTF_AET" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_85_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_86_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 86 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_JC_INTF_AET'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_JC_INTF_AET'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_86_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_87_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 87 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS0OP_JC_INTF_AET"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS0OP_JC_INTF_AET"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_87_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_88_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 88 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_JC_INTF_AET"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_JC_INTF_AET"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_88_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_89_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 89 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_JOBCODE_ARC'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_JOBCODE_ARC'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_89_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_90_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 90 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JOBCODE_ARC" FROM "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JOBCODE_ARC" FROM "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_90_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_91_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 91 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JOBCODE_ARC" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JOBCODE_ARC" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_91_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_92_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 92 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_JOBCODE_ARC'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_JOBCODE_ARC'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_92_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_93_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 93 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_JOBCODE_ARC"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_JOBCODE_ARC"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_93_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_94_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 94 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_JOBCODE_STG2'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_JOBCODE_STG2'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_94_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_95_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 95 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JOBCODE_STG2" FROM "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JOBCODE_STG2" FROM "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_95_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_96_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 96 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JOBCODE_STG2" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JOBCODE_STG2" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_96_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_97_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 97 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_JOBCODE_STG2'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_JOBCODE_STG2'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_97_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_98_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 98 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_JOBCODE_STG2"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_JOBCODE_STG2"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_98_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_99_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 99 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_JOBCODE_TBL'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_JOBCODE_TBL'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_99_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_100_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 100 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JOBCODE_TBL" FROM "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JOBCODE_TBL" FROM "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_100_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_101_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 101 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JOBCODE_TBL" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_JOBCODE_TBL" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_101_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_102_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 102 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_JOBCODE_TBL'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_JOBCODE_TBL'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_102_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_103_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 103 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS0OP_JOBCODE_TBL"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS0OP_JOBCODE_TBL"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_103_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_104_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 104 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_JOBCODE_TBL"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_JOBCODE_TBL"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_104_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_105_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 105 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_POSITION_DAT'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_POSITION_DAT'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_105_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_106_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 106 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_POSITION_DAT" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_POSITION_DAT" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_106_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_107_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 107 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_POSITION_DAT'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_POSITION_DAT'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_107_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_108_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 108 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS0OP_POSITION_DAT"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS0OP_POSITION_DAT"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_108_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_109_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 109 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS1OP_POSITION_DAT"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS1OP_POSITION_DAT"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_109_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_110_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 110 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_POSITION_DAT"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_POSITION_DAT"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_110_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_111_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 111 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_MBC_BASIC_LE'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_MBC_BASIC_LE'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_111_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_112_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 112 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_MBC_BASIC_LE" FROM "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_MBC_BASIC_LE" FROM "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_112_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_113_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 113 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_MBC_BASIC_LE" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_MBC_BASIC_LE" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_113_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_114_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 114 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_MBC_BASIC_LE'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_MBC_BASIC_LE'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_114_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_115_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 115 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_MBC_BASIC_LE"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_MBC_BASIC_LE"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_115_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_116_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 116 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_TM_STG_OPT'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_TM_STG_OPT'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_116_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_117_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 117 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_TM_STG_OPT" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_TM_STG_OPT" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_117_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_118_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 118 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_TM_STG_OPT'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_TM_STG_OPT'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_118_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_119_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 119 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_TM_STG_OPT"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_TM_STG_OPT"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_119_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_120_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 120 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_PERSONAL_DATA'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_PERSONAL_DATA'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_120_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_121_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 121 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_PERSONAL_DATA" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_PERSONAL_DATA" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_121_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_122_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 122 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_PERSONAL_DATA" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_PERSONAL_DATA" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_122_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_123_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 123 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_PERSONAL_DATA'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_PERSONAL_DATA'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_123_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_124_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 124 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS0PERSONAL_DATA"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS0PERSONAL_DATA"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_124_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_125_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 125 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS1PERSONAL_DATA"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS1PERSONAL_DATA"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_125_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_126_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 126 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS2PERSONAL_DATA"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS2PERSONAL_DATA"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_126_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_127_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 127 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS3PERSONAL_DATA"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS3PERSONAL_DATA"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_127_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_128_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 128 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS4PERSONAL_DATA"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS4PERSONAL_DATA"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_128_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_129_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 129 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS5PERSONAL_DATA"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS5PERSONAL_DATA"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_129_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_130_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 130 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_PERSONAL_DATA"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_PERSONAL_DATA"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_130_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_131_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 131 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_NAMES'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_NAMES'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_131_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_132_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 132 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_NAMES" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_NAMES" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_132_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_133_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 133 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_NAMES" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_NAMES" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_133_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_134_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 134 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_NAMES'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_NAMES'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_134_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_135_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 135 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS0NAMES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS0NAMES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_135_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_136_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 136 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS1NAMES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS1NAMES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_136_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_137_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 137 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS2NAMES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS2NAMES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_137_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_138_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 138 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS3NAMES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS3NAMES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_138_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_139_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 139 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS4NAMES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS4NAMES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_139_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_140_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 140 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS5NAMES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS5NAMES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_140_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_141_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 141 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PSANAMES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PSANAMES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_141_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_142_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 142 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PSBNAMES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PSBNAMES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_142_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_143_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 143 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PSCNAMES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PSCNAMES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_143_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_144_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 144 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PSDNAMES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PSDNAMES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_144_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_145_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 145 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_NAMES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_NAMES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_145_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_146_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 146 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_DEP_BEN_NAME'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_DEP_BEN_NAME'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_146_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_147_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 147 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_DEP_BEN_NAME" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_DEP_BEN_NAME" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_147_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_148_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 148 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_DEP_BEN_NAME" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_DEP_BEN_NAME" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_148_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_149_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 149 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_DEP_BEN_NAME'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_DEP_BEN_NAME'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_149_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_150_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 150 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS0DEP_BEN_NAME"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS0DEP_BEN_NAME"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_150_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_151_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 151 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS1DEP_BEN_NAME"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS1DEP_BEN_NAME"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_151_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_152_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 152 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS2DEP_BEN_NAME"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS2DEP_BEN_NAME"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_152_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_153_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 153 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS3DEP_BEN_NAME"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS3DEP_BEN_NAME"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_153_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_154_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 154 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS4DEP_BEN_NAME"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS4DEP_BEN_NAME"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_154_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_155_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 155 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_DEP_BEN_NAME"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_DEP_BEN_NAME"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_155_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_156_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 156 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_ADDRESSES'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_ADDRESSES'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_156_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_157_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 157 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_ADDRESSES" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_ADDRESSES" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_157_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_158_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 158 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_ADDRESSES" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_ADDRESSES" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_158_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_159_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 159 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_ADDRESSES'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_ADDRESSES'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_159_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_160_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 160 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PSAADDRESSES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PSAADDRESSES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_160_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_161_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 161 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_ADDRESSES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_ADDRESSES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_161_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_162_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 162 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_ROLEXLATOPR'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_ROLEXLATOPR'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_162_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_163_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 163 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_ROLEXLATOPR" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_ROLEXLATOPR" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_163_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_164_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 164 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_ROLEXLATOPR" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_ROLEXLATOPR" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_164_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_165_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 165 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_ROLEXLATOPR'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_ROLEXLATOPR'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_165_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_166_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 166 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS0ROLEXLATOPR"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS0ROLEXLATOPR"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_166_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_167_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 167 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS1ROLEXLATOPR"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS1ROLEXLATOPR"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_167_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_168_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 168 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS2ROLEXLATOPR"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS2ROLEXLATOPR"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_168_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_169_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 169 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS3ROLEXLATOPR"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS3ROLEXLATOPR"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_169_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_170_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 170 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS4ROLEXLATOPR"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS4ROLEXLATOPR"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_170_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_171_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 171 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS5ROLEXLATOPR"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS5ROLEXLATOPR"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_171_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_172_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 172 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_ROLEXLATOPR"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_ROLEXLATOPR"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_172_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_173_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 173 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_DEP_BEN_ADDR'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_DEP_BEN_ADDR'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_173_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_174_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 174 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_DEP_BEN_ADDR" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_DEP_BEN_ADDR" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_174_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_175_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 175 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_DEP_BEN_ADDR" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_DEP_BEN_ADDR" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_175_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_176_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 176 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_DEP_BEN_ADDR'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_DEP_BEN_ADDR'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_176_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_177_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 177 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_DEP_BEN_ADDR"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_DEP_BEN_ADDR"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_177_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_178_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 178 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_DEP_BEN'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_DEP_BEN'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_178_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_179_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 179 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_DEP_BEN" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_DEP_BEN" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_179_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_180_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 180 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_DEP_BEN" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_DEP_BEN" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_180_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_181_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 181 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_DEP_BEN'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_DEP_BEN'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_181_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_182_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 182 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_DEP_BEN"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_DEP_BEN"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_182_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_183_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 183 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_CITIZEN_PSSPRT'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_CITIZEN_PSSPRT'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_183_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_184_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 184 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_CITIZEN_PSSPRT" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_CITIZEN_PSSPRT" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_184_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_185_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 185 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_CITIZEN_PSSPRT" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_CITIZEN_PSSPRT" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_185_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_186_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 186 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_CITIZEN_PSSPRT'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_CITIZEN_PSSPRT'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_186_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_187_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 187 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_CITIZEN_PSSPRT"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_CITIZEN_PSSPRT"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_187_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_188_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 188 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_PERSON'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_PERSON'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_188_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_189_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 189 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_PERSON" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_PERSON" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_189_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_190_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 190 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_PERSON" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_PERSON" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_190_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_191_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 191 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_PERSON'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_PERSON'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_191_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_192_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 192 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_PERSON"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_PERSON"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_192_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_193_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 193 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_HR_EERCDDEL_RES'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_HR_EERCDDEL_RES'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_193_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_194_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 194 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_HR_EERCDDEL_RES" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_HR_EERCDDEL_RES" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_194_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_195_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 195 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_HR_EERCDDEL_RES" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_HR_EERCDDEL_RES" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_195_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_196_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 196 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_HR_EERCDDEL_RES'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_HR_EERCDDEL_RES'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_196_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_197_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 197 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS0HR_EERCDDEL_RES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS0HR_EERCDDEL_RES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_197_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_198_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 198 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS1HR_EERCDDEL_RES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS1HR_EERCDDEL_RES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_198_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_199_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 199 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS2HR_EERCDDEL_RES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS2HR_EERCDDEL_RES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_199_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_200_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 200 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_HR_EERCDDEL_RES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_HR_EERCDDEL_RES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_200_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_201_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 201 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_TM_STG'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_TM_STG'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_201_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_202_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 202 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_TM_STG" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_TM_STG" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_202_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_203_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 203 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_TM_STG'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_TM_STG'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_203_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_204_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 204 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_TM_STG"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_TM_STG"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_204_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_205_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 205 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_GVT_PAR_REMARKS'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_GVT_PAR_REMARKS'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_205_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_206_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 206 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_GVT_PAR_REMARKS" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_GVT_PAR_REMARKS" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_206_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_207_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 207 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_GVT_PAR_REMARKS" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_GVT_PAR_REMARKS" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_207_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_208_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 208 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_GVT_PAR_REMARKS'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_GVT_PAR_REMARKS'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_208_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_209_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 209 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_GVT_PAR_REMARKS"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_GVT_PAR_REMARKS"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_209_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_210_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 210 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_EMERGENCY_PHONE'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_EMERGENCY_PHONE'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_210_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_211_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 211 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_EMERGENCY_PHONE" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_EMERGENCY_PHONE" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_211_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_212_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 212 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_EMERGENCY_PHONE" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_EMERGENCY_PHONE" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_212_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_213_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 213 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_EMERGENCY_PHONE'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_EMERGENCY_PHONE'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_213_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_214_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 214 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_EMERGENCY_PHONE"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_EMERGENCY_PHONE"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_214_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_215_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 215 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_EMERGENCY_CNTCT'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_EMERGENCY_CNTCT'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_215_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_216_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 216 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_EMERGENCY_CNTCT" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_EMERGENCY_CNTCT" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_216_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_217_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 217 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_EMERGENCY_CNTCT" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_EMERGENCY_CNTCT" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_217_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_218_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 218 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_EMERGENCY_CNTCT'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_EMERGENCY_CNTCT'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_218_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_219_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 219 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_EMERGENCY_CNTCT"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_EMERGENCY_CNTCT"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_219_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_220_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 220 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_RESIDENCE_HOST'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_RESIDENCE_HOST'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_220_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_221_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 221 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_RESIDENCE_HOST" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_RESIDENCE_HOST" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_221_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_222_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 222 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_RESIDENCE_HOST" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_RESIDENCE_HOST" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_222_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_223_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 223 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_RESIDENCE_HOST'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_RESIDENCE_HOST'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_223_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_224_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 224 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_RESIDENCE_HOST"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_RESIDENCE_HOST"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_224_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_225_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 225 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_PERSONAL_PHONE'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_PERSONAL_PHONE'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_225_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_226_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 226 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_PERSONAL_PHONE" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_PERSONAL_PHONE" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_226_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_227_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 227 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_PERSONAL_PHONE" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_PERSONAL_PHONE" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_227_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_228_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 228 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_PERSONAL_PHONE'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_PERSONAL_PHONE'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_228_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_229_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 229 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_PERSONAL_PHONE"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_PERSONAL_PHONE"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_229_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_230_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 230 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_ASGN_PHONE'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_ASGN_PHONE'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_230_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_231_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 231 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_ASGN_PHONE" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_ASGN_PHONE" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_231_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_232_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 232 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_ASGN_PHONE'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_ASGN_PHONE'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_232_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_233_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 233 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_ASGN_PHONE"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_ASGN_PHONE"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_233_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_234_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 234 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_ASGN_EMAIL'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_ASGN_EMAIL'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_234_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_235_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 235 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_ASGN_EMAIL" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_ASGN_EMAIL" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_235_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_236_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 236 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_ASGN_EMAIL'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_ASGN_EMAIL'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_236_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_237_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 237 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_ASGN_EMAIL"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_ASGN_EMAIL"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_237_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_238_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 238 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_EMAIL_ADDRESSES'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_EMAIL_ADDRESSES'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_238_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_239_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 239 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_EMAIL_ADDRESSES" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_EMAIL_ADDRESSES" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_239_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_240_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 240 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_EMAIL_ADDRESSES" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_EMAIL_ADDRESSES" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_240_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_241_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 241 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_EMAIL_ADDRESSES'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_EMAIL_ADDRESSES'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_241_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_242_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 242 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_EMAIL_ADDRESSES"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_EMAIL_ADDRESSES"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_242_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_243_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 243 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_CITZ_OTH_DOC'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_OP_CITZ_OTH_DOC'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_243_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_244_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 244 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_CITZ_OTH_DOC" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_OP_CITZ_OTH_DOC" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_244_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_245_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 245 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_CITZ_OTH_DOC'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_OP_CITZ_OTH_DOC'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_245_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_246_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 246 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_OP_CITZ_OTH_DOC"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_OP_CITZ_OTH_DOC"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_246_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_247_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 247 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_PERS_NID'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_PERS_NID'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_247_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_248_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 248 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_PERS_NID" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_PERS_NID" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_248_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_249_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 249 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_PERS_NID" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_PERS_NID" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_249_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_250_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 250 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_PERS_NID'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_PERS_NID'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_250_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_251_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 251 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PSAPERS_NID"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PSAPERS_NID"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_251_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_252_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 252 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_PERS_NID"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_PERS_NID"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_252_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_253_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 253 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_DEP_BENEF_NID'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR fk_sql IS select refr.owner, refr.table_name, refr.constraint_name 
     from dba_constraints refd, dba_constraints refr 
     where        refd.owner = ''SYSADM'' and 
             refd.table_name = ''PS_DEP_BENEF_NID'' and 
        refr.constraint_type = ''R'' 
        and refr.r_owner = refd.owner and 
      refr.r_constraint_name = refd.constraint_name;
BEGIN 
  FOR fk IN fk_sql 
  LOOP 
    EXECUTE IMMEDIATE ''ALTER TABLE "'' || fk.owner || ''"."'' || 
      fk.table_name || ''" DROP CONSTRAINT "'' || fk.constraint_name || ''"''; 
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_253_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_254_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 254 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_DEP_BENEF_NID" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_DEP_BENEF_NID" FROM "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_254_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_255_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 255 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_DEP_BENEF_NID" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' REVOKE SELECT ON "SYSADM"."PS_DEP_BENEF_NID" FROM "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_255_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_256_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 256 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_DEP_BENEF_NID'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;');
      EXECUTE IMMEDIATE 'DECLARE 
  CURSOR c_sql IS select owner, table_name, constraint_name, 
    constraint_type, generated, index_name from dba_constraints 
  where        owner = ''SYSADM'' and 
          table_name = ''PS_DEP_BENEF_NID'' 
  and (constraint_type NOT IN (''S'',''C'') OR 
                (constraint_type = ''C'' 
                 AND generated != ''GENERATED NAME'' 
                  OR deferrable != ''NOT DEFERRABLE'' 
                  OR validated != ''VALIDATED'' 
                  OR status != ''ENABLED'')); 
BEGIN 
  FOR c IN c_sql 
  LOOP 
      EXECUTE IMMEDIATE ''ALTER TABLE "'' || c.owner || ''"."'' || 
        c.table_name || ''" DROP CONSTRAINT "'' || c.constraint_name || ''"'';
  END LOOP;
END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_256_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_257_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 257 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX "SYSADM"."PS_DEP_BENEF_NID"');
      EXECUTE IMMEDIATE 'DROP INDEX "SYSADM"."PS_DEP_BENEF_NID"';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_257_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_258_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 258 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13049" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13049" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_258_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_259_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 259 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "NATIONAL_ID" from "SYSADM"."PS_DEP_BENEF_NID");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13049
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(20 CHAR)) orig_val, CAST(null AS VARCHAR2(20 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_get_mask_ssn(rid, ''''NATIONAL_ID'''', orig_val)
         AS VARCHAR2(20 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "NATIONAL_ID" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BENEF_NID" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13049"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "NATIONAL_ID" from "SYSADM"."PS_DEP_BENEF_NID");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13049
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(20 CHAR)) orig_val, CAST(null AS VARCHAR2(20 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_get_mask_ssn(rid, ''''NATIONAL_ID'''', orig_val)
         AS VARCHAR2(20 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "NATIONAL_ID" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BENEF_NID" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13049"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_259_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_260_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 260 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13049_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13049_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_260_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_261_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 261 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13049_IDX ON MGMT_DM_TT_13049(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13049_IDX ON MGMT_DM_TT_13049(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_261_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_262_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 262 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_DEP_BENEF_NID$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_DEP_BENEF_NID$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_262_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_263_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 263 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BENEF_NID" RENAME TO "PS_DEP_BENEF_NID$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BENEF_NID" RENAME TO "PS_DEP_BENEF_NID$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_263_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_264_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 264 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_DEP_BENEF_NID$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_DEP_BENEF_NID$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_264_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_265_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 265 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_DEP_BENEF_NID"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."DEPENDENT_BENEF", s."COUNTRY", s."NATIONAL_ID_TYPE", CAST(nvl(c0m13049.NEW_VAL, s."NATIONAL_ID") AS VARCHAR2(20 CHAR)) "NATIONAL_ID", s."SSN_KEY_FRA", s."PRIMARY_NID", s."TAX_REF_ID_SGP" FROM "SYSADM"."PS_DEP_BENEF_NID$DMASK"  s , MGMT_DM_TT_13049 c0m13049 WHERE s."NATIONAL_ID" = c0m13049.ORIG_VAL (+) AND NVL(c0m13049.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_DEP_BENEF_NID"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."DEPENDENT_BENEF", s."COUNTRY", s."NATIONAL_ID_TYPE", CAST(nvl(c0m13049.NEW_VAL, s."NATIONAL_ID") AS VARCHAR2(20 CHAR)) "NATIONAL_ID", s."SSN_KEY_FRA", s."PRIMARY_NID", s."TAX_REF_ID_SGP" FROM "SYSADM"."PS_DEP_BENEF_NID$DMASK"  s , MGMT_DM_TT_13049 c0m13049 WHERE s."NATIONAL_ID" = c0m13049.ORIG_VAL (+) AND NVL(c0m13049.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_265_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_266_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 266 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BENEF_NID" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BENEF_NID" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_266_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_267_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 267 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_DEP_BENEF_NID$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_DEP_BENEF_NID$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_267_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_268_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 268 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13049" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13049" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_268_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_269_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 269 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_DEP_BENEF_NID" ON "SYSADM"."PS_DEP_BENEF_NID" ("EMPLID","DEPENDENT_BENEF","COUNTRY","NATIONAL_ID_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_DEP_BENEF_NID" ON "SYSADM"."PS_DEP_BENEF_NID" ("EMPLID","DEPENDENT_BENEF","COUNTRY","NATIONAL_ID_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_269_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_270_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 270 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_DEP_BENEF_NID" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_DEP_BENEF_NID" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_270_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_271_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 271 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BENEF_NID" MODIFY ("NATIONAL_ID" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BENEF_NID" MODIFY ("NATIONAL_ID" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_271_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_272_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 272 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_DEP_BENEF_NID" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_DEP_BENEF_NID" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_272_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_273_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 273 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_DEP_BENEF_NID" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_DEP_BENEF_NID" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_273_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_274_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 274 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_DEP_BENEF_NID"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_DEP_BENEF_NID"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_274_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_275_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 275 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13050" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13050" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_275_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_276_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 276 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "NATIONAL_ID" from "SYSADM"."PS_PERS_NID");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 6, 0);
    execute immediate ''create table MGMT_DM_TT_13050
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(20 CHAR)) orig_val, CAST(null AS VARCHAR2(20 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_get_mask_ssn(rid, ''''NATIONAL_ID'''', orig_val)
         AS VARCHAR2(20 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "NATIONAL_ID" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERS_NID" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13050"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "NATIONAL_ID" from "SYSADM"."PS_PERS_NID");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 6, 0);
    execute immediate ''create table MGMT_DM_TT_13050
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(20 CHAR)) orig_val, CAST(null AS VARCHAR2(20 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_get_mask_ssn(rid, ''''NATIONAL_ID'''', orig_val)
         AS VARCHAR2(20 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "NATIONAL_ID" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERS_NID" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13050"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_276_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_277_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 277 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13050_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13050_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_277_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_278_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 278 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13050_IDX ON MGMT_DM_TT_13050(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13050_IDX ON MGMT_DM_TT_13050(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_278_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_279_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 279 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_PERS_NID$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_PERS_NID$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_279_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_280_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 280 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERS_NID" RENAME TO "PS_PERS_NID$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERS_NID" RENAME TO "PS_PERS_NID$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_280_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_281_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 281 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_PERS_NID$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_PERS_NID$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_281_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_282_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 282 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_PERS_NID"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."COUNTRY", s."NATIONAL_ID_TYPE", CAST(nvl(c0m13050.NEW_VAL, s."NATIONAL_ID") AS VARCHAR2(20 CHAR)) "NATIONAL_ID", s."SSN_KEY_FRA", s."PRIMARY_NID", s."TAX_REF_ID_SGP", s."LASTUPDDTTM", s."LASTUPDOPRID" FROM "SYSADM"."PS_PERS_NID$DMASK"  s , MGMT_DM_TT_13050 c0m13050 WHERE s."NATIONAL_ID" = c0m13050.ORIG_VAL (+) AND NVL(c0m13050.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_PERS_NID"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."COUNTRY", s."NATIONAL_ID_TYPE", CAST(nvl(c0m13050.NEW_VAL, s."NATIONAL_ID") AS VARCHAR2(20 CHAR)) "NATIONAL_ID", s."SSN_KEY_FRA", s."PRIMARY_NID", s."TAX_REF_ID_SGP", s."LASTUPDDTTM", s."LASTUPDOPRID" FROM "SYSADM"."PS_PERS_NID$DMASK"  s , MGMT_DM_TT_13050 c0m13050 WHERE s."NATIONAL_ID" = c0m13050.ORIG_VAL (+) AND NVL(c0m13050.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_282_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_283_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 283 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERS_NID" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERS_NID" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_283_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_284_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 284 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_PERS_NID$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_PERS_NID$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_284_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_285_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 285 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13050" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13050" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_285_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_286_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 286 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PSAPERS_NID" ON "SYSADM"."PS_PERS_NID" ("NATIONAL_ID","COUNTRY","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PSAPERS_NID" ON "SYSADM"."PS_PERS_NID" ("NATIONAL_ID","COUNTRY","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_286_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_287_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 287 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PSAPERS_NID" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PSAPERS_NID" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_287_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_288_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 288 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_PERS_NID" ON "SYSADM"."PS_PERS_NID" ("EMPLID","COUNTRY","NATIONAL_ID_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_PERS_NID" ON "SYSADM"."PS_PERS_NID" ("EMPLID","COUNTRY","NATIONAL_ID_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_288_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_289_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 289 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_PERS_NID" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_PERS_NID" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_289_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_290_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 290 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERS_NID" MODIFY ("NATIONAL_ID" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERS_NID" MODIFY ("NATIONAL_ID" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_290_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_291_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 291 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_PERS_NID" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_PERS_NID" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_291_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_292_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 292 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_PERS_NID" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_PERS_NID" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_292_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_293_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 293 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_PERS_NID"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_PERS_NID"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_293_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_294_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 294 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13051" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13051" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_294_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_295_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 295 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "DOC_NUM_CHN" from "SYSADM"."PS_OP_CITZ_OTH_DOC");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13051
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_scramble_deterministic(rid, ''''DOC_NUM_CHN'''', orig_val)
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "DOC_NUM_CHN" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_CITZ_OTH_DOC" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13051"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "DOC_NUM_CHN" from "SYSADM"."PS_OP_CITZ_OTH_DOC");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13051
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_scramble_deterministic(rid, ''''DOC_NUM_CHN'''', orig_val)
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "DOC_NUM_CHN" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_CITZ_OTH_DOC" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13051"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_295_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_296_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 296 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13051_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13051_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_296_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_297_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 297 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13051_IDX ON MGMT_DM_TT_13051(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13051_IDX ON MGMT_DM_TT_13051(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_297_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_298_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 298 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_CITZ_OTH_DOC$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_CITZ_OTH_DOC$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_298_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_299_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 299 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_CITZ_OTH_DOC" RENAME TO "PS_OP_CITZ_OTH_DOC$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_CITZ_OTH_DOC" RENAME TO "PS_OP_CITZ_OTH_DOC$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_299_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_300_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 300 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_CITZ_OTH_DOC"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE"
 LOB ("COMMENTS") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_DATA_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."EMPLID", s."DEPENDENT_ID", s."OP_OTH_DOC_NAME", CAST(nvl(c0m13051.NEW_VAL, s."DOC_NUM_CHN") AS VARCHAR2(30 CHAR)) "DOC_NUM_CHN", s."OP_OTH_DOC_TYPE", s."DT_ISSUED", s."EXPIRATN_DT", s."ISSUING_AUTHORITY", s."COMMENTS" FROM "SYSADM"."PS_OP_CITZ_OTH_DOC$DMASK"  s , MGMT_DM_TT_13051 c0m13051 WHERE s."DOC_NUM_CHN" = c0m13051.ORIG_VAL (+) AND NVL(c0m13051.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_CITZ_OTH_DOC"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE"
 LOB ("COMMENTS") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_DATA_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."EMPLID", s."DEPENDENT_ID", s."OP_OTH_DOC_NAME", CAST(nvl(c0m13051.NEW_VAL, s."DOC_NUM_CHN") AS VARCHAR2(30 CHAR)) "DOC_NUM_CHN", s."OP_OTH_DOC_TYPE", s."DT_ISSUED", s."EXPIRATN_DT", s."ISSUING_AUTHORITY", s."COMMENTS" FROM "SYSADM"."PS_OP_CITZ_OTH_DOC$DMASK"  s , MGMT_DM_TT_13051 c0m13051 WHERE s."DOC_NUM_CHN" = c0m13051.ORIG_VAL (+) AND NVL(c0m13051.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_300_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_301_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 301 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_CITZ_OTH_DOC" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_CITZ_OTH_DOC" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_301_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_302_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 302 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_CITZ_OTH_DOC$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_CITZ_OTH_DOC$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_302_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_303_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 303 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13051" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13051" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_303_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_304_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 304 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_CITZ_OTH_DOC" ON "SYSADM"."PS_OP_CITZ_OTH_DOC" ("EMPLID","DEPENDENT_ID","OP_OTH_DOC_NAME","DOC_NUM_CHN")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_CITZ_OTH_DOC" ON "SYSADM"."PS_OP_CITZ_OTH_DOC" ("EMPLID","DEPENDENT_ID","OP_OTH_DOC_NAME","DOC_NUM_CHN")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_304_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_305_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 305 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_CITZ_OTH_DOC" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_CITZ_OTH_DOC" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_305_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_306_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 306 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_CITZ_OTH_DOC" MODIFY ("DOC_NUM_CHN" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_CITZ_OTH_DOC" MODIFY ("DOC_NUM_CHN" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_306_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_307_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 307 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_CITZ_OTH_DOC" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_CITZ_OTH_DOC" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_307_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_308_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 308 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_CITZ_OTH_DOC"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_CITZ_OTH_DOC"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_308_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_309_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 309 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13052" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13052" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_309_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_310_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 310 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "EMAIL_ADDR" from "SYSADM"."PS_EMAIL_ADDRESSES");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13052
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_email(rid, ''''EMAIL_ADDR'''', orig_val)
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "EMAIL_ADDR" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMAIL_ADDRESSES" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13052"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "EMAIL_ADDR" from "SYSADM"."PS_EMAIL_ADDRESSES");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13052
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_email(rid, ''''EMAIL_ADDR'''', orig_val)
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "EMAIL_ADDR" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMAIL_ADDRESSES" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13052"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_310_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_311_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 311 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13052_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13052_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_311_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_312_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 312 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13052_IDX ON MGMT_DM_TT_13052(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13052_IDX ON MGMT_DM_TT_13052(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_312_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_313_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 313 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_EMAIL_ADDRESSES$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_EMAIL_ADDRESSES$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_313_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_314_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 314 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMAIL_ADDRESSES" RENAME TO "PS_EMAIL_ADDRESSES$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMAIL_ADDRESSES" RENAME TO "PS_EMAIL_ADDRESSES$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_314_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_315_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 315 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_EMAIL_ADDRESSES$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_EMAIL_ADDRESSES$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_315_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_316_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 316 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_EMAIL_ADDRESSES"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."E_ADDR_TYPE", CAST(nvl(c0m13052.NEW_VAL, s."EMAIL_ADDR") AS VARCHAR2(70 CHAR)) "EMAIL_ADDR", s."PREF_EMAIL_FLAG" FROM "SYSADM"."PS_EMAIL_ADDRESSES$DMASK"  s , MGMT_DM_TT_13052 c0m13052 WHERE s."EMAIL_ADDR" = c0m13052.ORIG_VAL (+) AND NVL(c0m13052.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_EMAIL_ADDRESSES"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."E_ADDR_TYPE", CAST(nvl(c0m13052.NEW_VAL, s."EMAIL_ADDR") AS VARCHAR2(70 CHAR)) "EMAIL_ADDR", s."PREF_EMAIL_FLAG" FROM "SYSADM"."PS_EMAIL_ADDRESSES$DMASK"  s , MGMT_DM_TT_13052 c0m13052 WHERE s."EMAIL_ADDR" = c0m13052.ORIG_VAL (+) AND NVL(c0m13052.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_316_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_317_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 317 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMAIL_ADDRESSES" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMAIL_ADDRESSES" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_317_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_318_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 318 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_EMAIL_ADDRESSES$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_EMAIL_ADDRESSES$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_318_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_319_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 319 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13052" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13052" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_319_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_320_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 320 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_EMAIL_ADDRESSES" ON "SYSADM"."PS_EMAIL_ADDRESSES" ("EMPLID","E_ADDR_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_EMAIL_ADDRESSES" ON "SYSADM"."PS_EMAIL_ADDRESSES" ("EMPLID","E_ADDR_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_320_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_321_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 321 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_EMAIL_ADDRESSES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_EMAIL_ADDRESSES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_321_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_322_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 322 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMAIL_ADDRESSES" MODIFY ("EMAIL_ADDR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMAIL_ADDRESSES" MODIFY ("EMAIL_ADDR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_322_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_323_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 323 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_EMAIL_ADDRESSES" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_EMAIL_ADDRESSES" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_323_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_324_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 324 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_EMAIL_ADDRESSES" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_EMAIL_ADDRESSES" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_324_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_325_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 325 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_EMAIL_ADDRESSES"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_EMAIL_ADDRESSES"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_325_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_326_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 326 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13053" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13053" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_326_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_327_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 327 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "EMAIL_ADDR" from "SYSADM"."PS_OP_ASGN_EMAIL");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    execute immediate ''create table MGMT_DM_TT_13053
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_email(rid, ''''EMAIL_ADDR'''', orig_val)
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "EMAIL_ADDR" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_ASGN_EMAIL" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13053"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "EMAIL_ADDR" from "SYSADM"."PS_OP_ASGN_EMAIL");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    execute immediate ''create table MGMT_DM_TT_13053
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_email(rid, ''''EMAIL_ADDR'''', orig_val)
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "EMAIL_ADDR" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_ASGN_EMAIL" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13053"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_327_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_328_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 328 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13053_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13053_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_328_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_329_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 329 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13053_IDX ON MGMT_DM_TT_13053(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13053_IDX ON MGMT_DM_TT_13053(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_329_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_330_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 330 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_ASGN_EMAIL$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_ASGN_EMAIL$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_330_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_331_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 331 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_ASGN_EMAIL" RENAME TO "PS_OP_ASGN_EMAIL$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_ASGN_EMAIL" RENAME TO "PS_OP_ASGN_EMAIL$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_331_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_332_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 332 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_ASGN_EMAIL$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_ASGN_EMAIL$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_332_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_333_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 333 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_ASGN_EMAIL"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."BEGIN_DT", s."OP_E_ADDR_TYPE", CAST(nvl(c0m13053.NEW_VAL, s."EMAIL_ADDR") AS VARCHAR2(70 CHAR)) "EMAIL_ADDR", s."PREF_EMAIL_FLAG" FROM "SYSADM"."PS_OP_ASGN_EMAIL$DMASK"  s , MGMT_DM_TT_13053 c0m13053 WHERE s."EMAIL_ADDR" = c0m13053.ORIG_VAL (+) AND NVL(c0m13053.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_ASGN_EMAIL"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."BEGIN_DT", s."OP_E_ADDR_TYPE", CAST(nvl(c0m13053.NEW_VAL, s."EMAIL_ADDR") AS VARCHAR2(70 CHAR)) "EMAIL_ADDR", s."PREF_EMAIL_FLAG" FROM "SYSADM"."PS_OP_ASGN_EMAIL$DMASK"  s , MGMT_DM_TT_13053 c0m13053 WHERE s."EMAIL_ADDR" = c0m13053.ORIG_VAL (+) AND NVL(c0m13053.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_333_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_334_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 334 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_ASGN_EMAIL" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_ASGN_EMAIL" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_334_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_335_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 335 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_ASGN_EMAIL$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_ASGN_EMAIL$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_335_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_336_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 336 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13053" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13053" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_336_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_337_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 337 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_ASGN_EMAIL" ON "SYSADM"."PS_OP_ASGN_EMAIL" ("EMPLID","BEGIN_DT","OP_E_ADDR_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_ASGN_EMAIL" ON "SYSADM"."PS_OP_ASGN_EMAIL" ("EMPLID","BEGIN_DT","OP_E_ADDR_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_337_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_338_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 338 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_ASGN_EMAIL" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_ASGN_EMAIL" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_338_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_339_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 339 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_ASGN_EMAIL" MODIFY ("EMAIL_ADDR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_ASGN_EMAIL" MODIFY ("EMAIL_ADDR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_339_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_340_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 340 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_ASGN_EMAIL" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_ASGN_EMAIL" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_340_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_341_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 341 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_ASGN_EMAIL"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_ASGN_EMAIL"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_341_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_342_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 342 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13054" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13054" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_342_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_343_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 343 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "PHONE" from "SYSADM"."PS_OP_ASGN_PHONE");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    execute immediate ''create table MGMT_DM_TT_13054
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(24 CHAR)) orig_val, CAST(null AS VARCHAR2(24 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_phone(rid, ''''PHONE'''', orig_val)
         AS VARCHAR2(24 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "PHONE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_ASGN_PHONE" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13054"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "PHONE" from "SYSADM"."PS_OP_ASGN_PHONE");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    execute immediate ''create table MGMT_DM_TT_13054
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(24 CHAR)) orig_val, CAST(null AS VARCHAR2(24 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_phone(rid, ''''PHONE'''', orig_val)
         AS VARCHAR2(24 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "PHONE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_ASGN_PHONE" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13054"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_343_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_344_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 344 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13054_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13054_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_344_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_345_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 345 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13054_IDX ON MGMT_DM_TT_13054(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13054_IDX ON MGMT_DM_TT_13054(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_345_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_346_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 346 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_ASGN_PHONE$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_ASGN_PHONE$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_346_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_347_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 347 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_ASGN_PHONE" RENAME TO "PS_OP_ASGN_PHONE$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_ASGN_PHONE" RENAME TO "PS_OP_ASGN_PHONE$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_347_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_348_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 348 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_ASGN_PHONE$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_ASGN_PHONE$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_348_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_349_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 349 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_ASGN_PHONE"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."BEGIN_DT", s."OP_PHONE_TYPE", s."COUNTRY_CODE", CAST(nvl(c0m13054.NEW_VAL, s."PHONE") AS VARCHAR2(24 CHAR)) "PHONE", s."EXTENSION", s."PREF_PHONE_FLAG" FROM "SYSADM"."PS_OP_ASGN_PHONE$DMASK"  s , MGMT_DM_TT_13054 c0m13054 WHERE s."PHONE" = c0m13054.ORIG_VAL (+) AND NVL(c0m13054.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_ASGN_PHONE"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."BEGIN_DT", s."OP_PHONE_TYPE", s."COUNTRY_CODE", CAST(nvl(c0m13054.NEW_VAL, s."PHONE") AS VARCHAR2(24 CHAR)) "PHONE", s."EXTENSION", s."PREF_PHONE_FLAG" FROM "SYSADM"."PS_OP_ASGN_PHONE$DMASK"  s , MGMT_DM_TT_13054 c0m13054 WHERE s."PHONE" = c0m13054.ORIG_VAL (+) AND NVL(c0m13054.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_349_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_350_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 350 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_ASGN_PHONE" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_ASGN_PHONE" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_350_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_351_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 351 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_ASGN_PHONE$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_ASGN_PHONE$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_351_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_352_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 352 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13054" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13054" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_352_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_353_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 353 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_ASGN_PHONE" ON "SYSADM"."PS_OP_ASGN_PHONE" ("EMPLID","BEGIN_DT","OP_PHONE_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_ASGN_PHONE" ON "SYSADM"."PS_OP_ASGN_PHONE" ("EMPLID","BEGIN_DT","OP_PHONE_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_353_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_354_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 354 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_ASGN_PHONE" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_ASGN_PHONE" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_354_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_355_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 355 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_ASGN_PHONE" MODIFY ("PHONE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_ASGN_PHONE" MODIFY ("PHONE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_355_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_356_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 356 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_ASGN_PHONE" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_ASGN_PHONE" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_356_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_357_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 357 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_ASGN_PHONE"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_ASGN_PHONE"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_357_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_358_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 358 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13055" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13055" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_358_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_359_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 359 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "PHONE" from "SYSADM"."PS_PERSONAL_PHONE");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13055
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(24 CHAR)) orig_val, CAST(null AS VARCHAR2(24 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_phone(rid, ''''PHONE'''', orig_val)
         AS VARCHAR2(24 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "PHONE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_PHONE" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13055"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "PHONE" from "SYSADM"."PS_PERSONAL_PHONE");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13055
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(24 CHAR)) orig_val, CAST(null AS VARCHAR2(24 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_phone(rid, ''''PHONE'''', orig_val)
         AS VARCHAR2(24 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "PHONE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_PHONE" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13055"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_359_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_360_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 360 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13055_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13055_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_360_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_361_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 361 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13055_IDX ON MGMT_DM_TT_13055(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13055_IDX ON MGMT_DM_TT_13055(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_361_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_362_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 362 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_PERSONAL_PHONE$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_PERSONAL_PHONE$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_362_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_363_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 363 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_PHONE" RENAME TO "PS_PERSONAL_PHONE$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_PHONE" RENAME TO "PS_PERSONAL_PHONE$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_363_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_364_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 364 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_PERSONAL_PHONE$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_PERSONAL_PHONE$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_364_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_365_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 365 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_PERSONAL_PHONE"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."PHONE_TYPE", s."COUNTRY_CODE", CAST(nvl(c0m13055.NEW_VAL, s."PHONE") AS VARCHAR2(24 CHAR)) "PHONE", s."EXTENSION", s."PREF_PHONE_FLAG" FROM "SYSADM"."PS_PERSONAL_PHONE$DMASK"  s , MGMT_DM_TT_13055 c0m13055 WHERE s."PHONE" = c0m13055.ORIG_VAL (+) AND NVL(c0m13055.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_PERSONAL_PHONE"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."PHONE_TYPE", s."COUNTRY_CODE", CAST(nvl(c0m13055.NEW_VAL, s."PHONE") AS VARCHAR2(24 CHAR)) "PHONE", s."EXTENSION", s."PREF_PHONE_FLAG" FROM "SYSADM"."PS_PERSONAL_PHONE$DMASK"  s , MGMT_DM_TT_13055 c0m13055 WHERE s."PHONE" = c0m13055.ORIG_VAL (+) AND NVL(c0m13055.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_365_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_366_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 366 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_PHONE" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_PHONE" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_366_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_367_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 367 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_PERSONAL_PHONE$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_PERSONAL_PHONE$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_367_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_368_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 368 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13055" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13055" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_368_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_369_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 369 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_PERSONAL_PHONE" ON "SYSADM"."PS_PERSONAL_PHONE" ("EMPLID","PHONE_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_PERSONAL_PHONE" ON "SYSADM"."PS_PERSONAL_PHONE" ("EMPLID","PHONE_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_369_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_370_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 370 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_PERSONAL_PHONE" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_PERSONAL_PHONE" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_370_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_371_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 371 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_PHONE" MODIFY ("PHONE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_PHONE" MODIFY ("PHONE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_371_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_372_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 372 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_PERSONAL_PHONE" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_PERSONAL_PHONE" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_372_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_373_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 373 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_PERSONAL_PHONE" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_PERSONAL_PHONE" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_373_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_374_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 374 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_PERSONAL_PHONE"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_PERSONAL_PHONE"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_374_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_375_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 375 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13056" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13056" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_375_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_376_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 376 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS4" from "SYSADM"."PS_RESIDENCE_HOST");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    execute immediate ''create table MGMT_DM_TT_13056
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS4'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS4" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_RESIDENCE_HOST" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13056"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS4" from "SYSADM"."PS_RESIDENCE_HOST");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    execute immediate ''create table MGMT_DM_TT_13056
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS4'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS4" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_RESIDENCE_HOST" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13056"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_376_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_377_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 377 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13056_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13056_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_377_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_378_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 378 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13056_IDX ON MGMT_DM_TT_13056(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13056_IDX ON MGMT_DM_TT_13056(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_378_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_379_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 379 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13057" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13057" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_379_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_380_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 380 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS3" from "SYSADM"."PS_RESIDENCE_HOST");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    execute immediate ''create table MGMT_DM_TT_13057
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS3'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS3" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_RESIDENCE_HOST" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13057"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS3" from "SYSADM"."PS_RESIDENCE_HOST");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    execute immediate ''create table MGMT_DM_TT_13057
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS3'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS3" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_RESIDENCE_HOST" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13057"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_380_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_381_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 381 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13057_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13057_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_381_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_382_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 382 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13057_IDX ON MGMT_DM_TT_13057(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13057_IDX ON MGMT_DM_TT_13057(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_382_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_383_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 383 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13059" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13059" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_383_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_384_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 384 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS2" from "SYSADM"."PS_RESIDENCE_HOST");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    execute immediate ''create table MGMT_DM_TT_13059
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS2'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS2" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_RESIDENCE_HOST" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13059"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS2" from "SYSADM"."PS_RESIDENCE_HOST");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    execute immediate ''create table MGMT_DM_TT_13059
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS2'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS2" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_RESIDENCE_HOST" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13059"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_384_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_385_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 385 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13059_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13059_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_385_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_386_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 386 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13059_IDX ON MGMT_DM_TT_13059(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13059_IDX ON MGMT_DM_TT_13059(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_386_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_387_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 387 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13060" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13060" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_387_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_388_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 388 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS1" from "SYSADM"."PS_RESIDENCE_HOST");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    execute immediate ''create table MGMT_DM_TT_13060
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS1'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS1" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_RESIDENCE_HOST" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13060"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS1" from "SYSADM"."PS_RESIDENCE_HOST");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    execute immediate ''create table MGMT_DM_TT_13060
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS1'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS1" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_RESIDENCE_HOST" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13060"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_388_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_389_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 389 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13060_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13060_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_389_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_390_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 390 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13060_IDX ON MGMT_DM_TT_13060(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13060_IDX ON MGMT_DM_TT_13060(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_390_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_391_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 391 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_RESIDENCE_HOST$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_RESIDENCE_HOST$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_391_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_392_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 392 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" RENAME TO "PS_RESIDENCE_HOST$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" RENAME TO "PS_RESIDENCE_HOST$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_392_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_393_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 393 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_393_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_394_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 394 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_RESIDENCE_HOST"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."BEGIN_DT", s."RESIDENCE_NBR", CAST(DECODE(TRIM(s."DESCR"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(30 CHAR)) "DESCR", CAST(DECODE(TRIM(s."COUNTRY"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "COUNTRY", CAST(nvl(c4m13060.NEW_VAL, s."ADDRESS1") AS VARCHAR2(55 CHAR)) "ADDRESS1", CAST(nvl(c3m13059.NEW_VAL, s."ADDRESS2") AS VARCHAR2(55 CHAR)) "ADDRESS2", CAST(nvl(c1m13057.NEW_VAL, s."ADDRESS3") AS VARCHAR2(55 CHAR)) "ADDRESS3", CAST(nvl(c0m13056.NEW_VAL, s."ADDRESS4") AS VARCHAR2(55 CHAR)) "ADDRESS4", CAST(DECODE(TRIM(s."CITY"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "CITY", s."NUM1", s."NUM2", s."HOUSE_TYPE", s."ADDR_FIELD1", s."ADDR_FIELD2", s."ADDR_FIELD3", s."COUNTY", CAST(DECODE(TRIM(s."STATE"), NULL, '' '', ''DC'') as VARCHAR2(6 CHAR)) "STATE", s."POSTAL", s."GEO_CODE", s."IN_CITY_LIMIT" FROM "SYSADM"."PS_RESIDENCE_HOST$DMASK"  s , MGMT_DM_TT_13056 c0m13056, MGMT_DM_TT_13057 c1m13057, MGMT_DM_TT_13059 c3m13059, MGMT_DM_TT_13060 c4m13060 WHERE s."ADDRESS4" = c0m13056.ORIG_VAL (+) AND NVL(c0m13056.delete_val,0) = 0 AND s."ADDRESS3" = c1m13057.ORIG_VAL (+) AND NVL(c1m13057.delete_val,0) = 0 AND s."ADDRESS2" = c3m13059.ORIG_VAL (+) AND NVL(c3m13059.delete_val,0) = 0 AND s."ADDRESS1" = c4m13060.ORIG_VAL (+) AND NVL(c4m13060.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_RESIDENCE_HOST"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."BEGIN_DT", s."RESIDENCE_NBR", CAST(DECODE(TRIM(s."DESCR"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(30 CHAR)) "DESCR", CAST(DECODE(TRIM(s."COUNTRY"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "COUNTRY", CAST(nvl(c4m13060.NEW_VAL, s."ADDRESS1") AS VARCHAR2(55 CHAR)) "ADDRESS1", CAST(nvl(c3m13059.NEW_VAL, s."ADDRESS2") AS VARCHAR2(55 CHAR)) "ADDRESS2", CAST(nvl(c1m13057.NEW_VAL, s."ADDRESS3") AS VARCHAR2(55 CHAR)) "ADDRESS3", CAST(nvl(c0m13056.NEW_VAL, s."ADDRESS4") AS VARCHAR2(55 CHAR)) "ADDRESS4", CAST(DECODE(TRIM(s."CITY"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "CITY", s."NUM1", s."NUM2", s."HOUSE_TYPE", s."ADDR_FIELD1", s."ADDR_FIELD2", s."ADDR_FIELD3", s."COUNTY", CAST(DECODE(TRIM(s."STATE"), NULL, '' '', ''DC'') as VARCHAR2(6 CHAR)) "STATE", s."POSTAL", s."GEO_CODE", s."IN_CITY_LIMIT" FROM "SYSADM"."PS_RESIDENCE_HOST$DMASK"  s , MGMT_DM_TT_13056 c0m13056, MGMT_DM_TT_13057 c1m13057, MGMT_DM_TT_13059 c3m13059, MGMT_DM_TT_13060 c4m13060 WHERE s."ADDRESS4" = c0m13056.ORIG_VAL (+) AND NVL(c0m13056.delete_val,0) = 0 AND s."ADDRESS3" = c1m13057.ORIG_VAL (+) AND NVL(c1m13057.delete_val,0) = 0 AND s."ADDRESS2" = c3m13059.ORIG_VAL (+) AND NVL(c3m13059.delete_val,0) = 0 AND s."ADDRESS1" = c4m13060.ORIG_VAL (+) AND NVL(c4m13060.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_394_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_395_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 395 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_395_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_396_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 396 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_RESIDENCE_HOST$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_RESIDENCE_HOST$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_396_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_397_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 397 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13056" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13056" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_397_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_398_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 398 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13057" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13057" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_398_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_399_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 399 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13059" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13059" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_399_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_400_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 400 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13060" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13060" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_400_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_401_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 401 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_RESIDENCE_HOST" ON "SYSADM"."PS_RESIDENCE_HOST" ("EMPLID","BEGIN_DT","RESIDENCE_NBR")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_RESIDENCE_HOST" ON "SYSADM"."PS_RESIDENCE_HOST" ("EMPLID","BEGIN_DT","RESIDENCE_NBR")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_401_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_402_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 402 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_RESIDENCE_HOST" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_RESIDENCE_HOST" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_402_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_403_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 403 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" MODIFY ("DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" MODIFY ("DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_403_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_404_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 404 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" MODIFY ("COUNTRY" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" MODIFY ("COUNTRY" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_404_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_405_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 405 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" MODIFY ("ADDRESS1" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" MODIFY ("ADDRESS1" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_405_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_406_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 406 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" MODIFY ("ADDRESS2" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" MODIFY ("ADDRESS2" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_406_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_407_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 407 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" MODIFY ("ADDRESS3" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" MODIFY ("ADDRESS3" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_407_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_408_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 408 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" MODIFY ("ADDRESS4" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" MODIFY ("ADDRESS4" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_408_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_409_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 409 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" MODIFY ("CITY" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" MODIFY ("CITY" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_409_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_410_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 410 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" MODIFY ("STATE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_RESIDENCE_HOST" MODIFY ("STATE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_410_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_411_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 411 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_RESIDENCE_HOST" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_RESIDENCE_HOST" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_411_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_412_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 412 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_RESIDENCE_HOST" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_RESIDENCE_HOST" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_412_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_413_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 413 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_RESIDENCE_HOST"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_RESIDENCE_HOST"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_413_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_414_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 414 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13064" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13064" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_414_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_415_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 415 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "PHONE" from "SYSADM"."PS_EMERGENCY_CNTCT");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13064
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(24 CHAR)) orig_val, CAST(null AS VARCHAR2(24 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_phone(rid, ''''PHONE'''', orig_val)
         AS VARCHAR2(24 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "PHONE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMERGENCY_CNTCT" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13064"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "PHONE" from "SYSADM"."PS_EMERGENCY_CNTCT");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13064
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(24 CHAR)) orig_val, CAST(null AS VARCHAR2(24 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_phone(rid, ''''PHONE'''', orig_val)
         AS VARCHAR2(24 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "PHONE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMERGENCY_CNTCT" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13064"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_415_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_416_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 416 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13064_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13064_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_416_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_417_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 417 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13064_IDX ON MGMT_DM_TT_13064(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13064_IDX ON MGMT_DM_TT_13064(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_417_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_418_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 418 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13065" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13065" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_418_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_419_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 419 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS4" from "SYSADM"."PS_EMERGENCY_CNTCT");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    execute immediate ''create table MGMT_DM_TT_13065
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS4'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS4" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMERGENCY_CNTCT" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13065"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS4" from "SYSADM"."PS_EMERGENCY_CNTCT");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    execute immediate ''create table MGMT_DM_TT_13065
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS4'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS4" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMERGENCY_CNTCT" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13065"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_419_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_420_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 420 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13065_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13065_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_420_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_421_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 421 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13065_IDX ON MGMT_DM_TT_13065(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13065_IDX ON MGMT_DM_TT_13065(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_421_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_422_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 422 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13066" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13066" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_422_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_423_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 423 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS3" from "SYSADM"."PS_EMERGENCY_CNTCT");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    execute immediate ''create table MGMT_DM_TT_13066
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS3'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS3" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMERGENCY_CNTCT" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13066"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS3" from "SYSADM"."PS_EMERGENCY_CNTCT");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    execute immediate ''create table MGMT_DM_TT_13066
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS3'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS3" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMERGENCY_CNTCT" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13066"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_423_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_424_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 424 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13066_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13066_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_424_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_425_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 425 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13066_IDX ON MGMT_DM_TT_13066(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13066_IDX ON MGMT_DM_TT_13066(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_425_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_426_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 426 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13067" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13067" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_426_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_427_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 427 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS2" from "SYSADM"."PS_EMERGENCY_CNTCT");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    execute immediate ''create table MGMT_DM_TT_13067
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS2'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS2" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMERGENCY_CNTCT" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13067"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS2" from "SYSADM"."PS_EMERGENCY_CNTCT");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    execute immediate ''create table MGMT_DM_TT_13067
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS2'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS2" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMERGENCY_CNTCT" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13067"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_427_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_428_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 428 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13067_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13067_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_428_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_429_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 429 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13067_IDX ON MGMT_DM_TT_13067(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13067_IDX ON MGMT_DM_TT_13067(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_429_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_430_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 430 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13069" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13069" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_430_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_431_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 431 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS1" from "SYSADM"."PS_EMERGENCY_CNTCT");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13069
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS1'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS1" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMERGENCY_CNTCT" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13069"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS1" from "SYSADM"."PS_EMERGENCY_CNTCT");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13069
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS1'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS1" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMERGENCY_CNTCT" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13069"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_431_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_432_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 432 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13069_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13069_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_432_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_433_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 433 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13069_IDX ON MGMT_DM_TT_13069(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13069_IDX ON MGMT_DM_TT_13069(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_433_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_434_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 434 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13070" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13070" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_434_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_435_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 435 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "CONTACT_NAME" from "SYSADM"."PS_EMERGENCY_CNTCT");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    select count(*) into cnt0 from (select distinct "EFN_NAME" from "MASK"."EXTERNAL_FULL_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13070
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(50 CHAR)) orig_val, CAST(null AS VARCHAR2(50 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(50 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "CONTACT_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMERGENCY_CNTCT" ) group by orig_val) s
    ,(select rownum rn, "EFN_NAME" new_val from (select distinct "EFN_NAME" from "MASK"."EXTERNAL_FULL_NAME" order by "EFN_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13070"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "CONTACT_NAME" from "SYSADM"."PS_EMERGENCY_CNTCT");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    select count(*) into cnt0 from (select distinct "EFN_NAME" from "MASK"."EXTERNAL_FULL_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13070
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(50 CHAR)) orig_val, CAST(null AS VARCHAR2(50 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(50 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "CONTACT_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMERGENCY_CNTCT" ) group by orig_val) s
    ,(select rownum rn, "EFN_NAME" new_val from (select distinct "EFN_NAME" from "MASK"."EXTERNAL_FULL_NAME" order by "EFN_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13070"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_435_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_436_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 436 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13070_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13070_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_436_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_437_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 437 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13070_IDX ON MGMT_DM_TT_13070(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13070_IDX ON MGMT_DM_TT_13070(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_437_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_438_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 438 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_EMERGENCY_CNTCT$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_EMERGENCY_CNTCT$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_438_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_439_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 439 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" RENAME TO "PS_EMERGENCY_CNTCT$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" RENAME TO "PS_EMERGENCY_CNTCT$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_439_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_440_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 440 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_440_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_441_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 441 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_EMERGENCY_CNTCT"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", CAST(nvl(c6m13070.NEW_VAL, s."CONTACT_NAME") AS VARCHAR2(50 CHAR)) "CONTACT_NAME", s."SAME_ADDRESS_EMPL", s."PRIMARY_CONTACT", s."COUNTRY", CAST(nvl(c5m13069.NEW_VAL, s."ADDRESS1") AS VARCHAR2(55 CHAR)) "ADDRESS1", CAST(nvl(c3m13067.NEW_VAL, s."ADDRESS2") AS VARCHAR2(55 CHAR)) "ADDRESS2", CAST(nvl(c2m13066.NEW_VAL, s."ADDRESS3") AS VARCHAR2(55 CHAR)) "ADDRESS3", CAST(nvl(c1m13065.NEW_VAL, s."ADDRESS4") AS VARCHAR2(55 CHAR)) "ADDRESS4", CAST(DECODE(TRIM(s."CITY"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "CITY", s."NUM1", s."NUM2", s."HOUSE_TYPE", s."ADDR_FIELD1", s."ADDR_FIELD2", s."ADDR_FIELD3", s."COUNTY", CAST(DECODE(TRIM(s."STATE"), NULL, '' '', ''DC'') as VARCHAR2(6 CHAR)) "STATE", s."POSTAL", s."GEO_CODE", s."IN_CITY_LIMIT", s."COUNTRY_CODE", CAST(nvl(c0m13064.NEW_VAL, s."PHONE") AS VARCHAR2(24 CHAR)) "PHONE", s."RELATIONSHIP", s."SAME_PHONE_EMPL", s."ADDRESS_TYPE", s."PHONE_TYPE", s."EXTENSION" FROM "SYSADM"."PS_EMERGENCY_CNTCT$DMASK"  s , MGMT_DM_TT_13064 c0m13064, MGMT_DM_TT_13065 c1m13065, MGMT_DM_TT_13066 c2m13066, MGMT_DM_TT_13067 c3m13067, MGMT_DM_TT_13069 c5m13069, MGMT_DM_TT_13070 c6m13070 WHERE s."PHONE" = c0m13064.ORIG_VAL (+) AND NVL(c0m13064.delete_val,0) = 0 AND s."ADDRESS4" = c1m13065.ORIG_VAL (+) AND NVL(c1m13065.delete_val,0) = 0 AND s."ADDRESS3" = c2m13066.ORIG_VAL (+) AND NVL(c2m13066.delete_val,0) = 0 AND s."ADDRESS2" = c3m13067.ORIG_VAL (+) AND NVL(c3m13067.delete_val,0) = 0 AND s."ADDRESS1" = c5m13069.ORIG_VAL (+) AND NVL(c5m13069.delete_val,0) = 0 AND s."CONTACT_NAME" = c6m13070.ORIG_VAL (+) AND NVL(c6m13070.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_EMERGENCY_CNTCT"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", CAST(nvl(c6m13070.NEW_VAL, s."CONTACT_NAME") AS VARCHAR2(50 CHAR)) "CONTACT_NAME", s."SAME_ADDRESS_EMPL", s."PRIMARY_CONTACT", s."COUNTRY", CAST(nvl(c5m13069.NEW_VAL, s."ADDRESS1") AS VARCHAR2(55 CHAR)) "ADDRESS1", CAST(nvl(c3m13067.NEW_VAL, s."ADDRESS2") AS VARCHAR2(55 CHAR)) "ADDRESS2", CAST(nvl(c2m13066.NEW_VAL, s."ADDRESS3") AS VARCHAR2(55 CHAR)) "ADDRESS3", CAST(nvl(c1m13065.NEW_VAL, s."ADDRESS4") AS VARCHAR2(55 CHAR)) "ADDRESS4", CAST(DECODE(TRIM(s."CITY"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "CITY", s."NUM1", s."NUM2", s."HOUSE_TYPE", s."ADDR_FIELD1", s."ADDR_FIELD2", s."ADDR_FIELD3", s."COUNTY", CAST(DECODE(TRIM(s."STATE"), NULL, '' '', ''DC'') as VARCHAR2(6 CHAR)) "STATE", s."POSTAL", s."GEO_CODE", s."IN_CITY_LIMIT", s."COUNTRY_CODE", CAST(nvl(c0m13064.NEW_VAL, s."PHONE") AS VARCHAR2(24 CHAR)) "PHONE", s."RELATIONSHIP", s."SAME_PHONE_EMPL", s."ADDRESS_TYPE", s."PHONE_TYPE", s."EXTENSION" FROM "SYSADM"."PS_EMERGENCY_CNTCT$DMASK"  s , MGMT_DM_TT_13064 c0m13064, MGMT_DM_TT_13065 c1m13065, MGMT_DM_TT_13066 c2m13066, MGMT_DM_TT_13067 c3m13067, MGMT_DM_TT_13069 c5m13069, MGMT_DM_TT_13070 c6m13070 WHERE s."PHONE" = c0m13064.ORIG_VAL (+) AND NVL(c0m13064.delete_val,0) = 0 AND s."ADDRESS4" = c1m13065.ORIG_VAL (+) AND NVL(c1m13065.delete_val,0) = 0 AND s."ADDRESS3" = c2m13066.ORIG_VAL (+) AND NVL(c2m13066.delete_val,0) = 0 AND s."ADDRESS2" = c3m13067.ORIG_VAL (+) AND NVL(c3m13067.delete_val,0) = 0 AND s."ADDRESS1" = c5m13069.ORIG_VAL (+) AND NVL(c5m13069.delete_val,0) = 0 AND s."CONTACT_NAME" = c6m13070.ORIG_VAL (+) AND NVL(c6m13070.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_441_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_442_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 442 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_442_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_443_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 443 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_EMERGENCY_CNTCT$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_EMERGENCY_CNTCT$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_443_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_444_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 444 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13064" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13064" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_444_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_445_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 445 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13065" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13065" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_445_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_446_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 446 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13066" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13066" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_446_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_447_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 447 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13067" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13067" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_447_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_448_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 448 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13069" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13069" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_448_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_449_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 449 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13070" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13070" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_449_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_450_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 450 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_EMERGENCY_CNTCT" ON "SYSADM"."PS_EMERGENCY_CNTCT" ("EMPLID","CONTACT_NAME")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_EMERGENCY_CNTCT" ON "SYSADM"."PS_EMERGENCY_CNTCT" ("EMPLID","CONTACT_NAME")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_450_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_451_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 451 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_EMERGENCY_CNTCT" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_EMERGENCY_CNTCT" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_451_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_452_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 452 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" MODIFY ("CONTACT_NAME" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" MODIFY ("CONTACT_NAME" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_452_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_453_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 453 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" MODIFY ("ADDRESS1" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" MODIFY ("ADDRESS1" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_453_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_454_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 454 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" MODIFY ("ADDRESS2" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" MODIFY ("ADDRESS2" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_454_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_455_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 455 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" MODIFY ("ADDRESS3" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" MODIFY ("ADDRESS3" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_455_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_456_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 456 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" MODIFY ("ADDRESS4" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" MODIFY ("ADDRESS4" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_456_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_457_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 457 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" MODIFY ("CITY" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" MODIFY ("CITY" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_457_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_458_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 458 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" MODIFY ("STATE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" MODIFY ("STATE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_458_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_459_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 459 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" MODIFY ("PHONE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMERGENCY_CNTCT" MODIFY ("PHONE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_459_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_460_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 460 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_EMERGENCY_CNTCT" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_EMERGENCY_CNTCT" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_460_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_461_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 461 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_EMERGENCY_CNTCT" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_EMERGENCY_CNTCT" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_461_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_462_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 462 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_EMERGENCY_CNTCT"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_EMERGENCY_CNTCT"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_462_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_463_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 463 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13072" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13072" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_463_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_464_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 464 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "PHONE" from "SYSADM"."PS_EMERGENCY_PHONE");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13072
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(24 CHAR)) orig_val, CAST(null AS VARCHAR2(24 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_phone(rid, ''''PHONE'''', orig_val)
         AS VARCHAR2(24 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "PHONE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMERGENCY_PHONE" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13072"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "PHONE" from "SYSADM"."PS_EMERGENCY_PHONE");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13072
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(24 CHAR)) orig_val, CAST(null AS VARCHAR2(24 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_phone(rid, ''''PHONE'''', orig_val)
         AS VARCHAR2(24 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "PHONE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMERGENCY_PHONE" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13072"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_464_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_465_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 465 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13072_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13072_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_465_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_466_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 466 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13072_IDX ON MGMT_DM_TT_13072(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13072_IDX ON MGMT_DM_TT_13072(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_466_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_467_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 467 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13073" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13073" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_467_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_468_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 468 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "CONTACT_NAME" from "SYSADM"."PS_EMERGENCY_PHONE");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    select count(*) into cnt0 from (select distinct "EFN_NAME" from "MASK"."EXTERNAL_FULL_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13073
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(50 CHAR)) orig_val, CAST(null AS VARCHAR2(50 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(50 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "CONTACT_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMERGENCY_PHONE" ) group by orig_val) s
    ,(select rownum rn, "EFN_NAME" new_val from (select distinct "EFN_NAME" from "MASK"."EXTERNAL_FULL_NAME" order by "EFN_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13073"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "CONTACT_NAME" from "SYSADM"."PS_EMERGENCY_PHONE");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    select count(*) into cnt0 from (select distinct "EFN_NAME" from "MASK"."EXTERNAL_FULL_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13073
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(50 CHAR)) orig_val, CAST(null AS VARCHAR2(50 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(50 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "CONTACT_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_EMERGENCY_PHONE" ) group by orig_val) s
    ,(select rownum rn, "EFN_NAME" new_val from (select distinct "EFN_NAME" from "MASK"."EXTERNAL_FULL_NAME" order by "EFN_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13073"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_468_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_469_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 469 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13073_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13073_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_469_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_470_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 470 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13073_IDX ON MGMT_DM_TT_13073(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13073_IDX ON MGMT_DM_TT_13073(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_470_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_471_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 471 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_EMERGENCY_PHONE$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_EMERGENCY_PHONE$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_471_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_472_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 472 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMERGENCY_PHONE" RENAME TO "PS_EMERGENCY_PHONE$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMERGENCY_PHONE" RENAME TO "PS_EMERGENCY_PHONE$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_472_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_473_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 473 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_EMERGENCY_PHONE$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_EMERGENCY_PHONE$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_473_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_474_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 474 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_EMERGENCY_PHONE"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", CAST(nvl(c1m13073.NEW_VAL, s."CONTACT_NAME") AS VARCHAR2(50 CHAR)) "CONTACT_NAME", s."PHONE_TYPE", s."COUNTRY_CODE", CAST(nvl(c0m13072.NEW_VAL, s."PHONE") AS VARCHAR2(24 CHAR)) "PHONE", s."EXTENSION" FROM "SYSADM"."PS_EMERGENCY_PHONE$DMASK"  s , MGMT_DM_TT_13072 c0m13072, MGMT_DM_TT_13073 c1m13073 WHERE s."PHONE" = c0m13072.ORIG_VAL (+) AND NVL(c0m13072.delete_val,0) = 0 AND s."CONTACT_NAME" = c1m13073.ORIG_VAL (+) AND NVL(c1m13073.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_EMERGENCY_PHONE"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", CAST(nvl(c1m13073.NEW_VAL, s."CONTACT_NAME") AS VARCHAR2(50 CHAR)) "CONTACT_NAME", s."PHONE_TYPE", s."COUNTRY_CODE", CAST(nvl(c0m13072.NEW_VAL, s."PHONE") AS VARCHAR2(24 CHAR)) "PHONE", s."EXTENSION" FROM "SYSADM"."PS_EMERGENCY_PHONE$DMASK"  s , MGMT_DM_TT_13072 c0m13072, MGMT_DM_TT_13073 c1m13073 WHERE s."PHONE" = c0m13072.ORIG_VAL (+) AND NVL(c0m13072.delete_val,0) = 0 AND s."CONTACT_NAME" = c1m13073.ORIG_VAL (+) AND NVL(c1m13073.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_474_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_475_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 475 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMERGENCY_PHONE" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMERGENCY_PHONE" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_475_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_476_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 476 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_EMERGENCY_PHONE$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_EMERGENCY_PHONE$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_476_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_477_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 477 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13072" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13072" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_477_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_478_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 478 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13073" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13073" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_478_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_479_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 479 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_EMERGENCY_PHONE" ON "SYSADM"."PS_EMERGENCY_PHONE" ("EMPLID","CONTACT_NAME","PHONE_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_EMERGENCY_PHONE" ON "SYSADM"."PS_EMERGENCY_PHONE" ("EMPLID","CONTACT_NAME","PHONE_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_479_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_480_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 480 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_EMERGENCY_PHONE" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_EMERGENCY_PHONE" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_480_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_481_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 481 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMERGENCY_PHONE" MODIFY ("CONTACT_NAME" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMERGENCY_PHONE" MODIFY ("CONTACT_NAME" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_481_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_482_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 482 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_EMERGENCY_PHONE" MODIFY ("PHONE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_EMERGENCY_PHONE" MODIFY ("PHONE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_482_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_483_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 483 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_EMERGENCY_PHONE" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_EMERGENCY_PHONE" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_483_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_484_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 484 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_EMERGENCY_PHONE" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_EMERGENCY_PHONE" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_484_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_485_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 485 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_EMERGENCY_PHONE"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_EMERGENCY_PHONE"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_485_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_486_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 486 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_GVT_PAR_REMARKS$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_GVT_PAR_REMARKS$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_486_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_487_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 487 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" RENAME TO "PS_GVT_PAR_REMARKS$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" RENAME TO "PS_GVT_PAR_REMARKS$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_487_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_488_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 488 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_488_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_489_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 489 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_GVT_PAR_REMARKS"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."EMPL_RCD", s."EFFDT", s."EFFSEQ", s."GVT_SF50_REMARK", s."GVT_INSERT_REQD", CAST(DECODE(TRIM(s."GVT_REMARK_LINE1"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE1", CAST(DECODE(TRIM(s."GVT_REMARK_LINE2"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE2", CAST(DECODE(TRIM(s."GVT_REMARK_LINE3"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE3", CAST(DECODE(TRIM(s."GVT_REMARK_LINE4"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE4", CAST(DECODE(TRIM(s."GVT_REMARK_LINE5"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE5", CAST(DECODE(TRIM(s."GVT_REMARK_LINE6"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE6", CAST(DECODE(TRIM(s."GVT_REMARK_LINE7"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE7", CAST(DECODE(TRIM(s."GVT_REMARK_LINE8"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE8", CAST(DECODE(TRIM(s."GVT_REMARK_LINE9"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE9" FROM "SYSADM"."PS_GVT_PAR_REMARKS$DMASK"  s ');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_GVT_PAR_REMARKS"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."EMPL_RCD", s."EFFDT", s."EFFSEQ", s."GVT_SF50_REMARK", s."GVT_INSERT_REQD", CAST(DECODE(TRIM(s."GVT_REMARK_LINE1"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE1", CAST(DECODE(TRIM(s."GVT_REMARK_LINE2"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE2", CAST(DECODE(TRIM(s."GVT_REMARK_LINE3"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE3", CAST(DECODE(TRIM(s."GVT_REMARK_LINE4"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE4", CAST(DECODE(TRIM(s."GVT_REMARK_LINE5"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE5", CAST(DECODE(TRIM(s."GVT_REMARK_LINE6"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE6", CAST(DECODE(TRIM(s."GVT_REMARK_LINE7"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE7", CAST(DECODE(TRIM(s."GVT_REMARK_LINE8"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE8", CAST(DECODE(TRIM(s."GVT_REMARK_LINE9"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(72 CHAR)) "GVT_REMARK_LINE9" FROM "SYSADM"."PS_GVT_PAR_REMARKS$DMASK"  s ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_489_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_490_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 490 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_490_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_491_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 491 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_GVT_PAR_REMARKS$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_GVT_PAR_REMARKS$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_491_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_492_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 492 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_GVT_PAR_REMARKS" ON "SYSADM"."PS_GVT_PAR_REMARKS" ("EMPLID","EMPL_RCD","EFFDT","EFFSEQ","GVT_SF50_REMARK")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_GVT_PAR_REMARKS" ON "SYSADM"."PS_GVT_PAR_REMARKS" ("EMPLID","EMPL_RCD","EFFDT","EFFSEQ","GVT_SF50_REMARK")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_492_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_493_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 493 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_GVT_PAR_REMARKS" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_GVT_PAR_REMARKS" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_493_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_494_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 494 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE1" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE1" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_494_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_495_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 495 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE2" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE2" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_495_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_496_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 496 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE3" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE3" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_496_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_497_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 497 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE4" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE4" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_497_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_498_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 498 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE5" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE5" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_498_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_499_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 499 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE6" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE6" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_499_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_500_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 500 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE7" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE7" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_500_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_501_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 501 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE8" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE8" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_501_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_502_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 502 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE9" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_GVT_PAR_REMARKS" MODIFY ("GVT_REMARK_LINE9" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_502_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_503_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 503 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_GVT_PAR_REMARKS" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_GVT_PAR_REMARKS" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_503_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_504_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 504 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_GVT_PAR_REMARKS" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_GVT_PAR_REMARKS" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_504_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_505_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 505 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_GVT_PAR_REMARKS"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_GVT_PAR_REMARKS"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_505_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_506_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 506 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_TM_STG$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_TM_STG$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_506_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_507_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 507 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_TM_STG" RENAME TO "PS_OP_TM_STG$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_TM_STG" RENAME TO "PS_OP_TM_STG$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_507_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_508_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 508 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_TM_STG"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE"
 LOB ("OP_TRV_MSG") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_DATA_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT))
 LOB ("OP_TM_DEPENDENT") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_DATA_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."OP_TRV_MSG_TYPE", s."EMPLID", s."OP_TM_EMP_SEQ_NBR", s."OP_TM_ASGN_ID", s."OP_TM_ASG_REV", s."OP_TM_NM_SEQ", s."POSITION_NBR", s."OP_TM_POS_SEQ", s."OP_TM_ASG_STATUS", s."OP_TM_ASG_TF_CD", s."OP_TM_ASG_TOD_CD", s."OP_TM_ASG_TOD_MNTH", s."DEPTID", s."DEPTID2", s."OP_TM_ASG_ETA_DATE", s."OP_TM_TRANS_ELG_DT", s."BEGIN_DT", s."OP_LAT_CODE", CAST(DECODE(TRIM(s."OP_TM_SUBJECT_TXT"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(250 CHAR)) "OP_TM_SUBJECT_TXT", s."OP_TM_TA_ID", s."OP_TM_TA_DT", s."OP_TM_TR_ID", s."OP_TM_TR_ID_REV", s."OP_TM_ASG_ETD_DT", s."OP_TM_TS_CD", s."OP_DIP_TTL_CD", s."OP_TM_PROCESSED", s."OP_TM_STG_ERRORCD", s."LASTUPDTBY", s."LASTUPDDTTM", s."OP_TRV_MSG", s."OP_TM_DEPENDENT" FROM "SYSADM"."PS_OP_TM_STG$DMASK"  s ');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_TM_STG"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE"
 LOB ("OP_TRV_MSG") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_DATA_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT))
 LOB ("OP_TM_DEPENDENT") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_DATA_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."OP_TRV_MSG_TYPE", s."EMPLID", s."OP_TM_EMP_SEQ_NBR", s."OP_TM_ASGN_ID", s."OP_TM_ASG_REV", s."OP_TM_NM_SEQ", s."POSITION_NBR", s."OP_TM_POS_SEQ", s."OP_TM_ASG_STATUS", s."OP_TM_ASG_TF_CD", s."OP_TM_ASG_TOD_CD", s."OP_TM_ASG_TOD_MNTH", s."DEPTID", s."DEPTID2", s."OP_TM_ASG_ETA_DATE", s."OP_TM_TRANS_ELG_DT", s."BEGIN_DT", s."OP_LAT_CODE", CAST(DECODE(TRIM(s."OP_TM_SUBJECT_TXT"),NULL, '' '', ''Real data have been MASKED!'') as VARCHAR2(250 CHAR)) "OP_TM_SUBJECT_TXT", s."OP_TM_TA_ID", s."OP_TM_TA_DT", s."OP_TM_TR_ID", s."OP_TM_TR_ID_REV", s."OP_TM_ASG_ETD_DT", s."OP_TM_TS_CD", s."OP_DIP_TTL_CD", s."OP_TM_PROCESSED", s."OP_TM_STG_ERRORCD", s."LASTUPDTBY", s."LASTUPDDTTM", s."OP_TRV_MSG", s."OP_TM_DEPENDENT" FROM "SYSADM"."PS_OP_TM_STG$DMASK"  s ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_508_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_509_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 509 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_TM_STG" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_TM_STG" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_509_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_510_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 510 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_TM_STG$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_TM_STG$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_510_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_511_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 511 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_TM_STG" ON "SYSADM"."PS_OP_TM_STG" ("OP_TRV_MSG_TYPE","EMPLID","OP_TM_ASGN_ID","OP_TM_ASG_REV","OP_TM_TA_ID","OP_TM_TR_ID","OP_TM_TR_ID_REV","LASTUPDDTTM")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_TM_STG" ON "SYSADM"."PS_OP_TM_STG" ("OP_TRV_MSG_TYPE","EMPLID","OP_TM_ASGN_ID","OP_TM_ASG_REV","OP_TM_TA_ID","OP_TM_TR_ID","OP_TM_TR_ID_REV","LASTUPDDTTM")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_511_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_512_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 512 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_TM_STG" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_TM_STG" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_512_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_513_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 513 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_TM_STG" MODIFY ("OP_TM_SUBJECT_TXT" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_TM_STG" MODIFY ("OP_TM_SUBJECT_TXT" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_513_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_514_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 514 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_TM_STG" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_TM_STG" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_514_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_515_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 515 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_TM_STG"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_TM_STG"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_515_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_516_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 516 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13084" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13084" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_516_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_517_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 517 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DISPLAY_NAME" from "SYSADM"."PS_HR_EERCDDEL_RES");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "EFN_NAME" from "MASK"."EXTERNAL_FULL_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13084
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(50 CHAR)) orig_val, CAST(null AS VARCHAR2(50 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(50 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DISPLAY_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_HR_EERCDDEL_RES" ) group by orig_val) s
    ,(select rownum rn, "EFN_NAME" new_val from (select distinct "EFN_NAME" from "MASK"."EXTERNAL_FULL_NAME" order by "EFN_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13084"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DISPLAY_NAME" from "SYSADM"."PS_HR_EERCDDEL_RES");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "EFN_NAME" from "MASK"."EXTERNAL_FULL_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13084
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(50 CHAR)) orig_val, CAST(null AS VARCHAR2(50 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(50 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DISPLAY_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_HR_EERCDDEL_RES" ) group by orig_val) s
    ,(select rownum rn, "EFN_NAME" new_val from (select distinct "EFN_NAME" from "MASK"."EXTERNAL_FULL_NAME" order by "EFN_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13084"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_517_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_518_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 518 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13084_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13084_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_518_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_519_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 519 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13084_IDX ON MGMT_DM_TT_13084(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13084_IDX ON MGMT_DM_TT_13084(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_519_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_520_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 520 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_HR_EERCDDEL_RES$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_HR_EERCDDEL_RES$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_520_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_521_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 521 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_HR_EERCDDEL_RES" RENAME TO "PS_HR_EERCDDEL_RES$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_HR_EERCDDEL_RES" RENAME TO "PS_HR_EERCDDEL_RES$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_521_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_522_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 522 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_HR_EERCDDEL_RES$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_HR_EERCDDEL_RES$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_522_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_523_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 523 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_HR_EERCDDEL_RES"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."PROCESS_INSTANCE", s."OPRID", s."EMPLID", s."EMPL_RCD", CAST(nvl(c0m13084.NEW_VAL, s."DISPLAY_NAME") AS VARCHAR2(50 CHAR)) "DISPLAY_NAME", s."RUNDATE", s."RUNSTATUS", s."RUN_CNTL_ID" FROM "SYSADM"."PS_HR_EERCDDEL_RES$DMASK"  s , MGMT_DM_TT_13084 c0m13084 WHERE s."DISPLAY_NAME" = c0m13084.ORIG_VAL (+) AND NVL(c0m13084.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_HR_EERCDDEL_RES"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."PROCESS_INSTANCE", s."OPRID", s."EMPLID", s."EMPL_RCD", CAST(nvl(c0m13084.NEW_VAL, s."DISPLAY_NAME") AS VARCHAR2(50 CHAR)) "DISPLAY_NAME", s."RUNDATE", s."RUNSTATUS", s."RUN_CNTL_ID" FROM "SYSADM"."PS_HR_EERCDDEL_RES$DMASK"  s , MGMT_DM_TT_13084 c0m13084 WHERE s."DISPLAY_NAME" = c0m13084.ORIG_VAL (+) AND NVL(c0m13084.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_523_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_524_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 524 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_HR_EERCDDEL_RES" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_HR_EERCDDEL_RES" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_524_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_525_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 525 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_HR_EERCDDEL_RES$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_HR_EERCDDEL_RES$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_525_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_526_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 526 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13084" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13084" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_526_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_527_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 527 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS0HR_EERCDDEL_RES" ON "SYSADM"."PS_HR_EERCDDEL_RES" ("DISPLAY_NAME","PROCESS_INSTANCE","OPRID","EMPLID","EMPL_RCD")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS0HR_EERCDDEL_RES" ON "SYSADM"."PS_HR_EERCDDEL_RES" ("DISPLAY_NAME","PROCESS_INSTANCE","OPRID","EMPLID","EMPL_RCD")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_527_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_528_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 528 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS0HR_EERCDDEL_RES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS0HR_EERCDDEL_RES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_528_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_529_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 529 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS1HR_EERCDDEL_RES" ON "SYSADM"."PS_HR_EERCDDEL_RES" ("RUNDATE","PROCESS_INSTANCE","OPRID","EMPLID","EMPL_RCD")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS1HR_EERCDDEL_RES" ON "SYSADM"."PS_HR_EERCDDEL_RES" ("RUNDATE","PROCESS_INSTANCE","OPRID","EMPLID","EMPL_RCD")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_529_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_530_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 530 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS1HR_EERCDDEL_RES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS1HR_EERCDDEL_RES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_530_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_531_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 531 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS2HR_EERCDDEL_RES" ON "SYSADM"."PS_HR_EERCDDEL_RES" ("RUN_CNTL_ID","PROCESS_INSTANCE","OPRID","EMPLID","EMPL_RCD")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS2HR_EERCDDEL_RES" ON "SYSADM"."PS_HR_EERCDDEL_RES" ("RUN_CNTL_ID","PROCESS_INSTANCE","OPRID","EMPLID","EMPL_RCD")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_531_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_532_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 532 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS2HR_EERCDDEL_RES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS2HR_EERCDDEL_RES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_532_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_533_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 533 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_HR_EERCDDEL_RES" ON "SYSADM"."PS_HR_EERCDDEL_RES" ("PROCESS_INSTANCE","OPRID","EMPLID","EMPL_RCD")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_HR_EERCDDEL_RES" ON "SYSADM"."PS_HR_EERCDDEL_RES" ("PROCESS_INSTANCE","OPRID","EMPLID","EMPL_RCD")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_533_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_534_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 534 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_HR_EERCDDEL_RES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_HR_EERCDDEL_RES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_534_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_535_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 535 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_HR_EERCDDEL_RES" MODIFY ("DISPLAY_NAME" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_HR_EERCDDEL_RES" MODIFY ("DISPLAY_NAME" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_535_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_536_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 536 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_HR_EERCDDEL_RES" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_HR_EERCDDEL_RES" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_536_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_537_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 537 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_HR_EERCDDEL_RES" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_HR_EERCDDEL_RES" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_537_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_538_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 538 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_HR_EERCDDEL_RES"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_HR_EERCDDEL_RES"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_538_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_539_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 539 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13088" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13088" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_539_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_540_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 540 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "DT_OF_DEATH" from "SYSADM"."PS_PERSON");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    execute immediate ''create table MGMT_DM_TT_13088
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS DATE) orig_val, CAST(null AS DATE) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_birthday(rid, ''''DT_OF_DEATH'''', orig_val)
         AS DATE)
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "DT_OF_DEATH" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSON" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13088"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "DT_OF_DEATH" from "SYSADM"."PS_PERSON");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    execute immediate ''create table MGMT_DM_TT_13088
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS DATE) orig_val, CAST(null AS DATE) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_birthday(rid, ''''DT_OF_DEATH'''', orig_val)
         AS DATE)
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "DT_OF_DEATH" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSON" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13088"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_540_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_541_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 541 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13088_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13088_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_541_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_542_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 542 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13088_IDX ON MGMT_DM_TT_13088(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13088_IDX ON MGMT_DM_TT_13088(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_542_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_543_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 543 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13089" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13089" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_543_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_544_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 544 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "BIRTHDATE" from "SYSADM"."PS_PERSON");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13089
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS DATE) orig_val, CAST(null AS DATE) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_birthday(rid, ''''BIRTHDATE'''', orig_val)
         AS DATE)
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "BIRTHDATE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSON" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13089"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "BIRTHDATE" from "SYSADM"."PS_PERSON");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13089
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS DATE) orig_val, CAST(null AS DATE) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_birthday(rid, ''''BIRTHDATE'''', orig_val)
         AS DATE)
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "BIRTHDATE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSON" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13089"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_544_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_545_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 545 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13089_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13089_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_545_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_546_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 546 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13089_IDX ON MGMT_DM_TT_13089(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13089_IDX ON MGMT_DM_TT_13089(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_546_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_547_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 547 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_PERSON$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_PERSON$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_547_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_548_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 548 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSON" RENAME TO "PS_PERSON$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSON" RENAME TO "PS_PERSON$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_548_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_549_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 549 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_PERSON$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_PERSON$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_549_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_550_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 550 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_PERSON"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", c4m13089.NEW_VAL "BIRTHDATE", CAST(DECODE(TRIM(s."BIRTHPLACE"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "BIRTHPLACE", CAST(DECODE(TRIM(s."BIRTHCOUNTRY"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "BIRTHCOUNTRY", CAST(DECODE(TRIM(s."BIRTHSTATE"), NULL, '' '', ''DC'') as VARCHAR2(6 CHAR)) "BIRTHSTATE", c3m13088.NEW_VAL "DT_OF_DEATH", s."LAST_CHILD_UPDDTM" FROM "SYSADM"."PS_PERSON$DMASK"  s , MGMT_DM_TT_13088 c3m13088, MGMT_DM_TT_13089 c4m13089 WHERE s."DT_OF_DEATH" = c3m13088.ORIG_VAL (+) AND NVL(c3m13088.delete_val,0) = 0 AND s."BIRTHDATE" = c4m13089.ORIG_VAL (+) AND NVL(c4m13089.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_PERSON"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", c4m13089.NEW_VAL "BIRTHDATE", CAST(DECODE(TRIM(s."BIRTHPLACE"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "BIRTHPLACE", CAST(DECODE(TRIM(s."BIRTHCOUNTRY"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "BIRTHCOUNTRY", CAST(DECODE(TRIM(s."BIRTHSTATE"), NULL, '' '', ''DC'') as VARCHAR2(6 CHAR)) "BIRTHSTATE", c3m13088.NEW_VAL "DT_OF_DEATH", s."LAST_CHILD_UPDDTM" FROM "SYSADM"."PS_PERSON$DMASK"  s , MGMT_DM_TT_13088 c3m13088, MGMT_DM_TT_13089 c4m13089 WHERE s."DT_OF_DEATH" = c3m13088.ORIG_VAL (+) AND NVL(c3m13088.delete_val,0) = 0 AND s."BIRTHDATE" = c4m13089.ORIG_VAL (+) AND NVL(c4m13089.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_550_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_551_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 551 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSON" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSON" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_551_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_552_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 552 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_PERSON$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_PERSON$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_552_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_553_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 553 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13088" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13088" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_553_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_554_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 554 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13089" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13089" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_554_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_555_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 555 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_PERSON" ON "SYSADM"."PS_PERSON" ("EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_PERSON" ON "SYSADM"."PS_PERSON" ("EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_555_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_556_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 556 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_PERSON" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_PERSON" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_556_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_557_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 557 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSON" MODIFY ("BIRTHPLACE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSON" MODIFY ("BIRTHPLACE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_557_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_558_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 558 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSON" MODIFY ("BIRTHCOUNTRY" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSON" MODIFY ("BIRTHCOUNTRY" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_558_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_559_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 559 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSON" MODIFY ("BIRTHSTATE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSON" MODIFY ("BIRTHSTATE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_559_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_560_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 560 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_PERSON" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_PERSON" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_560_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_561_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 561 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_PERSON" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_PERSON" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_561_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_562_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 562 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_PERSON"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_PERSON"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_562_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_563_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 563 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13091" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13091" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_563_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_564_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 564 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "PASSPORT_NBR" from "SYSADM"."PS_CITIZEN_PSSPRT");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13091
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(15 CHAR)) orig_val, CAST(null AS VARCHAR2(15 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_scramble_deterministic(rid, ''''PASSPORT_NBR'''', orig_val)
         AS VARCHAR2(15 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "PASSPORT_NBR" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_CITIZEN_PSSPRT" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13091"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "PASSPORT_NBR" from "SYSADM"."PS_CITIZEN_PSSPRT");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13091
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(15 CHAR)) orig_val, CAST(null AS VARCHAR2(15 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_scramble_deterministic(rid, ''''PASSPORT_NBR'''', orig_val)
         AS VARCHAR2(15 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "PASSPORT_NBR" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_CITIZEN_PSSPRT" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13091"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_564_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_565_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 565 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13091_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13091_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_565_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_566_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 566 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13091_IDX ON MGMT_DM_TT_13091(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13091_IDX ON MGMT_DM_TT_13091(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_566_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_567_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 567 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_CITIZEN_PSSPRT$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_CITIZEN_PSSPRT$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_567_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_568_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 568 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_CITIZEN_PSSPRT" RENAME TO "PS_CITIZEN_PSSPRT$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_CITIZEN_PSSPRT" RENAME TO "PS_CITIZEN_PSSPRT$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_568_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_569_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 569 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_CITIZEN_PSSPRT"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE"
 LOB ("COMMENTS") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."EMPLID", s."DEPENDENT_ID", CAST(DECODE(TRIM(s."COUNTRY"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "COUNTRY", CAST(nvl(c1m13091.NEW_VAL, s."PASSPORT_NBR") AS VARCHAR2(15 CHAR)) "PASSPORT_NBR", s."DT_ISSUED", s."EXPIRATN_DT", s."COUNTRY_PASSPORT", s."STATE_PASSPORT", s."CITY_PASSPORT", s."ISSUING_AUTHORITY", s."COMMENTS" FROM "SYSADM"."PS_CITIZEN_PSSPRT$DMASK"  s , MGMT_DM_TT_13091 c1m13091 WHERE s."PASSPORT_NBR" = c1m13091.ORIG_VAL (+) AND NVL(c1m13091.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_CITIZEN_PSSPRT"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE"
 LOB ("COMMENTS") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."EMPLID", s."DEPENDENT_ID", CAST(DECODE(TRIM(s."COUNTRY"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "COUNTRY", CAST(nvl(c1m13091.NEW_VAL, s."PASSPORT_NBR") AS VARCHAR2(15 CHAR)) "PASSPORT_NBR", s."DT_ISSUED", s."EXPIRATN_DT", s."COUNTRY_PASSPORT", s."STATE_PASSPORT", s."CITY_PASSPORT", s."ISSUING_AUTHORITY", s."COMMENTS" FROM "SYSADM"."PS_CITIZEN_PSSPRT$DMASK"  s , MGMT_DM_TT_13091 c1m13091 WHERE s."PASSPORT_NBR" = c1m13091.ORIG_VAL (+) AND NVL(c1m13091.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_569_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_570_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 570 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_CITIZEN_PSSPRT" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_CITIZEN_PSSPRT" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_570_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_571_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 571 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_CITIZEN_PSSPRT$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_CITIZEN_PSSPRT$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_571_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_572_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 572 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13091" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13091" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_572_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_573_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 573 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_CITIZEN_PSSPRT" ON "SYSADM"."PS_CITIZEN_PSSPRT" ("EMPLID","DEPENDENT_ID","COUNTRY","PASSPORT_NBR")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_CITIZEN_PSSPRT" ON "SYSADM"."PS_CITIZEN_PSSPRT" ("EMPLID","DEPENDENT_ID","COUNTRY","PASSPORT_NBR")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_573_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_574_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 574 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_CITIZEN_PSSPRT" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_CITIZEN_PSSPRT" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_574_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_575_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 575 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_CITIZEN_PSSPRT" MODIFY ("COUNTRY" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_CITIZEN_PSSPRT" MODIFY ("COUNTRY" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_575_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_576_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 576 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_CITIZEN_PSSPRT" MODIFY ("PASSPORT_NBR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_CITIZEN_PSSPRT" MODIFY ("PASSPORT_NBR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_576_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_577_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 577 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_CITIZEN_PSSPRT" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_CITIZEN_PSSPRT" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_577_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_578_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 578 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_CITIZEN_PSSPRT" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_CITIZEN_PSSPRT" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_578_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_579_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 579 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_CITIZEN_PSSPRT"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_CITIZEN_PSSPRT"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_579_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_580_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 580 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13092" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13092" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_580_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_581_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 581 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "PHONE" from "SYSADM"."PS_DEP_BEN");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13092
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(24 CHAR)) orig_val, CAST(null AS VARCHAR2(24 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_phone(rid, ''''PHONE'''', orig_val)
         AS VARCHAR2(24 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "PHONE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BEN" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13092"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "PHONE" from "SYSADM"."PS_DEP_BEN");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13092
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(24 CHAR)) orig_val, CAST(null AS VARCHAR2(24 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_phone(rid, ''''PHONE'''', orig_val)
         AS VARCHAR2(24 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "PHONE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BEN" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13092"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_581_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_582_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 582 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13092_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13092_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_582_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_583_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 583 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13092_IDX ON MGMT_DM_TT_13092(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13092_IDX ON MGMT_DM_TT_13092(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_583_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_584_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 584 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13095" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13095" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_584_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_585_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 585 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "BIRTHDATE" from "SYSADM"."PS_DEP_BEN");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13095
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS DATE) orig_val, CAST(null AS DATE) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_birthday(rid, ''''BIRTHDATE'''', orig_val)
         AS DATE)
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "BIRTHDATE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BEN" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13095"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "BIRTHDATE" from "SYSADM"."PS_DEP_BEN");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13095
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS DATE) orig_val, CAST(null AS DATE) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_birthday(rid, ''''BIRTHDATE'''', orig_val)
         AS DATE)
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "BIRTHDATE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BEN" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13095"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_585_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_586_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 586 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13095_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13095_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_586_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_587_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 587 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13095_IDX ON MGMT_DM_TT_13095(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13095_IDX ON MGMT_DM_TT_13095(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_587_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_588_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 588 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_DEP_BEN$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_DEP_BEN$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_588_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_589_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 589 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN" RENAME TO "PS_DEP_BEN$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN" RENAME TO "PS_DEP_BEN$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_589_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_590_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 590 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_DEP_BEN$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_DEP_BEN$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_590_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_591_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 591 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_DEP_BEN"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."DEPENDENT_BENEF", c3m13095.NEW_VAL "BIRTHDATE", CAST(DECODE(TRIM(s."BIRTHPLACE"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "BIRTHPLACE", s."BIRTHSTATE", CAST(DECODE(TRIM(s."BIRTHCOUNTRY"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "BIRTHCOUNTRY", s."DT_OF_DEATH", s."DEPBEN_RIDER_FLG", s."COUNTRY_CODE", CAST(nvl(c0m13092.NEW_VAL, s."PHONE") AS VARCHAR2(24 CHAR)) "PHONE", s."SAME_PHONE_EMPL", s."PHONE_TYPE", s."CSB_ELIG", s."COBRA_EVENT_DT", s."COBRA_ACTION", s."COBRA_EMPLID", s."MEDICARE_ENTLD_DT", s."FP_DEPEND_EMPLID", s."FP_STAT_FONC", s."FP_EMPLOYER_NAME", s."FP_SAME_PUBL_SCE", s."LAST_UPDATE_DATE", s."DEP_ELIGIBLE_UK", s."DEP_ADOPTED_UK", s."DEP_ADOPTION_DT_UK", s."DEP_CERTIFICATE_UK", s."GVT_FEHB_IND", s."GVT_DEP_BENEF_PLAN", s."BENEF_IND" FROM "SYSADM"."PS_DEP_BEN$DMASK"  s , MGMT_DM_TT_13092 c0m13092, MGMT_DM_TT_13095 c3m13095 WHERE s."PHONE" = c0m13092.ORIG_VAL (+) AND NVL(c0m13092.delete_val,0) = 0 AND s."BIRTHDATE" = c3m13095.ORIG_VAL (+) AND NVL(c3m13095.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_DEP_BEN"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."DEPENDENT_BENEF", c3m13095.NEW_VAL "BIRTHDATE", CAST(DECODE(TRIM(s."BIRTHPLACE"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "BIRTHPLACE", s."BIRTHSTATE", CAST(DECODE(TRIM(s."BIRTHCOUNTRY"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "BIRTHCOUNTRY", s."DT_OF_DEATH", s."DEPBEN_RIDER_FLG", s."COUNTRY_CODE", CAST(nvl(c0m13092.NEW_VAL, s."PHONE") AS VARCHAR2(24 CHAR)) "PHONE", s."SAME_PHONE_EMPL", s."PHONE_TYPE", s."CSB_ELIG", s."COBRA_EVENT_DT", s."COBRA_ACTION", s."COBRA_EMPLID", s."MEDICARE_ENTLD_DT", s."FP_DEPEND_EMPLID", s."FP_STAT_FONC", s."FP_EMPLOYER_NAME", s."FP_SAME_PUBL_SCE", s."LAST_UPDATE_DATE", s."DEP_ELIGIBLE_UK", s."DEP_ADOPTED_UK", s."DEP_ADOPTION_DT_UK", s."DEP_CERTIFICATE_UK", s."GVT_FEHB_IND", s."GVT_DEP_BENEF_PLAN", s."BENEF_IND" FROM "SYSADM"."PS_DEP_BEN$DMASK"  s , MGMT_DM_TT_13092 c0m13092, MGMT_DM_TT_13095 c3m13095 WHERE s."PHONE" = c0m13092.ORIG_VAL (+) AND NVL(c0m13092.delete_val,0) = 0 AND s."BIRTHDATE" = c3m13095.ORIG_VAL (+) AND NVL(c3m13095.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_591_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_592_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 592 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_592_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_593_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 593 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_DEP_BEN$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_DEP_BEN$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_593_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_594_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 594 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13092" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13092" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_594_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_595_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 595 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13095" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13095" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_595_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_596_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 596 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_DEP_BEN" ON "SYSADM"."PS_DEP_BEN" ("EMPLID","DEPENDENT_BENEF")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_DEP_BEN" ON "SYSADM"."PS_DEP_BEN" ("EMPLID","DEPENDENT_BENEF")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_596_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_597_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 597 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_DEP_BEN" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_DEP_BEN" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_597_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_598_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 598 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN" MODIFY ("BIRTHPLACE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN" MODIFY ("BIRTHPLACE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_598_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_599_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 599 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN" MODIFY ("BIRTHCOUNTRY" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN" MODIFY ("BIRTHCOUNTRY" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_599_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_600_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 600 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN" MODIFY ("PHONE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN" MODIFY ("PHONE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_600_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_601_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 601 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_DEP_BEN" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_DEP_BEN" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_601_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_602_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 602 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_DEP_BEN" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_DEP_BEN" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_602_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_603_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 603 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_DEP_BEN"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_DEP_BEN"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_603_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_604_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 604 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13096" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13096" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_604_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_605_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 605 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS4" from "SYSADM"."PS_DEP_BEN_ADDR");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    execute immediate ''create table MGMT_DM_TT_13096
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS4'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS4" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BEN_ADDR" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13096"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS4" from "SYSADM"."PS_DEP_BEN_ADDR");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    execute immediate ''create table MGMT_DM_TT_13096
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS4'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS4" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BEN_ADDR" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13096"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_605_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_606_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 606 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13096_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13096_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_606_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_607_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 607 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13096_IDX ON MGMT_DM_TT_13096(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13096_IDX ON MGMT_DM_TT_13096(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_607_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_608_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 608 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13097" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13097" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_608_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_609_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 609 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS3" from "SYSADM"."PS_DEP_BEN_ADDR");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    execute immediate ''create table MGMT_DM_TT_13097
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS3'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS3" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BEN_ADDR" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13097"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS3" from "SYSADM"."PS_DEP_BEN_ADDR");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    execute immediate ''create table MGMT_DM_TT_13097
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS3'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS3" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BEN_ADDR" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13097"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_609_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_610_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 610 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13097_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13097_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_610_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_611_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 611 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13097_IDX ON MGMT_DM_TT_13097(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13097_IDX ON MGMT_DM_TT_13097(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_611_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_612_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 612 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13099" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13099" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_612_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_613_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 613 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS2" from "SYSADM"."PS_DEP_BEN_ADDR");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    execute immediate ''create table MGMT_DM_TT_13099
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS2'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS2" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BEN_ADDR" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13099"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS2" from "SYSADM"."PS_DEP_BEN_ADDR");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    execute immediate ''create table MGMT_DM_TT_13099
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS2'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS2" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BEN_ADDR" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13099"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_613_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_614_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 614 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13099_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13099_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_614_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_615_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 615 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13099_IDX ON MGMT_DM_TT_13099(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13099_IDX ON MGMT_DM_TT_13099(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_615_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_616_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 616 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13101" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13101" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_616_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_617_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 617 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS1" from "SYSADM"."PS_DEP_BEN_ADDR");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13101
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS1'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS1" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BEN_ADDR" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13101"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS1" from "SYSADM"."PS_DEP_BEN_ADDR");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13101
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS1'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS1" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BEN_ADDR" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13101"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_617_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_618_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 618 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13101_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13101_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_618_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_619_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 619 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13101_IDX ON MGMT_DM_TT_13101(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13101_IDX ON MGMT_DM_TT_13101(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_619_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_620_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 620 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_DEP_BEN_ADDR$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_DEP_BEN_ADDR$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_620_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_621_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 621 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" RENAME TO "PS_DEP_BEN_ADDR$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" RENAME TO "PS_DEP_BEN_ADDR$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_621_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_622_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 622 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_622_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_623_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 623 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_DEP_BEN_ADDR"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."DEPENDENT_BENEF", s."EFFDT", s."SAME_ADDRESS_EMPL", CAST(DECODE(TRIM(s."COUNTRY"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "COUNTRY", CAST(nvl(c5m13101.NEW_VAL, s."ADDRESS1") AS VARCHAR2(55 CHAR)) "ADDRESS1", CAST(nvl(c3m13099.NEW_VAL, s."ADDRESS2") AS VARCHAR2(55 CHAR)) "ADDRESS2", CAST(nvl(c1m13097.NEW_VAL, s."ADDRESS3") AS VARCHAR2(55 CHAR)) "ADDRESS3", CAST(nvl(c0m13096.NEW_VAL, s."ADDRESS4") AS VARCHAR2(55 CHAR)) "ADDRESS4", CAST(DECODE(TRIM(s."CITY"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "CITY", s."NUM1", s."NUM2", s."HOUSE_TYPE", s."ADDR_FIELD1", s."ADDR_FIELD2", s."ADDR_FIELD3", s."COUNTY", CAST(DECODE(TRIM(s."STATE"), NULL, '' '', ''DC'') as VARCHAR2(6 CHAR)) "STATE", s."POSTAL", s."GEO_CODE", s."IN_CITY_LIMIT", s."ADDRESS_TYPE" FROM "SYSADM"."PS_DEP_BEN_ADDR$DMASK"  s , MGMT_DM_TT_13096 c0m13096, MGMT_DM_TT_13097 c1m13097, MGMT_DM_TT_13099 c3m13099, MGMT_DM_TT_13101 c5m13101 WHERE s."ADDRESS4" = c0m13096.ORIG_VAL (+) AND NVL(c0m13096.delete_val,0) = 0 AND s."ADDRESS3" = c1m13097.ORIG_VAL (+) AND NVL(c1m13097.delete_val,0) = 0 AND s."ADDRESS2" = c3m13099.ORIG_VAL (+) AND NVL(c3m13099.delete_val,0) = 0 AND s."ADDRESS1" = c5m13101.ORIG_VAL (+) AND NVL(c5m13101.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_DEP_BEN_ADDR"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."DEPENDENT_BENEF", s."EFFDT", s."SAME_ADDRESS_EMPL", CAST(DECODE(TRIM(s."COUNTRY"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "COUNTRY", CAST(nvl(c5m13101.NEW_VAL, s."ADDRESS1") AS VARCHAR2(55 CHAR)) "ADDRESS1", CAST(nvl(c3m13099.NEW_VAL, s."ADDRESS2") AS VARCHAR2(55 CHAR)) "ADDRESS2", CAST(nvl(c1m13097.NEW_VAL, s."ADDRESS3") AS VARCHAR2(55 CHAR)) "ADDRESS3", CAST(nvl(c0m13096.NEW_VAL, s."ADDRESS4") AS VARCHAR2(55 CHAR)) "ADDRESS4", CAST(DECODE(TRIM(s."CITY"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "CITY", s."NUM1", s."NUM2", s."HOUSE_TYPE", s."ADDR_FIELD1", s."ADDR_FIELD2", s."ADDR_FIELD3", s."COUNTY", CAST(DECODE(TRIM(s."STATE"), NULL, '' '', ''DC'') as VARCHAR2(6 CHAR)) "STATE", s."POSTAL", s."GEO_CODE", s."IN_CITY_LIMIT", s."ADDRESS_TYPE" FROM "SYSADM"."PS_DEP_BEN_ADDR$DMASK"  s , MGMT_DM_TT_13096 c0m13096, MGMT_DM_TT_13097 c1m13097, MGMT_DM_TT_13099 c3m13099, MGMT_DM_TT_13101 c5m13101 WHERE s."ADDRESS4" = c0m13096.ORIG_VAL (+) AND NVL(c0m13096.delete_val,0) = 0 AND s."ADDRESS3" = c1m13097.ORIG_VAL (+) AND NVL(c1m13097.delete_val,0) = 0 AND s."ADDRESS2" = c3m13099.ORIG_VAL (+) AND NVL(c3m13099.delete_val,0) = 0 AND s."ADDRESS1" = c5m13101.ORIG_VAL (+) AND NVL(c5m13101.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_623_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_624_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 624 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_624_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_625_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 625 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_DEP_BEN_ADDR$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_DEP_BEN_ADDR$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_625_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_626_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 626 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13096" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13096" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_626_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_627_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 627 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13097" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13097" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_627_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_628_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 628 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13099" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13099" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_628_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_629_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 629 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13101" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13101" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_629_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_630_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 630 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_DEP_BEN_ADDR" ON "SYSADM"."PS_DEP_BEN_ADDR" ("EMPLID","DEPENDENT_BENEF","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_DEP_BEN_ADDR" ON "SYSADM"."PS_DEP_BEN_ADDR" ("EMPLID","DEPENDENT_BENEF","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_630_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_631_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 631 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_DEP_BEN_ADDR" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_DEP_BEN_ADDR" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_631_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_632_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 632 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" MODIFY ("COUNTRY" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" MODIFY ("COUNTRY" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_632_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_633_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 633 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" MODIFY ("ADDRESS1" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" MODIFY ("ADDRESS1" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_633_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_634_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 634 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" MODIFY ("ADDRESS2" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" MODIFY ("ADDRESS2" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_634_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_635_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 635 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" MODIFY ("ADDRESS3" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" MODIFY ("ADDRESS3" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_635_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_636_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 636 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" MODIFY ("ADDRESS4" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" MODIFY ("ADDRESS4" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_636_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_637_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 637 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" MODIFY ("CITY" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" MODIFY ("CITY" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_637_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_638_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 638 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" MODIFY ("STATE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_ADDR" MODIFY ("STATE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_638_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_639_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 639 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_DEP_BEN_ADDR" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_DEP_BEN_ADDR" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_639_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_640_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 640 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_DEP_BEN_ADDR" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_DEP_BEN_ADDR" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_640_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_641_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 641 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_DEP_BEN_ADDR"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_DEP_BEN_ADDR"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_641_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_642_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 642 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13104" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13104" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_642_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_643_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 643 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "EMAILID" from "SYSADM"."PS_ROLEXLATOPR");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13104
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_email(rid, ''''EMAILID'''', orig_val)
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "EMAILID" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_ROLEXLATOPR" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13104"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "EMAILID" from "SYSADM"."PS_ROLEXLATOPR");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13104
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_email(rid, ''''EMAILID'''', orig_val)
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "EMAILID" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_ROLEXLATOPR" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13104"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_643_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_644_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 644 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13104_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13104_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_644_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_645_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 645 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13104_IDX ON MGMT_DM_TT_13104(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13104_IDX ON MGMT_DM_TT_13104(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_645_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_646_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 646 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_ROLEXLATOPR$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_ROLEXLATOPR$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_646_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_647_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 647 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_ROLEXLATOPR" RENAME TO "PS_ROLEXLATOPR$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_ROLEXLATOPR" RENAME TO "PS_ROLEXLATOPR$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_647_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_648_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 648 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_ROLEXLATOPR$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_ROLEXLATOPR$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_648_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_649_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 649 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_ROLEXLATOPR"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."ROLEUSER", CAST(DECODE(TRIM(s."DESCR"),NULL, '' '', ''MASKED USER NAME'') as VARCHAR2(30 CHAR)) "DESCR", s."OPRID", CAST(nvl(c1m13104.NEW_VAL, s."EMAILID") AS VARCHAR2(70 CHAR)) "EMAILID", s."FORMID", s."WORKLIST_USER_SW", s."EMAIL_USER_SW", s."FORMS_USER_SW", s."EMPLID", s."ROLEUSER_ALT", s."ROLEUSER_SUPR", s."EFFDT_FROM", s."EFFDT_TO" FROM "SYSADM"."PS_ROLEXLATOPR$DMASK"  s , MGMT_DM_TT_13104 c1m13104 WHERE s."EMAILID" = c1m13104.ORIG_VAL (+) AND NVL(c1m13104.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_ROLEXLATOPR"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."ROLEUSER", CAST(DECODE(TRIM(s."DESCR"),NULL, '' '', ''MASKED USER NAME'') as VARCHAR2(30 CHAR)) "DESCR", s."OPRID", CAST(nvl(c1m13104.NEW_VAL, s."EMAILID") AS VARCHAR2(70 CHAR)) "EMAILID", s."FORMID", s."WORKLIST_USER_SW", s."EMAIL_USER_SW", s."FORMS_USER_SW", s."EMPLID", s."ROLEUSER_ALT", s."ROLEUSER_SUPR", s."EFFDT_FROM", s."EFFDT_TO" FROM "SYSADM"."PS_ROLEXLATOPR$DMASK"  s , MGMT_DM_TT_13104 c1m13104 WHERE s."EMAILID" = c1m13104.ORIG_VAL (+) AND NVL(c1m13104.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_649_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_650_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 650 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_ROLEXLATOPR" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_ROLEXLATOPR" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_650_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_651_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 651 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_ROLEXLATOPR$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_ROLEXLATOPR$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_651_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_652_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 652 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13104" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13104" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_652_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_653_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 653 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS0ROLEXLATOPR" ON "SYSADM"."PS_ROLEXLATOPR" ("DESCR","ROLEUSER")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS0ROLEXLATOPR" ON "SYSADM"."PS_ROLEXLATOPR" ("DESCR","ROLEUSER")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_653_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_654_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 654 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS0ROLEXLATOPR" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS0ROLEXLATOPR" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_654_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_655_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 655 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS1ROLEXLATOPR" ON "SYSADM"."PS_ROLEXLATOPR" ("OPRID","ROLEUSER")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS1ROLEXLATOPR" ON "SYSADM"."PS_ROLEXLATOPR" ("OPRID","ROLEUSER")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_655_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_656_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 656 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS1ROLEXLATOPR" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS1ROLEXLATOPR" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_656_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_657_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 657 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS2ROLEXLATOPR" ON "SYSADM"."PS_ROLEXLATOPR" ("WORKLIST_USER_SW","ROLEUSER")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS2ROLEXLATOPR" ON "SYSADM"."PS_ROLEXLATOPR" ("WORKLIST_USER_SW","ROLEUSER")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_657_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_658_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 658 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS2ROLEXLATOPR" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS2ROLEXLATOPR" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_658_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_659_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 659 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS3ROLEXLATOPR" ON "SYSADM"."PS_ROLEXLATOPR" ("EMAIL_USER_SW","ROLEUSER")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS3ROLEXLATOPR" ON "SYSADM"."PS_ROLEXLATOPR" ("EMAIL_USER_SW","ROLEUSER")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_659_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_660_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 660 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS3ROLEXLATOPR" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS3ROLEXLATOPR" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_660_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_661_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 661 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS4ROLEXLATOPR" ON "SYSADM"."PS_ROLEXLATOPR" ("FORMS_USER_SW","ROLEUSER")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS4ROLEXLATOPR" ON "SYSADM"."PS_ROLEXLATOPR" ("FORMS_USER_SW","ROLEUSER")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_661_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_662_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 662 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS4ROLEXLATOPR" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS4ROLEXLATOPR" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_662_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_663_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 663 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS5ROLEXLATOPR" ON "SYSADM"."PS_ROLEXLATOPR" ("EMPLID","ROLEUSER")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS5ROLEXLATOPR" ON "SYSADM"."PS_ROLEXLATOPR" ("EMPLID","ROLEUSER")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_663_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_664_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 664 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS5ROLEXLATOPR" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS5ROLEXLATOPR" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_664_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_665_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 665 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_ROLEXLATOPR" ON "SYSADM"."PS_ROLEXLATOPR" ("ROLEUSER")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_ROLEXLATOPR" ON "SYSADM"."PS_ROLEXLATOPR" ("ROLEUSER")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_665_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_666_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 666 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_ROLEXLATOPR" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_ROLEXLATOPR" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_666_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_667_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 667 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_ROLEXLATOPR" MODIFY ("DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_ROLEXLATOPR" MODIFY ("DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_667_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_668_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 668 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_ROLEXLATOPR" MODIFY ("EMAILID" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_ROLEXLATOPR" MODIFY ("EMAILID" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_668_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_669_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 669 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_ROLEXLATOPR" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_ROLEXLATOPR" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_669_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_670_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 670 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_ROLEXLATOPR" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_ROLEXLATOPR" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_670_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_671_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 671 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_ROLEXLATOPR"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_ROLEXLATOPR"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_671_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_672_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 672 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13105" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13105" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_672_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_673_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 673 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS4" from "SYSADM"."PS_ADDRESSES");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13105
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS4'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS4" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_ADDRESSES" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13105"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS4" from "SYSADM"."PS_ADDRESSES");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13105
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS4'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS4" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_ADDRESSES" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13105"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_673_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_674_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 674 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13105_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13105_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_674_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_675_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 675 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13105_IDX ON MGMT_DM_TT_13105(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13105_IDX ON MGMT_DM_TT_13105(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_675_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_676_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 676 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13106" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13106" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_676_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_677_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 677 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS3" from "SYSADM"."PS_ADDRESSES");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13106
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS3'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS3" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_ADDRESSES" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13106"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS3" from "SYSADM"."PS_ADDRESSES");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13106
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS3'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS3" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_ADDRESSES" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13106"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_677_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_678_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 678 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13106_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13106_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_678_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_679_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 679 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13106_IDX ON MGMT_DM_TT_13106(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13106_IDX ON MGMT_DM_TT_13106(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_679_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_680_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 680 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13108" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13108" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_680_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_681_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 681 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS2" from "SYSADM"."PS_ADDRESSES");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13108
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS2'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS2" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_ADDRESSES" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13108"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS2" from "SYSADM"."PS_ADDRESSES");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13108
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS2'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS2" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_ADDRESSES" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13108"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_681_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_682_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 682 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13108_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13108_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_682_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_683_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 683 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13108_IDX ON MGMT_DM_TT_13108(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13108_IDX ON MGMT_DM_TT_13108(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_683_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_684_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 684 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13110" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13110" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_684_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_685_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 685 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS1" from "SYSADM"."PS_ADDRESSES");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 6, 0);
    execute immediate ''create table MGMT_DM_TT_13110
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS1'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS1" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_ADDRESSES" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13110"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS1" from "SYSADM"."PS_ADDRESSES");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 6, 0);
    execute immediate ''create table MGMT_DM_TT_13110
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS1'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS1" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_ADDRESSES" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13110"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_685_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_686_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 686 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13110_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13110_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_686_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_687_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 687 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13110_IDX ON MGMT_DM_TT_13110(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13110_IDX ON MGMT_DM_TT_13110(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_687_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_688_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 688 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_ADDRESSES$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_ADDRESSES$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_688_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_689_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 689 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_ADDRESSES" RENAME TO "PS_ADDRESSES$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_ADDRESSES" RENAME TO "PS_ADDRESSES$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_689_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_690_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 690 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_ADDRESSES$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_ADDRESSES$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_690_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_691_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 691 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_ADDRESSES"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."ADDRESS_TYPE", s."EFFDT", s."EFF_STATUS", CAST(DECODE(TRIM(s."COUNTRY"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "COUNTRY", CAST(nvl(c5m13110.NEW_VAL, s."ADDRESS1") AS VARCHAR2(55 CHAR)) "ADDRESS1", CAST(nvl(c3m13108.NEW_VAL, s."ADDRESS2") AS VARCHAR2(55 CHAR)) "ADDRESS2", CAST(nvl(c1m13106.NEW_VAL, s."ADDRESS3") AS VARCHAR2(55 CHAR)) "ADDRESS3", CAST(nvl(c0m13105.NEW_VAL, s."ADDRESS4") AS VARCHAR2(55 CHAR)) "ADDRESS4", CAST(DECODE(TRIM(s."CITY"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "CITY", s."NUM1", s."NUM2", s."HOUSE_TYPE", s."ADDR_FIELD1", s."ADDR_FIELD2", s."ADDR_FIELD3", s."COUNTY", CAST(DECODE(TRIM(s."STATE"), NULL, '' '', ''DC'') as VARCHAR2(6 CHAR)) "STATE", s."POSTAL", s."GEO_CODE", s."IN_CITY_LIMIT", s."ADDRESS1_AC", s."ADDRESS2_AC", s."ADDRESS3_AC", s."CITY_AC", s."REG_REGION", s."LASTUPDDTTM", s."LASTUPDOPRID" FROM "SYSADM"."PS_ADDRESSES$DMASK"  s , MGMT_DM_TT_13105 c0m13105, MGMT_DM_TT_13106 c1m13106, MGMT_DM_TT_13108 c3m13108, MGMT_DM_TT_13110 c5m13110 WHERE s."ADDRESS4" = c0m13105.ORIG_VAL (+) AND NVL(c0m13105.delete_val,0) = 0 AND s."ADDRESS3" = c1m13106.ORIG_VAL (+) AND NVL(c1m13106.delete_val,0) = 0 AND s."ADDRESS2" = c3m13108.ORIG_VAL (+) AND NVL(c3m13108.delete_val,0) = 0 AND s."ADDRESS1" = c5m13110.ORIG_VAL (+) AND NVL(c5m13110.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_ADDRESSES"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."ADDRESS_TYPE", s."EFFDT", s."EFF_STATUS", CAST(DECODE(TRIM(s."COUNTRY"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "COUNTRY", CAST(nvl(c5m13110.NEW_VAL, s."ADDRESS1") AS VARCHAR2(55 CHAR)) "ADDRESS1", CAST(nvl(c3m13108.NEW_VAL, s."ADDRESS2") AS VARCHAR2(55 CHAR)) "ADDRESS2", CAST(nvl(c1m13106.NEW_VAL, s."ADDRESS3") AS VARCHAR2(55 CHAR)) "ADDRESS3", CAST(nvl(c0m13105.NEW_VAL, s."ADDRESS4") AS VARCHAR2(55 CHAR)) "ADDRESS4", CAST(DECODE(TRIM(s."CITY"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "CITY", s."NUM1", s."NUM2", s."HOUSE_TYPE", s."ADDR_FIELD1", s."ADDR_FIELD2", s."ADDR_FIELD3", s."COUNTY", CAST(DECODE(TRIM(s."STATE"), NULL, '' '', ''DC'') as VARCHAR2(6 CHAR)) "STATE", s."POSTAL", s."GEO_CODE", s."IN_CITY_LIMIT", s."ADDRESS1_AC", s."ADDRESS2_AC", s."ADDRESS3_AC", s."CITY_AC", s."REG_REGION", s."LASTUPDDTTM", s."LASTUPDOPRID" FROM "SYSADM"."PS_ADDRESSES$DMASK"  s , MGMT_DM_TT_13105 c0m13105, MGMT_DM_TT_13106 c1m13106, MGMT_DM_TT_13108 c3m13108, MGMT_DM_TT_13110 c5m13110 WHERE s."ADDRESS4" = c0m13105.ORIG_VAL (+) AND NVL(c0m13105.delete_val,0) = 0 AND s."ADDRESS3" = c1m13106.ORIG_VAL (+) AND NVL(c1m13106.delete_val,0) = 0 AND s."ADDRESS2" = c3m13108.ORIG_VAL (+) AND NVL(c3m13108.delete_val,0) = 0 AND s."ADDRESS1" = c5m13110.ORIG_VAL (+) AND NVL(c5m13110.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_691_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_692_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 692 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_ADDRESSES" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_ADDRESSES" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_692_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_693_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 693 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_ADDRESSES$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_ADDRESSES$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_693_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_694_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 694 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13105" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13105" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_694_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_695_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 695 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13106" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13106" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_695_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_696_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 696 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13108" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13108" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_696_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_697_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 697 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13110" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13110" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_697_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_698_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 698 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PSAADDRESSES" ON "SYSADM"."PS_ADDRESSES" ("EFFDT","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PSAADDRESSES" ON "SYSADM"."PS_ADDRESSES" ("EFFDT","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_698_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_699_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 699 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PSAADDRESSES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PSAADDRESSES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_699_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_700_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 700 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_ADDRESSES" ON "SYSADM"."PS_ADDRESSES" ("EMPLID","ADDRESS_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_ADDRESSES" ON "SYSADM"."PS_ADDRESSES" ("EMPLID","ADDRESS_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_700_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_701_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 701 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_ADDRESSES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_ADDRESSES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_701_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_702_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 702 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_ADDRESSES" MODIFY ("COUNTRY" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_ADDRESSES" MODIFY ("COUNTRY" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_702_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_703_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 703 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_ADDRESSES" MODIFY ("ADDRESS1" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_ADDRESSES" MODIFY ("ADDRESS1" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_703_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_704_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 704 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_ADDRESSES" MODIFY ("ADDRESS2" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_ADDRESSES" MODIFY ("ADDRESS2" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_704_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_705_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 705 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_ADDRESSES" MODIFY ("ADDRESS3" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_ADDRESSES" MODIFY ("ADDRESS3" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_705_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_706_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 706 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_ADDRESSES" MODIFY ("ADDRESS4" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_ADDRESSES" MODIFY ("ADDRESS4" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_706_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_707_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 707 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_ADDRESSES" MODIFY ("CITY" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_ADDRESSES" MODIFY ("CITY" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_707_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_708_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 708 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_ADDRESSES" MODIFY ("STATE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_ADDRESSES" MODIFY ("STATE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_708_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_709_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 709 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_ADDRESSES" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_ADDRESSES" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_709_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_710_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 710 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_ADDRESSES" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_ADDRESSES" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_710_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_711_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 711 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_ADDRESSES"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_ADDRESSES"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_711_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_712_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 712 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13115" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13115" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_712_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_713_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 713 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "FIRST_NAME" from "SYSADM"."PS_DEP_BEN_NAME");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "HFN_FIRST_NAME" from "MASK"."HASH_FIRST_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13115
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "FIRST_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BEN_NAME" ) group by orig_val) s
    ,(select rownum rn, "HFN_FIRST_NAME" new_val from (select distinct "HFN_FIRST_NAME" from "MASK"."HASH_FIRST_NAME" order by "HFN_FIRST_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13115"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "FIRST_NAME" from "SYSADM"."PS_DEP_BEN_NAME");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "HFN_FIRST_NAME" from "MASK"."HASH_FIRST_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13115
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "FIRST_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BEN_NAME" ) group by orig_val) s
    ,(select rownum rn, "HFN_FIRST_NAME" new_val from (select distinct "HFN_FIRST_NAME" from "MASK"."HASH_FIRST_NAME" order by "HFN_FIRST_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13115"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_713_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_714_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 714 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13115_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13115_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_714_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_715_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 715 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13115_IDX ON MGMT_DM_TT_13115(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13115_IDX ON MGMT_DM_TT_13115(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_715_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_716_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 716 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13117" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13117" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_716_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_717_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 717 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "LAST_NAME" from "SYSADM"."PS_DEP_BEN_NAME");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "HLN_LAST_NAME" from "MASK"."HASH_LAST_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13117
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "LAST_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BEN_NAME" ) group by orig_val) s
    ,(select rownum rn, "HLN_LAST_NAME" new_val from (select distinct "HLN_LAST_NAME" from "MASK"."HASH_LAST_NAME" order by "HLN_LAST_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13117"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "LAST_NAME" from "SYSADM"."PS_DEP_BEN_NAME");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "HLN_LAST_NAME" from "MASK"."HASH_LAST_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13117
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "LAST_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_DEP_BEN_NAME" ) group by orig_val) s
    ,(select rownum rn, "HLN_LAST_NAME" new_val from (select distinct "HLN_LAST_NAME" from "MASK"."HASH_LAST_NAME" order by "HLN_LAST_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13117"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_717_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_718_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 718 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13117_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13117_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_718_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_719_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 719 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13117_IDX ON MGMT_DM_TT_13117(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13117_IDX ON MGMT_DM_TT_13117(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_719_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_720_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 720 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_DEP_BEN_NAME$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_DEP_BEN_NAME$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_720_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_721_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 721 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" RENAME TO "PS_DEP_BEN_NAME$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" RENAME TO "PS_DEP_BEN_NAME$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_721_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_722_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 722 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_722_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_723_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 723 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_DEP_BEN_NAME"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."DEPENDENT_BENEF", s."EFFDT", s."COUNTRY_NM_FORMAT", CAST(DECODE(TRIM(s."NAME"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME")) as VARCHAR2(50 CHAR)) "NAME", s."NAME_INITIALS", s."NAME_PREFIX", s."NAME_SUFFIX", s."NAME_ROYAL_PREFIX", s."NAME_ROYAL_SUFFIX", s."NAME_TITLE", CAST(DECODE(TRIM(s."LAST_NAME_SRCH"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."LAST_NAME_SRCH")) as VARCHAR2(30 CHAR)) "LAST_NAME_SRCH", CAST(DECODE(TRIM(s."FIRST_NAME_SRCH"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."FIRST_NAME_SRCH")) as VARCHAR2(30 CHAR)) "FIRST_NAME_SRCH", CAST(nvl(c5m13117.NEW_VAL, s."LAST_NAME") AS VARCHAR2(30 CHAR)) "LAST_NAME", CAST(nvl(c3m13115.NEW_VAL, s."FIRST_NAME") AS VARCHAR2(30 CHAR)) "FIRST_NAME", CAST(DECODE(TRIM(s."MIDDLE_NAME"), NULL, '' '', ''NMN'') as VARCHAR2(30 CHAR)) "MIDDLE_NAME", s."SECOND_LAST_NAME", s."SECOND_LAST_SRCH", s."NAME_AC", s."PREF_FIRST_NAME", s."PARTNER_LAST_NAME", s."PARTNER_ROY_PREFIX", s."LAST_NAME_PREF_NLD", CAST(DECODE(TRIM(s."NAME_DISPLAY"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME_DISPLAY")) as VARCHAR2(50 CHAR)) "NAME_DISPLAY", CAST(DECODE(TRIM(s."NAME_FORMAL"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME_FORMAL")) as VARCHAR2(60 CHAR)) "NAME_FORMAL", s."BEN_ENTITY_NAME", s."BEN_TAX_ID", s."BEN_DOC_ID", s."BEN_DOC_DATE" FROM "SYSADM"."PS_DEP_BEN_NAME$DMASK"  s , MGMT_DM_TT_13115 c3m13115, MGMT_DM_TT_13117 c5m13117 WHERE s."FIRST_NAME" = c3m13115.ORIG_VAL (+) AND NVL(c3m13115.delete_val,0) = 0 AND s."LAST_NAME" = c5m13117.ORIG_VAL (+) AND NVL(c5m13117.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_DEP_BEN_NAME"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."DEPENDENT_BENEF", s."EFFDT", s."COUNTRY_NM_FORMAT", CAST(DECODE(TRIM(s."NAME"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME")) as VARCHAR2(50 CHAR)) "NAME", s."NAME_INITIALS", s."NAME_PREFIX", s."NAME_SUFFIX", s."NAME_ROYAL_PREFIX", s."NAME_ROYAL_SUFFIX", s."NAME_TITLE", CAST(DECODE(TRIM(s."LAST_NAME_SRCH"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."LAST_NAME_SRCH")) as VARCHAR2(30 CHAR)) "LAST_NAME_SRCH", CAST(DECODE(TRIM(s."FIRST_NAME_SRCH"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."FIRST_NAME_SRCH")) as VARCHAR2(30 CHAR)) "FIRST_NAME_SRCH", CAST(nvl(c5m13117.NEW_VAL, s."LAST_NAME") AS VARCHAR2(30 CHAR)) "LAST_NAME", CAST(nvl(c3m13115.NEW_VAL, s."FIRST_NAME") AS VARCHAR2(30 CHAR)) "FIRST_NAME", CAST(DECODE(TRIM(s."MIDDLE_NAME"), NULL, '' '', ''NMN'') as VARCHAR2(30 CHAR)) "MIDDLE_NAME", s."SECOND_LAST_NAME", s."SECOND_LAST_SRCH", s."NAME_AC", s."PREF_FIRST_NAME", s."PARTNER_LAST_NAME", s."PARTNER_ROY_PREFIX", s."LAST_NAME_PREF_NLD", CAST(DECODE(TRIM(s."NAME_DISPLAY"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME_DISPLAY")) as VARCHAR2(50 CHAR)) "NAME_DISPLAY", CAST(DECODE(TRIM(s."NAME_FORMAL"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME_FORMAL")) as VARCHAR2(60 CHAR)) "NAME_FORMAL", s."BEN_ENTITY_NAME", s."BEN_TAX_ID", s."BEN_DOC_ID", s."BEN_DOC_DATE" FROM "SYSADM"."PS_DEP_BEN_NAME$DMASK"  s , MGMT_DM_TT_13115 c3m13115, MGMT_DM_TT_13117 c5m13117 WHERE s."FIRST_NAME" = c3m13115.ORIG_VAL (+) AND NVL(c3m13115.delete_val,0) = 0 AND s."LAST_NAME" = c5m13117.ORIG_VAL (+) AND NVL(c5m13117.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_723_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_724_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 724 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_724_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_725_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 725 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_DEP_BEN_NAME$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_DEP_BEN_NAME$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_725_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_726_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 726 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13115" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13115" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_726_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_727_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 727 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13117" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13117" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_727_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_728_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 728 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS0DEP_BEN_NAME" ON "SYSADM"."PS_DEP_BEN_NAME" ("NAME","EMPLID","DEPENDENT_BENEF","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS0DEP_BEN_NAME" ON "SYSADM"."PS_DEP_BEN_NAME" ("NAME","EMPLID","DEPENDENT_BENEF","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_728_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_729_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 729 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS0DEP_BEN_NAME" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS0DEP_BEN_NAME" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_729_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_730_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 730 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS1DEP_BEN_NAME" ON "SYSADM"."PS_DEP_BEN_NAME" ("LAST_NAME_SRCH","EMPLID","DEPENDENT_BENEF","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS1DEP_BEN_NAME" ON "SYSADM"."PS_DEP_BEN_NAME" ("LAST_NAME_SRCH","EMPLID","DEPENDENT_BENEF","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_730_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_731_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 731 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS1DEP_BEN_NAME" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS1DEP_BEN_NAME" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_731_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_732_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 732 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS2DEP_BEN_NAME" ON "SYSADM"."PS_DEP_BEN_NAME" ("FIRST_NAME_SRCH","EMPLID","DEPENDENT_BENEF","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS2DEP_BEN_NAME" ON "SYSADM"."PS_DEP_BEN_NAME" ("FIRST_NAME_SRCH","EMPLID","DEPENDENT_BENEF","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_732_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_733_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 733 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS2DEP_BEN_NAME" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS2DEP_BEN_NAME" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_733_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_734_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 734 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS3DEP_BEN_NAME" ON "SYSADM"."PS_DEP_BEN_NAME" ("SECOND_LAST_SRCH","EMPLID","DEPENDENT_BENEF","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS3DEP_BEN_NAME" ON "SYSADM"."PS_DEP_BEN_NAME" ("SECOND_LAST_SRCH","EMPLID","DEPENDENT_BENEF","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_734_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_735_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 735 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS3DEP_BEN_NAME" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS3DEP_BEN_NAME" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_735_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_736_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 736 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS4DEP_BEN_NAME" ON "SYSADM"."PS_DEP_BEN_NAME" ("NAME_AC","EMPLID","DEPENDENT_BENEF","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS4DEP_BEN_NAME" ON "SYSADM"."PS_DEP_BEN_NAME" ("NAME_AC","EMPLID","DEPENDENT_BENEF","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_736_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_737_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 737 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS4DEP_BEN_NAME" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS4DEP_BEN_NAME" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_737_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_738_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 738 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_DEP_BEN_NAME" ON "SYSADM"."PS_DEP_BEN_NAME" ("EMPLID","DEPENDENT_BENEF","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_DEP_BEN_NAME" ON "SYSADM"."PS_DEP_BEN_NAME" ("EMPLID","DEPENDENT_BENEF","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_738_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_739_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 739 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_DEP_BEN_NAME" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_DEP_BEN_NAME" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_739_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_740_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 740 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" MODIFY ("NAME" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" MODIFY ("NAME" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_740_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_741_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 741 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" MODIFY ("LAST_NAME_SRCH" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" MODIFY ("LAST_NAME_SRCH" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_741_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_742_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 742 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" MODIFY ("FIRST_NAME_SRCH" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" MODIFY ("FIRST_NAME_SRCH" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_742_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_743_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 743 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" MODIFY ("LAST_NAME" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" MODIFY ("LAST_NAME" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_743_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_744_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 744 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" MODIFY ("FIRST_NAME" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" MODIFY ("FIRST_NAME" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_744_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_745_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 745 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" MODIFY ("MIDDLE_NAME" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" MODIFY ("MIDDLE_NAME" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_745_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_746_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 746 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" MODIFY ("NAME_DISPLAY" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" MODIFY ("NAME_DISPLAY" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_746_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_747_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 747 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" MODIFY ("NAME_FORMAL" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_DEP_BEN_NAME" MODIFY ("NAME_FORMAL" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_747_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_748_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 748 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_DEP_BEN_NAME" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_DEP_BEN_NAME" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_748_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_749_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 749 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_DEP_BEN_NAME" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_DEP_BEN_NAME" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_749_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_750_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 750 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_DEP_BEN_NAME"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_DEP_BEN_NAME"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_750_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_751_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 751 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13120" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13120" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_751_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_752_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 752 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "FIRST_NAME" from "SYSADM"."PS_NAMES");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "HFN_FIRST_NAME" from "MASK"."HASH_FIRST_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13120
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "FIRST_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_NAMES" ) group by orig_val) s
    ,(select rownum rn, "HFN_FIRST_NAME" new_val from (select distinct "HFN_FIRST_NAME" from "MASK"."HASH_FIRST_NAME" order by "HFN_FIRST_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13120"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "FIRST_NAME" from "SYSADM"."PS_NAMES");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "HFN_FIRST_NAME" from "MASK"."HASH_FIRST_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13120
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "FIRST_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_NAMES" ) group by orig_val) s
    ,(select rownum rn, "HFN_FIRST_NAME" new_val from (select distinct "HFN_FIRST_NAME" from "MASK"."HASH_FIRST_NAME" order by "HFN_FIRST_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13120"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_752_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_753_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 753 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13120_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13120_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_753_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_754_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 754 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13120_IDX ON MGMT_DM_TT_13120(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13120_IDX ON MGMT_DM_TT_13120(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_754_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_755_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 755 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13125" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13125" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_755_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_756_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 756 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "LAST_NAME" from "SYSADM"."PS_NAMES");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "HLN_LAST_NAME" from "MASK"."HASH_LAST_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13125
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "LAST_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_NAMES" ) group by orig_val) s
    ,(select rownum rn, "HLN_LAST_NAME" new_val from (select distinct "HLN_LAST_NAME" from "MASK"."HASH_LAST_NAME" order by "HLN_LAST_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13125"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "LAST_NAME" from "SYSADM"."PS_NAMES");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "HLN_LAST_NAME" from "MASK"."HASH_LAST_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13125
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "LAST_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_NAMES" ) group by orig_val) s
    ,(select rownum rn, "HLN_LAST_NAME" new_val from (select distinct "HLN_LAST_NAME" from "MASK"."HASH_LAST_NAME" order by "HLN_LAST_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13125"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_756_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_757_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 757 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13125_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13125_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_757_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_758_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 758 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13125_IDX ON MGMT_DM_TT_13125(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13125_IDX ON MGMT_DM_TT_13125(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_758_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_759_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 759 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_NAMES$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_NAMES$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_759_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_760_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 760 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_NAMES" RENAME TO "PS_NAMES$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_NAMES" RENAME TO "PS_NAMES$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_760_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_761_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 761 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_NAMES$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_NAMES$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_761_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_762_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 762 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_NAMES"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."NAME_TYPE", s."EFFDT", s."EFF_STATUS", s."COUNTRY_NM_FORMAT", CAST(DECODE(TRIM(s."NAME"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME")) as VARCHAR2(50 CHAR)) "NAME", s."NAME_INITIALS", s."NAME_PREFIX", s."NAME_SUFFIX", s."NAME_ROYAL_PREFIX", s."NAME_ROYAL_SUFFIX", s."NAME_TITLE", CAST(DECODE(TRIM(s."LAST_NAME_SRCH"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."LAST_NAME_SRCH")) as VARCHAR2(30 CHAR)) "LAST_NAME_SRCH", CAST(DECODE(TRIM(s."FIRST_NAME_SRCH"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."FIRST_NAME_SRCH")) as VARCHAR2(30 CHAR)) "FIRST_NAME_SRCH", CAST(nvl(c5m13125.NEW_VAL, s."LAST_NAME") AS VARCHAR2(30 CHAR)) "LAST_NAME", CAST(nvl(c0m13120.NEW_VAL, s."FIRST_NAME") AS VARCHAR2(30 CHAR)) "FIRST_NAME", CAST(DECODE(TRIM(s."MIDDLE_NAME"), NULL, '' '', ''NMN'') as VARCHAR2(30 CHAR)) "MIDDLE_NAME", s."SECOND_LAST_NAME", s."SECOND_LAST_SRCH", s."NAME_AC", s."PREF_FIRST_NAME", s."PARTNER_LAST_NAME", s."PARTNER_ROY_PREFIX", s."LAST_NAME_PREF_NLD", CAST(DECODE(TRIM(s."NAME_DISPLAY"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME_DISPLAY")) as VARCHAR2(50 CHAR)) "NAME_DISPLAY", CAST(DECODE(TRIM(s."NAME_FORMAL"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME_FORMAL")) as VARCHAR2(60 CHAR)) "NAME_FORMAL", CAST(DECODE(TRIM(s."NAME_DISPLAY_SRCH"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME_DISPLAY_SRCH")) as VARCHAR2(50 CHAR)) "NAME_DISPLAY_SRCH", s."LASTUPDDTTM", s."LASTUPDOPRID", s."PREF_FIRST_NM_SRCH" FROM "SYSADM"."PS_NAMES$DMASK"  s , MGMT_DM_TT_13120 c0m13120, MGMT_DM_TT_13125 c5m13125 WHERE s."FIRST_NAME" = c0m13120.ORIG_VAL (+) AND NVL(c0m13120.delete_val,0) = 0 AND s."LAST_NAME" = c5m13125.ORIG_VAL (+) AND NVL(c5m13125.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_NAMES"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."NAME_TYPE", s."EFFDT", s."EFF_STATUS", s."COUNTRY_NM_FORMAT", CAST(DECODE(TRIM(s."NAME"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME")) as VARCHAR2(50 CHAR)) "NAME", s."NAME_INITIALS", s."NAME_PREFIX", s."NAME_SUFFIX", s."NAME_ROYAL_PREFIX", s."NAME_ROYAL_SUFFIX", s."NAME_TITLE", CAST(DECODE(TRIM(s."LAST_NAME_SRCH"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."LAST_NAME_SRCH")) as VARCHAR2(30 CHAR)) "LAST_NAME_SRCH", CAST(DECODE(TRIM(s."FIRST_NAME_SRCH"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."FIRST_NAME_SRCH")) as VARCHAR2(30 CHAR)) "FIRST_NAME_SRCH", CAST(nvl(c5m13125.NEW_VAL, s."LAST_NAME") AS VARCHAR2(30 CHAR)) "LAST_NAME", CAST(nvl(c0m13120.NEW_VAL, s."FIRST_NAME") AS VARCHAR2(30 CHAR)) "FIRST_NAME", CAST(DECODE(TRIM(s."MIDDLE_NAME"), NULL, '' '', ''NMN'') as VARCHAR2(30 CHAR)) "MIDDLE_NAME", s."SECOND_LAST_NAME", s."SECOND_LAST_SRCH", s."NAME_AC", s."PREF_FIRST_NAME", s."PARTNER_LAST_NAME", s."PARTNER_ROY_PREFIX", s."LAST_NAME_PREF_NLD", CAST(DECODE(TRIM(s."NAME_DISPLAY"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME_DISPLAY")) as VARCHAR2(50 CHAR)) "NAME_DISPLAY", CAST(DECODE(TRIM(s."NAME_FORMAL"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME_FORMAL")) as VARCHAR2(60 CHAR)) "NAME_FORMAL", CAST(DECODE(TRIM(s."NAME_DISPLAY_SRCH"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME_DISPLAY_SRCH")) as VARCHAR2(50 CHAR)) "NAME_DISPLAY_SRCH", s."LASTUPDDTTM", s."LASTUPDOPRID", s."PREF_FIRST_NM_SRCH" FROM "SYSADM"."PS_NAMES$DMASK"  s , MGMT_DM_TT_13120 c0m13120, MGMT_DM_TT_13125 c5m13125 WHERE s."FIRST_NAME" = c0m13120.ORIG_VAL (+) AND NVL(c0m13120.delete_val,0) = 0 AND s."LAST_NAME" = c5m13125.ORIG_VAL (+) AND NVL(c5m13125.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_762_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_763_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 763 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_NAMES" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_NAMES" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_763_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_764_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 764 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_NAMES$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_NAMES$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_764_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_765_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 765 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13120" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13120" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_765_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_766_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 766 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13125" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13125" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_766_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_767_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 767 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS0NAMES" ON "SYSADM"."PS_NAMES" ("NAME","EMPLID","NAME_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS0NAMES" ON "SYSADM"."PS_NAMES" ("NAME","EMPLID","NAME_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_767_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_768_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 768 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS0NAMES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS0NAMES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_768_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_769_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 769 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS1NAMES" ON "SYSADM"."PS_NAMES" ("LAST_NAME_SRCH","EMPLID","NAME_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS1NAMES" ON "SYSADM"."PS_NAMES" ("LAST_NAME_SRCH","EMPLID","NAME_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_769_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_770_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 770 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS1NAMES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS1NAMES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_770_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_771_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 771 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS2NAMES" ON "SYSADM"."PS_NAMES" ("FIRST_NAME_SRCH","EMPLID","NAME_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS2NAMES" ON "SYSADM"."PS_NAMES" ("FIRST_NAME_SRCH","EMPLID","NAME_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_771_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_772_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 772 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS2NAMES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS2NAMES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_772_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_773_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 773 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS3NAMES" ON "SYSADM"."PS_NAMES" ("SECOND_LAST_SRCH","EMPLID","NAME_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS3NAMES" ON "SYSADM"."PS_NAMES" ("SECOND_LAST_SRCH","EMPLID","NAME_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_773_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_774_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 774 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS3NAMES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS3NAMES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_774_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_775_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 775 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS4NAMES" ON "SYSADM"."PS_NAMES" ("NAME_AC","EMPLID","NAME_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS4NAMES" ON "SYSADM"."PS_NAMES" ("NAME_AC","EMPLID","NAME_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_775_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_776_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 776 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS4NAMES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS4NAMES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_776_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_777_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 777 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS5NAMES" ON "SYSADM"."PS_NAMES" ("NAME_DISPLAY_SRCH","EMPLID","NAME_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS5NAMES" ON "SYSADM"."PS_NAMES" ("NAME_DISPLAY_SRCH","EMPLID","NAME_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_777_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_778_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 778 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS5NAMES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS5NAMES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_778_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_779_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 779 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PSANAMES" ON "SYSADM"."PS_NAMES" ("LAST_NAME_SRCH","NAME_TYPE","EFFDT","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PSANAMES" ON "SYSADM"."PS_NAMES" ("LAST_NAME_SRCH","NAME_TYPE","EFFDT","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_779_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_780_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 780 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PSANAMES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PSANAMES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_780_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_781_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 781 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PSBNAMES" ON "SYSADM"."PS_NAMES" ("NAME_DISPLAY_SRCH","NAME_TYPE","EFFDT","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PSBNAMES" ON "SYSADM"."PS_NAMES" ("NAME_DISPLAY_SRCH","NAME_TYPE","EFFDT","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_781_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_782_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 782 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PSBNAMES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PSBNAMES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_782_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_783_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 783 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PSCNAMES" ON "SYSADM"."PS_NAMES" ("PREF_FIRST_NM_SRCH","EMPLID","NAME_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PSCNAMES" ON "SYSADM"."PS_NAMES" ("PREF_FIRST_NM_SRCH","EMPLID","NAME_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_783_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_784_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 784 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PSCNAMES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PSCNAMES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_784_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_785_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 785 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PSDNAMES" ON "SYSADM"."PS_NAMES" ("PREF_FIRST_NM_SRCH","NAME_TYPE","EFFDT","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PSDNAMES" ON "SYSADM"."PS_NAMES" ("PREF_FIRST_NM_SRCH","NAME_TYPE","EFFDT","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_785_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_786_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 786 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PSDNAMES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PSDNAMES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_786_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_787_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 787 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_NAMES" ON "SYSADM"."PS_NAMES" ("EMPLID","NAME_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_NAMES" ON "SYSADM"."PS_NAMES" ("EMPLID","NAME_TYPE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_787_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_788_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 788 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_NAMES" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_NAMES" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_788_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_789_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 789 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("NAME" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("NAME" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_789_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_790_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 790 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("LAST_NAME_SRCH" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("LAST_NAME_SRCH" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_790_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_791_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 791 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("FIRST_NAME_SRCH" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("FIRST_NAME_SRCH" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_791_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_792_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 792 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("LAST_NAME" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("LAST_NAME" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_792_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_793_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 793 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("FIRST_NAME" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("FIRST_NAME" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_793_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_794_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 794 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("MIDDLE_NAME" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("MIDDLE_NAME" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_794_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_795_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 795 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("NAME_DISPLAY" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("NAME_DISPLAY" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_795_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_796_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 796 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("NAME_FORMAL" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("NAME_FORMAL" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_796_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_797_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 797 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("NAME_DISPLAY_SRCH" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_NAMES" MODIFY ("NAME_DISPLAY_SRCH" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_797_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_798_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 798 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_NAMES" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_NAMES" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_798_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_799_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 799 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_NAMES" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_NAMES" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_799_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_800_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 800 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_NAMES"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_NAMES"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_800_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_801_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 801 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13136" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13136" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_801_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_802_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 802 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS4_OTHER" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    execute immediate ''create table MGMT_DM_TT_13136
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS4_OTHER'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS4_OTHER" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13136"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS4_OTHER" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    execute immediate ''create table MGMT_DM_TT_13136
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS4_OTHER'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS4_OTHER" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13136"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_802_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_803_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 803 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13136_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13136_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_803_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_804_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 804 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13136_IDX ON MGMT_DM_TT_13136(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13136_IDX ON MGMT_DM_TT_13136(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_804_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_805_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 805 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13137" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13137" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_805_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_806_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 806 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS3_OTHER" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    execute immediate ''create table MGMT_DM_TT_13137
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS3_OTHER'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS3_OTHER" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13137"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS3_OTHER" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    execute immediate ''create table MGMT_DM_TT_13137
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS3_OTHER'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS3_OTHER" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13137"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_806_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_807_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 807 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13137_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13137_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_807_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_808_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 808 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13137_IDX ON MGMT_DM_TT_13137(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13137_IDX ON MGMT_DM_TT_13137(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_808_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_809_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 809 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13139" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13139" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_809_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_810_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 810 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "DT_OF_DEATH" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    execute immediate ''create table MGMT_DM_TT_13139
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS DATE) orig_val, CAST(null AS DATE) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_birthday(rid, ''''DT_OF_DEATH'''', orig_val)
         AS DATE)
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "DT_OF_DEATH" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13139"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "DT_OF_DEATH" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    execute immediate ''create table MGMT_DM_TT_13139
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS DATE) orig_val, CAST(null AS DATE) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_birthday(rid, ''''DT_OF_DEATH'''', orig_val)
         AS DATE)
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "DT_OF_DEATH" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13139"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_810_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_811_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 811 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13139_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13139_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_811_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_812_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 812 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13139_IDX ON MGMT_DM_TT_13139(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13139_IDX ON MGMT_DM_TT_13139(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_812_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_813_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 813 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13140" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13140" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_813_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_814_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 814 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS2_OTHER" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13140
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS2_OTHER'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS2_OTHER" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13140"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS2_OTHER" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13140
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS2_OTHER'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS2_OTHER" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13140"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_814_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_815_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 815 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13140_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13140_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_815_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_816_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 816 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13140_IDX ON MGMT_DM_TT_13140(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13140_IDX ON MGMT_DM_TT_13140(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_816_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_817_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 817 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13146" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13146" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_817_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_818_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 818 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "FIRST_NAME" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "HFN_FIRST_NAME" from "MASK"."HASH_FIRST_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13146
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "FIRST_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
    ,(select rownum rn, "HFN_FIRST_NAME" new_val from (select distinct "HFN_FIRST_NAME" from "MASK"."HASH_FIRST_NAME" order by "HFN_FIRST_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13146"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "FIRST_NAME" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "HFN_FIRST_NAME" from "MASK"."HASH_FIRST_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13146
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "FIRST_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
    ,(select rownum rn, "HFN_FIRST_NAME" new_val from (select distinct "HFN_FIRST_NAME" from "MASK"."HASH_FIRST_NAME" order by "HFN_FIRST_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13146"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_818_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_819_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 819 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13146_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13146_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_819_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_820_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 820 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13146_IDX ON MGMT_DM_TT_13146(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13146_IDX ON MGMT_DM_TT_13146(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_820_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_821_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 821 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13148" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13148" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_821_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_822_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 822 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS4" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    execute immediate ''create table MGMT_DM_TT_13148
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS4'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS4" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13148"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS4" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    execute immediate ''create table MGMT_DM_TT_13148
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS4'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS4" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13148"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_822_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_823_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 823 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13148_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13148_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_823_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_824_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 824 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13148_IDX ON MGMT_DM_TT_13148(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13148_IDX ON MGMT_DM_TT_13148(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_824_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_825_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 825 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13149" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13149" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_825_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_826_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 826 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS3" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13149
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS3'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS3" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13149"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS3" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13149
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS3'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS3" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13149"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_826_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_827_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 827 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13149_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13149_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_827_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_828_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 828 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13149_IDX ON MGMT_DM_TT_13149(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13149_IDX ON MGMT_DM_TT_13149(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_828_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_829_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 829 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13150" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13150" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_829_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_830_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 830 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS2" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13150
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS2'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS2" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13150"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS2" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13150
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS2'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS2" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13150"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_830_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_831_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 831 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13150_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13150_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_831_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_832_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 832 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13150_IDX ON MGMT_DM_TT_13150(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13150_IDX ON MGMT_DM_TT_13150(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_832_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_833_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 833 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13151" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13151" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_833_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_834_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 834 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS1" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13151
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS1'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS1" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13151"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS1" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13151
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS1'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS1" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13151"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_834_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_835_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 835 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13151_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13151_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_835_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_836_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 836 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13151_IDX ON MGMT_DM_TT_13151(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13151_IDX ON MGMT_DM_TT_13151(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_836_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_837_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 837 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13152" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13152" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_837_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_838_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 838 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "BIRTHDATE" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13152
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS DATE) orig_val, CAST(null AS DATE) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_birthday(rid, ''''BIRTHDATE'''', orig_val)
         AS DATE)
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "BIRTHDATE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13152"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "BIRTHDATE" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13152
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS DATE) orig_val, CAST(null AS DATE) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_birthday(rid, ''''BIRTHDATE'''', orig_val)
         AS DATE)
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "BIRTHDATE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13152"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_838_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_839_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 839 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13152_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13152_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_839_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_840_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 840 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13152_IDX ON MGMT_DM_TT_13152(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13152_IDX ON MGMT_DM_TT_13152(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_840_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_841_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 841 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13153" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13153" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_841_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_842_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 842 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "LAST_NAME" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "HLN_LAST_NAME" from "MASK"."HASH_LAST_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13153
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "LAST_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
    ,(select rownum rn, "HLN_LAST_NAME" new_val from (select distinct "HLN_LAST_NAME" from "MASK"."HASH_LAST_NAME" order by "HLN_LAST_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13153"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "LAST_NAME" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "HLN_LAST_NAME" from "MASK"."HASH_LAST_NAME");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13153
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "LAST_NAME" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
    ,(select rownum rn, "HLN_LAST_NAME" new_val from (select distinct "HLN_LAST_NAME" from "MASK"."HASH_LAST_NAME" order by "HLN_LAST_NAME")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13153"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_842_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_843_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 843 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13153_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13153_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_843_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_844_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 844 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13153_IDX ON MGMT_DM_TT_13153(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13153_IDX ON MGMT_DM_TT_13153(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_844_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_845_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 845 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13155" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13155" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_845_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_846_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 846 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "PHONE" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13155
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(24 CHAR)) orig_val, CAST(null AS VARCHAR2(24 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_phone(rid, ''''PHONE'''', orig_val)
         AS VARCHAR2(24 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "PHONE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13155"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "PHONE" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13155
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(24 CHAR)) orig_val, CAST(null AS VARCHAR2(24 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_phone(rid, ''''PHONE'''', orig_val)
         AS VARCHAR2(24 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "PHONE" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13155"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_846_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_847_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 847 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13155_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13155_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_847_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_848_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 848 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13155_IDX ON MGMT_DM_TT_13155(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13155_IDX ON MGMT_DM_TT_13155(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_848_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_849_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 849 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13156" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13156" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_849_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_850_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 850 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS1_OTHER" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13156
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS1_OTHER'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS1_OTHER" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13156"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "ADDRESS1_OTHER" from "SYSADM"."PS_PERSONAL_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    execute immediate ''create table MGMT_DM_TT_13156
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(55 CHAR)) orig_val, CAST(null AS VARCHAR2(55 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_street(rid, ''''ADDRESS1_OTHER'''', orig_val)
         AS VARCHAR2(55 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "ADDRESS1_OTHER" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_PERSONAL_DATA" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13156"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_850_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_851_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 851 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13156_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13156_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_851_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_852_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 852 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13156_IDX ON MGMT_DM_TT_13156(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13156_IDX ON MGMT_DM_TT_13156(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_852_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_853_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 853 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_PERSONAL_DATA$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_PERSONAL_DATA$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_853_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_854_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 854 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" RENAME TO "PS_PERSONAL_DATA$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" RENAME TO "PS_PERSONAL_DATA$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_854_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_855_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 855 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_PERSONAL_DATA$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_PERSONAL_DATA$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_855_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_856_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 856 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_PERSONAL_DATA"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."COUNTRY_NM_FORMAT", CAST(DECODE(TRIM(s."NAME"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME")) as VARCHAR2(50 CHAR)) "NAME", s."NAME_INITIALS", s."NAME_PREFIX", s."NAME_SUFFIX", s."NAME_ROYAL_PREFIX", s."NAME_ROYAL_SUFFIX", s."NAME_TITLE", CAST(DECODE(TRIM(s."LAST_NAME_SRCH"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."LAST_NAME_SRCH")) as VARCHAR2(30 CHAR)) "LAST_NAME_SRCH", CAST(DECODE(TRIM(s."FIRST_NAME_SRCH"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."FIRST_NAME_SRCH")) as VARCHAR2(30 CHAR)) "FIRST_NAME_SRCH", CAST(nvl(c24m13153.NEW_VAL, s."LAST_NAME") AS VARCHAR2(30 CHAR)) "LAST_NAME", CAST(nvl(c17m13146.NEW_VAL, s."FIRST_NAME") AS VARCHAR2(30 CHAR)) "FIRST_NAME", CAST(DECODE(TRIM(s."MIDDLE_NAME"), NULL, '' '', ''NMN'') as VARCHAR2(30 CHAR)) "MIDDLE_NAME", s."SECOND_LAST_NAME", s."SECOND_LAST_SRCH", s."NAME_AC", s."PREF_FIRST_NAME", s."PARTNER_LAST_NAME", s."PARTNER_ROY_PREFIX", s."LAST_NAME_PREF_NLD", CAST(DECODE(TRIM(s."NAME_DISPLAY"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME_DISPLAY")) as VARCHAR2(50 CHAR)) "NAME_DISPLAY", CAST(DECODE(TRIM(s."NAME_FORMAL"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME_FORMAL")) as VARCHAR2(60 CHAR)) "NAME_FORMAL", CAST(DECODE(TRIM(s."COUNTRY"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "COUNTRY", CAST(nvl(c22m13151.NEW_VAL, s."ADDRESS1") AS VARCHAR2(55 CHAR)) "ADDRESS1", CAST(nvl(c21m13150.NEW_VAL, s."ADDRESS2") AS VARCHAR2(55 CHAR)) "ADDRESS2", CAST(nvl(c20m13149.NEW_VAL, s."ADDRESS3") AS VARCHAR2(55 CHAR)) "ADDRESS3", CAST(nvl(c19m13148.NEW_VAL, s."ADDRESS4") AS VARCHAR2(55 CHAR)) "ADDRESS4", CAST(DECODE(TRIM(s."CITY"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "CITY", s."NUM1", s."NUM2", s."HOUSE_TYPE", s."ADDR_FIELD1", s."ADDR_FIELD2", s."ADDR_FIELD3", s."COUNTY", CAST(DECODE(TRIM(s."STATE"), NULL, '' '', ''DC'') as VARCHAR2(6 CHAR)) "STATE", s."POSTAL", s."GEO_CODE", s."IN_CITY_LIMIT", s."SEX", s."MAR_STATUS", s."MAR_STATUS_DT", c23m13152.NEW_VAL "BIRTHDATE", CAST(DECODE(TRIM(s."BIRTHPLACE"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "BIRTHPLACE", CAST(DECODE(TRIM(s."BIRTHCOUNTRY"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "BIRTHCOUNTRY", CAST(DECODE(TRIM(s."BIRTHSTATE"), NULL, '' '', ''DC'') as VARCHAR2(6 CHAR)) "BIRTHSTATE",'||
' c10m13139.NEW_VAL "DT_OF_DEATH", s."HIGHEST_EDUC_LVL", s."FT_STUDENT", s."LANG_CD", s."ALTER_EMPLID", s."ADDRESS1_AC", s."ADDRESS2_AC", s."ADDRESS3_AC", s."CITY_AC", CAST(DECODE(TRIM(s."COUNTRY_OTHER"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "COUNTRY_OTHER", CAST(nvl(c27m13156.NEW_VAL, s."ADDRESS1_OTHER") AS VARCHAR2(55 CHAR)) "ADDRESS1_OTHER", CAST(nvl(c11m13140.NEW_VAL, s."ADDRESS2_OTHER") AS VARCHAR2(55 CHAR)) "ADDRESS2_OTHER", CAST(nvl(c8m13137.NEW_VAL, s."ADDRESS3_OTHER") AS VARCHAR2(55 CHAR)) "ADDRESS3_OTHER", CAST(nvl(c7m13136.NEW_VAL, s."ADDRESS4_OTHER") AS VARCHAR2(55 CHAR)) "ADDRESS4_OTHER", CAST(DECODE(TRIM(s."CITY_OTHER"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "CITY_OTHER", s."COUNTY_OTHER", CAST(DECODE(TRIM(s."STATE_OTHER"), NULL, '' '', ''DC'') as VARCHAR2(6 CHAR)) "STATE_OTHER", s."POSTAL_OTHER", s."NUM1_OTHER", s."NUM2_OTHER", s."HOUSE_TYPE_OTHER", s."ADDR_FIELD1_OTHER", s."ADDR_FIELD2_OTHER", s."ADDR_FIELD3_OTHER", s."IN_CITY_LMT_OTHER", s."GEO_CODE_OTHER", s."COUNTRY_CODE", CAST(nvl(c26m13155.NEW_VAL, s."PHONE") AS VARCHAR2(24 CHAR)) "PHONE", s."EXTENSION", s."VA_BENEFIT", s."CAMPUS_ID", s."DEATH_CERTIF_NBR", s."FERPA", s."PLACE_OF_DEATH", s."US_WORK_ELIGIBILTY", s."MILITARY_STATUS", s."CITIZEN_PROOF1", s."CITIZEN_PROOF2", s."MEDICARE_ENTLD_DT", s."HONSEKI_JPN", s."MILITARY_STAT_ITA", s."MILITARY_TYPE_ITA", s."MILITARY_RANK_ITA", s."MILITARY_END_ITA", s."ENTRY_DT_FRA", s."MILIT_SITUATN_FRA", s."CPAMID", s."BILINGUALISM_CODE", s."HEALTH_CARE_NBR", s."HEALTH_CARE_STATE", s."MILIT_SITUATN_ESP", s."SOC_SEC_AFF_DT", s."MILITARY_STAT_GER", s."EXPCTD_MILITARY_DT", s."HR_RESPONSIBLE_ID", s."SMOKER", s."SMOKER_DT", s."GVT_CRED_MIL_SVCE", s."GVT_MILITARY_COMP", s."GVT_MIL_GRADE", s."GVT_MIL_RESRVE_CAT", s."GVT_MIL_SEP_RET", s."GVT_MIL_SVCE_END", s."GVT_MIL_SVCE_START", s."GVT_MIL_VERIFY", s."GVT_PAR_NBR_LAST", s."GVT_UNIF_SVC_CTR", s."GVT_VET_PREF_APPT", s."GVT_VET_PREF_RIF", s."GVT_CHANGE_FLAG", s."GVT_DRAFT_STATUS", s."GVT_YR_ATTAINED", s."DISABLED_VET", s."DISABLED", s."GVT_DISABILITY_CD", s."GRADE", s."SAL_ADMIN_PLAN", s."GVT_CURR_AGCY_EMPL", s."GVT_CURR_FED_EMPL", s."GVT_HIGH_PAY_PLAN", s."GVT_HIGH_GRADE", s."GVT_PREV_AGCY_EMPL", s."GVT_PREV_FED_EMPL", s."GVT_SEP_INCENTIVE", s."GVT_SEP_INCENT_DT", s."GVT_TENURE", s."GVT_PAY_PLAN", s."BARG_UNIT", s."LASTUPDDTTM" FROM "SYSADM"."PS_PERSONAL_DATA$DMASK"  s , MGMT_DM_TT_13136'||
' c7m13136, MGMT_DM_TT_13137 c8m13137, MGMT_DM_TT_13139 c10m13139, MGMT_DM_TT_13140 c11m13140, MGMT_DM_TT_13146 c17m13146, MGMT_DM_TT_13148 c19m13148, MGMT_DM_TT_13149 c20m13149, MGMT_DM_TT_13150 c21m13150, MGMT_DM_TT_13151 c22m13151, MGMT_DM_TT_13152 c23m13152, MGMT_DM_TT_13153 c24m13153, MGMT_DM_TT_13155 c26m13155, MGMT_DM_TT_13156 c27m13156 WHERE s."ADDRESS4_OTHER" = c7m13136.ORIG_VAL (+) AND NVL(c7m13136.delete_val,0) = 0 AND s."ADDRESS3_OTHER" = c8m13137.ORIG_VAL (+) AND NVL(c8m13137.delete_val,0) = 0 AND s."DT_OF_DEATH" = c10m13139.ORIG_VAL (+) AND NVL(c10m13139.delete_val,0) = 0 AND s."ADDRESS2_OTHER" = c11m13140.ORIG_VAL (+) AND NVL(c11m13140.delete_val,0) = 0 AND s."FIRST_NAME" = c17m13146.ORIG_VAL (+) AND NVL(c17m13146.delete_val,0) = 0 AND s."ADDRESS4" = c19m13148.ORIG_VAL (+) AND NVL(c19m13148.delete_val,0) = 0 AND s."ADDRESS3" = c20m13149.ORIG_VAL (+) AND NVL(c20m13149.delete_val,0) = 0 AND s."ADDRESS2" = c21m13150.ORIG_VAL (+) AND NVL(c21m13150.delete_val,0) = 0 AND s."ADDRESS1" = c22m13151.ORIG_VAL (+) AND NVL(c22m13151.delete_val,0) = 0 AND s."BIRTHDATE" = c23m13152.ORIG_VAL (+) AND NVL(c23m13152.delete_val,0) = 0 AND s."LAST_NAME" = c24m13153.ORIG_VAL (+) AND NVL(c24m13153.delete_val,0) = 0 AND s."PHONE" = c26m13155.ORIG_VAL (+) AND NVL(c26m13155.delete_val,0) = 0 AND s."ADDRESS1_OTHER" = c27m13156.ORIG_VAL (+) AND NVL(c27m13156.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_PERSONAL_DATA"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."EMPLID", s."COUNTRY_NM_FORMAT", CAST(DECODE(TRIM(s."NAME"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME")) as VARCHAR2(50 CHAR)) "NAME", s."NAME_INITIALS", s."NAME_PREFIX", s."NAME_SUFFIX", s."NAME_ROYAL_PREFIX", s."NAME_ROYAL_SUFFIX", s."NAME_TITLE", CAST(DECODE(TRIM(s."LAST_NAME_SRCH"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."LAST_NAME_SRCH")) as VARCHAR2(30 CHAR)) "LAST_NAME_SRCH", CAST(DECODE(TRIM(s."FIRST_NAME_SRCH"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."FIRST_NAME_SRCH")) as VARCHAR2(30 CHAR)) "FIRST_NAME_SRCH", CAST(nvl(c24m13153.NEW_VAL, s."LAST_NAME") AS VARCHAR2(30 CHAR)) "LAST_NAME", CAST(nvl(c17m13146.NEW_VAL, s."FIRST_NAME") AS VARCHAR2(30 CHAR)) "FIRST_NAME", CAST(DECODE(TRIM(s."MIDDLE_NAME"), NULL, '' '', ''NMN'') as VARCHAR2(30 CHAR)) "MIDDLE_NAME", s."SECOND_LAST_NAME", s."SECOND_LAST_SRCH", s."NAME_AC", s."PREF_FIRST_NAME", s."PARTNER_LAST_NAME", s."PARTNER_ROY_PREFIX", s."LAST_NAME_PREF_NLD", CAST(DECODE(TRIM(s."NAME_DISPLAY"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME_DISPLAY")) as VARCHAR2(50 CHAR)) "NAME_DISPLAY", CAST(DECODE(TRIM(s."NAME_FORMAL"), NULL, '' '', DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."NAME_FORMAL")) as VARCHAR2(60 CHAR)) "NAME_FORMAL", CAST(DECODE(TRIM(s."COUNTRY"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "COUNTRY", CAST(nvl(c22m13151.NEW_VAL, s."ADDRESS1") AS VARCHAR2(55 CHAR)) "ADDRESS1", CAST(nvl(c21m13150.NEW_VAL, s."ADDRESS2") AS VARCHAR2(55 CHAR)) "ADDRESS2", CAST(nvl(c20m13149.NEW_VAL, s."ADDRESS3") AS VARCHAR2(55 CHAR)) "ADDRESS3", CAST(nvl(c19m13148.NEW_VAL, s."ADDRESS4") AS VARCHAR2(55 CHAR)) "ADDRESS4", CAST(DECODE(TRIM(s."CITY"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "CITY", s."NUM1", s."NUM2", s."HOUSE_TYPE", s."ADDR_FIELD1", s."ADDR_FIELD2", s."ADDR_FIELD3", s."COUNTY", CAST(DECODE(TRIM(s."STATE"), NULL, '' '', ''DC'') as VARCHAR2(6 CHAR)) "STATE", s."POSTAL", s."GEO_CODE", s."IN_CITY_LIMIT", s."SEX", s."MAR_STATUS", s."MAR_STATUS_DT", c23m13152.NEW_VAL "BIRTHDATE", CAST(DECODE(TRIM(s."BIRTHPLACE"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "BIRTHPLACE", CAST(DECODE(TRIM(s."BIRTHCOUNTRY"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "BIRTHCOUNTRY", CAST(DECODE(TRIM(s."BIRTHSTATE"), NULL, '' '', ''DC'') as VARCHAR2(6 CHAR)) "BIRTHSTATE",'||
' c10m13139.NEW_VAL "DT_OF_DEATH", s."HIGHEST_EDUC_LVL", s."FT_STUDENT", s."LANG_CD", s."ALTER_EMPLID", s."ADDRESS1_AC", s."ADDRESS2_AC", s."ADDRESS3_AC", s."CITY_AC", CAST(DECODE(TRIM(s."COUNTRY_OTHER"), NULL, '' '', ''USA'') as VARCHAR2(3 CHAR)) "COUNTRY_OTHER", CAST(nvl(c27m13156.NEW_VAL, s."ADDRESS1_OTHER") AS VARCHAR2(55 CHAR)) "ADDRESS1_OTHER", CAST(nvl(c11m13140.NEW_VAL, s."ADDRESS2_OTHER") AS VARCHAR2(55 CHAR)) "ADDRESS2_OTHER", CAST(nvl(c8m13137.NEW_VAL, s."ADDRESS3_OTHER") AS VARCHAR2(55 CHAR)) "ADDRESS3_OTHER", CAST(nvl(c7m13136.NEW_VAL, s."ADDRESS4_OTHER") AS VARCHAR2(55 CHAR)) "ADDRESS4_OTHER", CAST(DECODE(TRIM(s."CITY_OTHER"), NULL, '' '', ''WASHINGTON'') as VARCHAR2(30 CHAR)) "CITY_OTHER", s."COUNTY_OTHER", CAST(DECODE(TRIM(s."STATE_OTHER"), NULL, '' '', ''DC'') as VARCHAR2(6 CHAR)) "STATE_OTHER", s."POSTAL_OTHER", s."NUM1_OTHER", s."NUM2_OTHER", s."HOUSE_TYPE_OTHER", s."ADDR_FIELD1_OTHER", s."ADDR_FIELD2_OTHER", s."ADDR_FIELD3_OTHER", s."IN_CITY_LMT_OTHER", s."GEO_CODE_OTHER", s."COUNTRY_CODE", CAST(nvl(c26m13155.NEW_VAL, s."PHONE") AS VARCHAR2(24 CHAR)) "PHONE", s."EXTENSION", s."VA_BENEFIT", s."CAMPUS_ID", s."DEATH_CERTIF_NBR", s."FERPA", s."PLACE_OF_DEATH", s."US_WORK_ELIGIBILTY", s."MILITARY_STATUS", s."CITIZEN_PROOF1", s."CITIZEN_PROOF2", s."MEDICARE_ENTLD_DT", s."HONSEKI_JPN", s."MILITARY_STAT_ITA", s."MILITARY_TYPE_ITA", s."MILITARY_RANK_ITA", s."MILITARY_END_ITA", s."ENTRY_DT_FRA", s."MILIT_SITUATN_FRA", s."CPAMID", s."BILINGUALISM_CODE", s."HEALTH_CARE_NBR", s."HEALTH_CARE_STATE", s."MILIT_SITUATN_ESP", s."SOC_SEC_AFF_DT", s."MILITARY_STAT_GER", s."EXPCTD_MILITARY_DT", s."HR_RESPONSIBLE_ID", s."SMOKER", s."SMOKER_DT", s."GVT_CRED_MIL_SVCE", s."GVT_MILITARY_COMP", s."GVT_MIL_GRADE", s."GVT_MIL_RESRVE_CAT", s."GVT_MIL_SEP_RET", s."GVT_MIL_SVCE_END", s."GVT_MIL_SVCE_START", s."GVT_MIL_VERIFY", s."GVT_PAR_NBR_LAST", s."GVT_UNIF_SVC_CTR", s."GVT_VET_PREF_APPT", s."GVT_VET_PREF_RIF", s."GVT_CHANGE_FLAG", s."GVT_DRAFT_STATUS", s."GVT_YR_ATTAINED", s."DISABLED_VET", s."DISABLED", s."GVT_DISABILITY_CD", s."GRADE", s."SAL_ADMIN_PLAN", s."GVT_CURR_AGCY_EMPL", s."GVT_CURR_FED_EMPL", s."GVT_HIGH_PAY_PLAN", s."GVT_HIGH_GRADE", s."GVT_PREV_AGCY_EMPL", s."GVT_PREV_FED_EMPL", s."GVT_SEP_INCENTIVE", s."GVT_SEP_INCENT_DT", s."GVT_TENURE", s."GVT_PAY_PLAN", s."BARG_UNIT", s."LASTUPDDTTM" FROM "SYSADM"."PS_PERSONAL_DATA$DMASK"  s , MGMT_DM_TT_13136'||
' c7m13136, MGMT_DM_TT_13137 c8m13137, MGMT_DM_TT_13139 c10m13139, MGMT_DM_TT_13140 c11m13140, MGMT_DM_TT_13146 c17m13146, MGMT_DM_TT_13148 c19m13148, MGMT_DM_TT_13149 c20m13149, MGMT_DM_TT_13150 c21m13150, MGMT_DM_TT_13151 c22m13151, MGMT_DM_TT_13152 c23m13152, MGMT_DM_TT_13153 c24m13153, MGMT_DM_TT_13155 c26m13155, MGMT_DM_TT_13156 c27m13156 WHERE s."ADDRESS4_OTHER" = c7m13136.ORIG_VAL (+) AND NVL(c7m13136.delete_val,0) = 0 AND s."ADDRESS3_OTHER" = c8m13137.ORIG_VAL (+) AND NVL(c8m13137.delete_val,0) = 0 AND s."DT_OF_DEATH" = c10m13139.ORIG_VAL (+) AND NVL(c10m13139.delete_val,0) = 0 AND s."ADDRESS2_OTHER" = c11m13140.ORIG_VAL (+) AND NVL(c11m13140.delete_val,0) = 0 AND s."FIRST_NAME" = c17m13146.ORIG_VAL (+) AND NVL(c17m13146.delete_val,0) = 0 AND s."ADDRESS4" = c19m13148.ORIG_VAL (+) AND NVL(c19m13148.delete_val,0) = 0 AND s."ADDRESS3" = c20m13149.ORIG_VAL (+) AND NVL(c20m13149.delete_val,0) = 0 AND s."ADDRESS2" = c21m13150.ORIG_VAL (+) AND NVL(c21m13150.delete_val,0) = 0 AND s."ADDRESS1" = c22m13151.ORIG_VAL (+) AND NVL(c22m13151.delete_val,0) = 0 AND s."BIRTHDATE" = c23m13152.ORIG_VAL (+) AND NVL(c23m13152.delete_val,0) = 0 AND s."LAST_NAME" = c24m13153.ORIG_VAL (+) AND NVL(c24m13153.delete_val,0) = 0 AND s."PHONE" = c26m13155.ORIG_VAL (+) AND NVL(c26m13155.delete_val,0) = 0 AND s."ADDRESS1_OTHER" = c27m13156.ORIG_VAL (+) AND NVL(c27m13156.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_856_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_857_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 857 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_857_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_858_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 858 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_PERSONAL_DATA$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_PERSONAL_DATA$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_858_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_859_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 859 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13136" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13136" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_859_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_860_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 860 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13137" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13137" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_860_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_861_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 861 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13139" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13139" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_861_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_862_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 862 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13140" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13140" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_862_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_863_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 863 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13146" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13146" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_863_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_864_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 864 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13148" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13148" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_864_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_865_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 865 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13149" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13149" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_865_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_866_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 866 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13150" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13150" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_866_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_867_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 867 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13151" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13151" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_867_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_868_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 868 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13152" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13152" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_868_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_869_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 869 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13153" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13153" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_869_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_870_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 870 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13155" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13155" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_870_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_871_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 871 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13156" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13156" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_871_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_872_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 872 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS0PERSONAL_DATA" ON "SYSADM"."PS_PERSONAL_DATA" ("NAME","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS0PERSONAL_DATA" ON "SYSADM"."PS_PERSONAL_DATA" ("NAME","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_872_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_873_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 873 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS0PERSONAL_DATA" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS0PERSONAL_DATA" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_873_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_874_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 874 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS1PERSONAL_DATA" ON "SYSADM"."PS_PERSONAL_DATA" ("LAST_NAME_SRCH","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS1PERSONAL_DATA" ON "SYSADM"."PS_PERSONAL_DATA" ("LAST_NAME_SRCH","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_874_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_875_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 875 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS1PERSONAL_DATA" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS1PERSONAL_DATA" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_875_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_876_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 876 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS2PERSONAL_DATA" ON "SYSADM"."PS_PERSONAL_DATA" ("FIRST_NAME_SRCH","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS2PERSONAL_DATA" ON "SYSADM"."PS_PERSONAL_DATA" ("FIRST_NAME_SRCH","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_876_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_877_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 877 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS2PERSONAL_DATA" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS2PERSONAL_DATA" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_877_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_878_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 878 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS3PERSONAL_DATA" ON "SYSADM"."PS_PERSONAL_DATA" ("SECOND_LAST_SRCH","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS3PERSONAL_DATA" ON "SYSADM"."PS_PERSONAL_DATA" ("SECOND_LAST_SRCH","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_878_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_879_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 879 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS3PERSONAL_DATA" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS3PERSONAL_DATA" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_879_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_880_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 880 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS4PERSONAL_DATA" ON "SYSADM"."PS_PERSONAL_DATA" ("NAME_AC","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS4PERSONAL_DATA" ON "SYSADM"."PS_PERSONAL_DATA" ("NAME_AC","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_880_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_881_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 881 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS4PERSONAL_DATA" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS4PERSONAL_DATA" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_881_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_882_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 882 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS5PERSONAL_DATA" ON "SYSADM"."PS_PERSONAL_DATA" ("CAMPUS_ID","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS5PERSONAL_DATA" ON "SYSADM"."PS_PERSONAL_DATA" ("CAMPUS_ID","EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_882_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_883_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 883 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS5PERSONAL_DATA" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS5PERSONAL_DATA" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_883_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_884_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 884 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_PERSONAL_DATA" ON "SYSADM"."PS_PERSONAL_DATA" ("EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_PERSONAL_DATA" ON "SYSADM"."PS_PERSONAL_DATA" ("EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_884_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_885_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 885 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_PERSONAL_DATA" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_PERSONAL_DATA" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_885_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_886_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 886 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("NAME" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("NAME" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_886_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_887_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 887 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("LAST_NAME_SRCH" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("LAST_NAME_SRCH" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_887_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_888_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 888 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("FIRST_NAME_SRCH" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("FIRST_NAME_SRCH" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_888_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_889_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 889 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("LAST_NAME" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("LAST_NAME" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_889_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_890_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 890 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("FIRST_NAME" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("FIRST_NAME" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_890_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_891_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 891 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("MIDDLE_NAME" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("MIDDLE_NAME" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_891_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_892_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 892 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("NAME_DISPLAY" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("NAME_DISPLAY" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_892_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_893_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 893 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("NAME_FORMAL" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("NAME_FORMAL" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_893_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_894_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 894 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("COUNTRY" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("COUNTRY" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_894_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_895_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 895 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("ADDRESS1" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("ADDRESS1" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_895_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_896_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 896 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("ADDRESS2" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("ADDRESS2" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_896_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_897_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 897 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("ADDRESS3" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("ADDRESS3" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_897_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_898_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 898 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("ADDRESS4" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("ADDRESS4" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_898_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_899_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 899 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("CITY" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("CITY" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_899_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_900_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 900 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("STATE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("STATE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_900_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_901_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 901 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("BIRTHPLACE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("BIRTHPLACE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_901_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_902_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 902 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("BIRTHCOUNTRY" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("BIRTHCOUNTRY" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_902_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_903_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 903 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("BIRTHSTATE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("BIRTHSTATE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_903_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_904_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 904 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("COUNTRY_OTHER" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("COUNTRY_OTHER" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_904_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_905_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 905 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("ADDRESS1_OTHER" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("ADDRESS1_OTHER" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_905_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_906_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 906 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("ADDRESS2_OTHER" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("ADDRESS2_OTHER" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_906_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_907_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 907 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("ADDRESS3_OTHER" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("ADDRESS3_OTHER" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_907_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_908_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 908 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("ADDRESS4_OTHER" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("ADDRESS4_OTHER" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_908_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_909_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 909 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("CITY_OTHER" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("CITY_OTHER" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_909_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_910_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 910 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("STATE_OTHER" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("STATE_OTHER" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_910_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_911_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 911 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("PHONE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_PERSONAL_DATA" MODIFY ("PHONE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_911_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_912_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 912 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_PERSONAL_DATA" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_PERSONAL_DATA" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_912_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_913_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 913 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_PERSONAL_DATA" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_PERSONAL_DATA" TO "ROLE_RO"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_913_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_914_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 914 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_PERSONAL_DATA"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_PERSONAL_DATA"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_914_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_915_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 915 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_TM_STG_OPT$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_TM_STG_OPT$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_915_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_916_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 916 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_TM_STG_OPT" RENAME TO "PS_OP_TM_STG_OPT$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_TM_STG_OPT" RENAME TO "PS_OP_TM_STG_OPT$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_916_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_917_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 917 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_TM_STG_OPT"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE"
 LOB ("WHERE_LONG") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_DATA_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."OP_TRV_MSG_TYPE", s."EMPLID", s."OP_TM_ASGN_ID", s."OP_TM_ASG_REV", s."LASTUPDDTTM", s."LASTUPDTBY", s."OP_OFFICE_NAME", s."COMMENTS_256", s."COMMENTS_MSGS", s."OP_US_PHONE", s."DISTLIST", s."KEYLIST", s."OP_RELEASER", s."OP_TM_OVRD_FLG", CAST(DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."OP_TM_SUBJECT_CASE") as VARCHAR2(250 CHAR)) "OP_TM_SUBJECT_CASE", s."WHERE_LONG" FROM "SYSADM"."PS_OP_TM_STG_OPT$DMASK"  s ');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_TM_STG_OPT"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE"
 LOB ("WHERE_LONG") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_DATA_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."OP_TRV_MSG_TYPE", s."EMPLID", s."OP_TM_ASGN_ID", s."OP_TM_ASG_REV", s."LASTUPDDTTM", s."LASTUPDTBY", s."OP_OFFICE_NAME", s."COMMENTS_256", s."COMMENTS_MSGS", s."OP_US_PHONE", s."DISTLIST", s."KEYLIST", s."OP_RELEASER", s."OP_TM_OVRD_FLG", CAST(DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."OP_TM_SUBJECT_CASE") as VARCHAR2(250 CHAR)) "OP_TM_SUBJECT_CASE", s."WHERE_LONG" FROM "SYSADM"."PS_OP_TM_STG_OPT$DMASK"  s ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_917_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_918_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 918 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_TM_STG_OPT" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_TM_STG_OPT" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_918_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_919_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 919 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_TM_STG_OPT$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_TM_STG_OPT$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_919_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_920_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 920 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_TM_STG_OPT" ON "SYSADM"."PS_OP_TM_STG_OPT" ("OP_TRV_MSG_TYPE","EMPLID","OP_TM_ASGN_ID","OP_TM_ASG_REV","LASTUPDDTTM")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_TM_STG_OPT" ON "SYSADM"."PS_OP_TM_STG_OPT" ("OP_TRV_MSG_TYPE","EMPLID","OP_TM_ASGN_ID","OP_TM_ASG_REV","LASTUPDDTTM")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_920_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_921_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 921 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_TM_STG_OPT" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_TM_STG_OPT" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_921_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_922_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 922 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_TM_STG_OPT" MODIFY ("OP_TM_SUBJECT_CASE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_TM_STG_OPT" MODIFY ("OP_TM_SUBJECT_CASE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_922_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_923_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 923 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_TM_STG_OPT" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_TM_STG_OPT" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_923_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_924_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 924 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_TM_STG_OPT"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_TM_STG_OPT"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_924_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_925_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 925 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13158" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13158" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_925_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_926_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 926 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "POSN_DESCR" from "SYSADM"."PS_OP_MBC_BASIC_LE");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13158
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "POSN_DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_MBC_BASIC_LE" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13158"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "POSN_DESCR" from "SYSADM"."PS_OP_MBC_BASIC_LE");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13158
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "POSN_DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_MBC_BASIC_LE" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13158"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_926_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_927_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 927 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13158_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13158_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_927_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_928_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 928 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13158_IDX ON MGMT_DM_TT_13158(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13158_IDX ON MGMT_DM_TT_13158(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_928_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_929_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 929 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_MBC_BASIC_LE$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_MBC_BASIC_LE$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_929_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_930_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 930 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_MBC_BASIC_LE" RENAME TO "PS_OP_MBC_BASIC_LE$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_MBC_BASIC_LE" RENAME TO "PS_OP_MBC_BASIC_LE$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_930_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_931_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 931 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_MBC_BASIC_LE$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_MBC_BASIC_LE$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_931_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_932_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 932 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_MBC_BASIC_LE"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "AALARGE" AS SELECT s."EMPLID", s."NAME", s."FIRST_NAME", s."MIDDLE_NAME", s."LAST_NAME", s."SETID", s."JOB_EFFDT", s."HR_STATUS", s."EMPL_STATUS", s."DEPTID", s."DEPT_DESCR", s."POSITION_NBR", CAST(nvl(c0m13158.NEW_VAL, s."POSN_DESCR") AS VARCHAR2(30 CHAR)) "POSN_DESCR", s."AGENCY", s."GVT_SUB_AGENCY", s."OP_EAPS_AGENCY", s."COMPANY_DESCR", s."GVT_DESCR70", s."SAL_ADMIN_PLAN", s."GRADE", s."COMPRATE", s."CURRENCY_CD", s."FULL_PART_TIME", s."HIRE_DT", s."MANAGER_LEVEL", s."OP_MGR_LVL_DESCR", s."POSITION_ENTRY_DT", s."OP_POST_SECTION_ID", s."OP_POST_SEC_DESCR", s."LASTUPDDTTM", s."OP_ICASS_AGENCY_CD", s."OP_APPROPRIATION", s."OP_ALLOTMENT", s."OP_BENEFITTING_ORG", s."OP_FUNCTION_CD", s."OP_OPR_ALLOWANCE", s."OP_PROJECT_CD", s."OP_OBLIGATION", s."PROCESS_DTTM" FROM "SYSADM"."PS_OP_MBC_BASIC_LE$DMASK"  s , MGMT_DM_TT_13158 c0m13158 WHERE s."POSN_DESCR" = c0m13158.ORIG_VAL (+) AND NVL(c0m13158.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_MBC_BASIC_LE"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "AALARGE" AS SELECT s."EMPLID", s."NAME", s."FIRST_NAME", s."MIDDLE_NAME", s."LAST_NAME", s."SETID", s."JOB_EFFDT", s."HR_STATUS", s."EMPL_STATUS", s."DEPTID", s."DEPT_DESCR", s."POSITION_NBR", CAST(nvl(c0m13158.NEW_VAL, s."POSN_DESCR") AS VARCHAR2(30 CHAR)) "POSN_DESCR", s."AGENCY", s."GVT_SUB_AGENCY", s."OP_EAPS_AGENCY", s."COMPANY_DESCR", s."GVT_DESCR70", s."SAL_ADMIN_PLAN", s."GRADE", s."COMPRATE", s."CURRENCY_CD", s."FULL_PART_TIME", s."HIRE_DT", s."MANAGER_LEVEL", s."OP_MGR_LVL_DESCR", s."POSITION_ENTRY_DT", s."OP_POST_SECTION_ID", s."OP_POST_SEC_DESCR", s."LASTUPDDTTM", s."OP_ICASS_AGENCY_CD", s."OP_APPROPRIATION", s."OP_ALLOTMENT", s."OP_BENEFITTING_ORG", s."OP_FUNCTION_CD", s."OP_OPR_ALLOWANCE", s."OP_PROJECT_CD", s."OP_OBLIGATION", s."PROCESS_DTTM" FROM "SYSADM"."PS_OP_MBC_BASIC_LE$DMASK"  s , MGMT_DM_TT_13158 c0m13158 WHERE s."POSN_DESCR" = c0m13158.ORIG_VAL (+) AND NVL(c0m13158.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_932_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_933_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 933 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_MBC_BASIC_LE" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_MBC_BASIC_LE" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_933_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_934_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 934 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_MBC_BASIC_LE$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_MBC_BASIC_LE$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_934_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_935_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 935 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13158" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13158" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_935_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_936_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 936 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_MBC_BASIC_LE" ON "SYSADM"."PS_OP_MBC_BASIC_LE" ("EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_MBC_BASIC_LE" ON "SYSADM"."PS_OP_MBC_BASIC_LE" ("EMPLID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_936_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_937_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 937 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_MBC_BASIC_LE" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_MBC_BASIC_LE" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_937_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_938_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 938 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_MBC_BASIC_LE" MODIFY ("POSN_DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_MBC_BASIC_LE" MODIFY ("POSN_DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_938_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_939_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 939 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_MBC_BASIC_LE" TO "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_MBC_BASIC_LE" TO "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_939_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_940_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 940 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_MBC_BASIC_LE" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_MBC_BASIC_LE" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_940_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_941_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 941 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_MBC_BASIC_LE"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_MBC_BASIC_LE"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_941_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_942_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 942 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13159" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13159" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_942_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_943_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 943 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_POSITION_DAT");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13159
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_POSITION_DAT" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13159"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_POSITION_DAT");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13159
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_POSITION_DAT" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13159"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_943_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_944_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 944 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13159_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13159_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_944_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_945_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 945 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13159_IDX ON MGMT_DM_TT_13159(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13159_IDX ON MGMT_DM_TT_13159(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_945_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_946_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 946 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_POSITION_DAT$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_POSITION_DAT$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_946_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_947_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 947 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_POSITION_DAT" RENAME TO "PS_OP_POSITION_DAT$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_POSITION_DAT" RENAME TO "PS_OP_POSITION_DAT$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_947_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_948_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 948 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_POSITION_DAT$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_POSITION_DAT$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_948_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_949_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 949 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_POSITION_DAT"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSDEFAULT" AS SELECT s."POSITION_NBR", s."EFFDT", s."OP_SYSTEM_SOURCE", s."OP_SOURCE_POS_NBR", s."AGENCY", s."GVT_SUB_AGENCY", s."OP_POST_SECTION_ID", s."OP_APPROPRIATION", s."OP_ALLOTMENT", s."OP_ICASS_AGENCY_CD", s."OP_NSDD38_CASE_ID", s."OP_STFG_PTRN_IND", s."OP_STFG_PTRN_ORDER", s."SETID_SALARY", s."OP_OBO_SECTION", s."OP_OBO_OFFICE", s."OP_OBO_TITLE", s."OP_OBO_SPACETYPE", s."OP_OBO_CAA_IND", s."OP_OBO_USPOS_IND", s."OP_OBO_DESK_IND", s."OP_OBO_ALT_LOC_TXT", s."OP_OBO_COL_IND", s."ESTABID", s."OP_PLAN_ABOLISH_DT", CAST(nvl(c0m13159.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."OP_POSITION_TYPE", s."OP_SKILL_CD", s."OP_SEC_CHIEF", s."WF_STATUS", s."OPS_SENSTVTY_CODE", s."OP_BACKSTOP", s."OP_NOT_BILL_REASON", s."OP_TM_POS_SEQ", s."OP_POSN_SERVICE", s."OP_EFM_IND", s."OP_AM_ORGST" FROM "SYSADM"."PS_OP_POSITION_DAT$DMASK"  s , MGMT_DM_TT_13159 c0m13159 WHERE s."OP_WORKING_TITLE" = c0m13159.ORIG_VAL (+) AND NVL(c0m13159.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_POSITION_DAT"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSDEFAULT" AS SELECT s."POSITION_NBR", s."EFFDT", s."OP_SYSTEM_SOURCE", s."OP_SOURCE_POS_NBR", s."AGENCY", s."GVT_SUB_AGENCY", s."OP_POST_SECTION_ID", s."OP_APPROPRIATION", s."OP_ALLOTMENT", s."OP_ICASS_AGENCY_CD", s."OP_NSDD38_CASE_ID", s."OP_STFG_PTRN_IND", s."OP_STFG_PTRN_ORDER", s."SETID_SALARY", s."OP_OBO_SECTION", s."OP_OBO_OFFICE", s."OP_OBO_TITLE", s."OP_OBO_SPACETYPE", s."OP_OBO_CAA_IND", s."OP_OBO_USPOS_IND", s."OP_OBO_DESK_IND", s."OP_OBO_ALT_LOC_TXT", s."OP_OBO_COL_IND", s."ESTABID", s."OP_PLAN_ABOLISH_DT", CAST(nvl(c0m13159.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."OP_POSITION_TYPE", s."OP_SKILL_CD", s."OP_SEC_CHIEF", s."WF_STATUS", s."OPS_SENSTVTY_CODE", s."OP_BACKSTOP", s."OP_NOT_BILL_REASON", s."OP_TM_POS_SEQ", s."OP_POSN_SERVICE", s."OP_EFM_IND", s."OP_AM_ORGST" FROM "SYSADM"."PS_OP_POSITION_DAT$DMASK"  s , MGMT_DM_TT_13159 c0m13159 WHERE s."OP_WORKING_TITLE" = c0m13159.ORIG_VAL (+) AND NVL(c0m13159.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_949_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_950_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 950 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_POSITION_DAT" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_POSITION_DAT" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_950_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_951_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 951 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_POSITION_DAT$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_POSITION_DAT$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_951_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_952_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 952 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13159" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13159" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_952_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_953_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 953 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS0OP_POSITION_DAT" ON "SYSADM"."PS_OP_POSITION_DAT" ("OP_SYSTEM_SOURCE","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS0OP_POSITION_DAT" ON "SYSADM"."PS_OP_POSITION_DAT" ("OP_SYSTEM_SOURCE","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_953_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_954_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 954 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS0OP_POSITION_DAT" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS0OP_POSITION_DAT" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_954_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_955_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 955 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS1OP_POSITION_DAT" ON "SYSADM"."PS_OP_POSITION_DAT" ("OP_SOURCE_POS_NBR","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS1OP_POSITION_DAT" ON "SYSADM"."PS_OP_POSITION_DAT" ("OP_SOURCE_POS_NBR","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_955_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_956_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 956 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS1OP_POSITION_DAT" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS1OP_POSITION_DAT" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_956_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_957_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 957 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_POSITION_DAT" ON "SYSADM"."PS_OP_POSITION_DAT" ("POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_POSITION_DAT" ON "SYSADM"."PS_OP_POSITION_DAT" ("POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_957_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_958_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 958 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_POSITION_DAT" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_POSITION_DAT" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_958_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_959_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 959 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_POSITION_DAT" MODIFY ("OP_WORKING_TITLE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_POSITION_DAT" MODIFY ("OP_WORKING_TITLE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_959_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_960_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 960 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_POSITION_DAT" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_POSITION_DAT" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_960_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_961_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 961 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_POSITION_DAT"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_POSITION_DAT"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_961_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_962_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 962 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13160" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13160" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_962_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_963_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 963 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_JOBCODE_TBL");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13160
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBCODE_TBL" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13160"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_JOBCODE_TBL");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13160
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBCODE_TBL" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13160"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_963_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_964_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 964 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13160_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13160_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_964_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_965_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 965 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13160_IDX ON MGMT_DM_TT_13160(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13160_IDX ON MGMT_DM_TT_13160(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_965_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_966_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 966 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_JOBCODE_TBL$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_JOBCODE_TBL$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_966_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_967_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 967 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBCODE_TBL" RENAME TO "PS_OP_JOBCODE_TBL$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBCODE_TBL" RENAME TO "PS_OP_JOBCODE_TBL$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_967_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_968_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 968 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_JOBCODE_TBL$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_JOBCODE_TBL$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_968_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_969_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 969 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_JOBCODE_TBL"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "HRAPP" AS SELECT s."SETID", s."JOBCODE", s."EFFDT", s."OP_SYSTEM_SOURCE", s."OP_JOBCODE", s."DEPTID", s."AGENCY", s."GVT_SUB_AGENCY", s."OP_SKILL_CD", CAST(nvl(c0m13160.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."OP_MCLASS_CLASSFER", s."OP_EAPS_GUID", s."OP_MCLS_AUDITID" FROM "SYSADM"."PS_OP_JOBCODE_TBL$DMASK"  s , MGMT_DM_TT_13160 c0m13160 WHERE s."OP_WORKING_TITLE" = c0m13160.ORIG_VAL (+) AND NVL(c0m13160.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_JOBCODE_TBL"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "HRAPP" AS SELECT s."SETID", s."JOBCODE", s."EFFDT", s."OP_SYSTEM_SOURCE", s."OP_JOBCODE", s."DEPTID", s."AGENCY", s."GVT_SUB_AGENCY", s."OP_SKILL_CD", CAST(nvl(c0m13160.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."OP_MCLASS_CLASSFER", s."OP_EAPS_GUID", s."OP_MCLS_AUDITID" FROM "SYSADM"."PS_OP_JOBCODE_TBL$DMASK"  s , MGMT_DM_TT_13160 c0m13160 WHERE s."OP_WORKING_TITLE" = c0m13160.ORIG_VAL (+) AND NVL(c0m13160.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_969_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_970_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 970 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBCODE_TBL" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBCODE_TBL" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_970_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_971_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 971 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_JOBCODE_TBL$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_JOBCODE_TBL$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_971_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_972_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 972 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13160" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13160" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_972_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_973_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 973 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS0OP_JOBCODE_TBL" ON "SYSADM"."PS_OP_JOBCODE_TBL" ("OP_JOBCODE","SETID","JOBCODE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS0OP_JOBCODE_TBL" ON "SYSADM"."PS_OP_JOBCODE_TBL" ("OP_JOBCODE","SETID","JOBCODE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_973_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_974_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 974 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS0OP_JOBCODE_TBL" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS0OP_JOBCODE_TBL" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_974_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_975_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 975 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_JOBCODE_TBL" ON "SYSADM"."PS_OP_JOBCODE_TBL" ("SETID","JOBCODE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_JOBCODE_TBL" ON "SYSADM"."PS_OP_JOBCODE_TBL" ("SETID","JOBCODE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_975_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_976_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 976 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_JOBCODE_TBL" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_JOBCODE_TBL" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_976_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_977_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 977 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBCODE_TBL" MODIFY ("OP_WORKING_TITLE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBCODE_TBL" MODIFY ("OP_WORKING_TITLE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_977_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_978_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 978 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JOBCODE_TBL" TO "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JOBCODE_TBL" TO "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_978_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_979_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 979 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JOBCODE_TBL" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JOBCODE_TBL" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_979_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_980_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 980 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_JOBCODE_TBL"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_JOBCODE_TBL"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_980_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_981_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 981 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13161" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13161" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_981_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_982_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 982 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_JOBCODE_STG2");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13161
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBCODE_STG2" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13161"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_JOBCODE_STG2");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13161
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBCODE_STG2" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13161"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_982_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_983_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 983 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13161_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13161_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_983_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_984_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 984 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13161_IDX ON MGMT_DM_TT_13161(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13161_IDX ON MGMT_DM_TT_13161(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_984_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_985_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 985 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13162" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13162" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_985_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_986_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 986 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "GVT_OFFICIAL_DESCR" from "SYSADM"."PS_OP_JOBCODE_STG2");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13162
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "GVT_OFFICIAL_DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBCODE_STG2" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13162"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "GVT_OFFICIAL_DESCR" from "SYSADM"."PS_OP_JOBCODE_STG2");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13162
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "GVT_OFFICIAL_DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBCODE_STG2" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13162"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_986_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_987_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 987 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13162_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13162_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_987_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_988_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 988 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13162_IDX ON MGMT_DM_TT_13162(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13162_IDX ON MGMT_DM_TT_13162(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_988_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_989_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 989 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13163" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13163" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_989_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_990_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 990 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_OP_JOBCODE_STG2");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13163
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBCODE_STG2" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13163"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_OP_JOBCODE_STG2");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13163
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBCODE_STG2" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13163"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_990_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_991_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 991 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13163_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13163_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_991_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_992_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 992 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13163_IDX ON MGMT_DM_TT_13163(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13163_IDX ON MGMT_DM_TT_13163(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_992_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_993_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 993 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_JOBCODE_STG2$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_JOBCODE_STG2$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_993_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_994_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 994 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBCODE_STG2" RENAME TO "PS_OP_JOBCODE_STG2$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBCODE_STG2" RENAME TO "PS_OP_JOBCODE_STG2$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_994_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_995_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 995 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_JOBCODE_STG2"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE"
 LOB ("COMMENTS") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."INTFC_ID", s."CREATION_DT", s."SETID", s."OP_SETID_DESCR", s."JOBCODE", s."OP_JOBCODE", s."OP_EAPS_GUID", s."EFFDT", s."EFF_STATUS", CAST(nvl(c2m13163.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", CAST(DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."DESCRSHORT") as VARCHAR2(10 CHAR)) "DESCRSHORT", s."SETID_SALARY", s."SAL_ADMIN_PLAN", s."GRADE", s."STEP", s."MANAGER_LEVEL", s."CURRENCY_CD", s."STD_HOURS", s."STD_HRS_FREQUENCY", s."COMP_FREQUENCY", s."REG_TEMP", s."KEY_JOBCODE", s."OP_SYSTEM_SOURCE", s."GVT_OCC_SERIES", s."GVT_POSN_TITLE_CD", CAST(nvl(c1m13162.NEW_VAL, s."GVT_OFFICIAL_DESCR") AS VARCHAR2(70 CHAR)) "GVT_OFFICIAL_DESCR", s."GVT_PAY_PLAN", s."OP_EAPS_AGENCY", s."COMPANY", s."COMPANY_DESCR", s."GVT_SUB_AGENCY", s."OP_SUBAGENCY_DESCR", s."DEPTID", s."DEPT_DESCR", CAST(nvl(c0m13161.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."OP_MCLASS_CLASSFER", s."PROCESSED", s."APPROVAL_STATUS", s."OP_MCLASS_ERRORCD", s."LASTUPDOPRID", s."LASTUPDDTTM", s."OP_MCLS_AUDITID", s."OP_JOBCD_NOTIFY", s."OP_POSNBR_NOTIFY", s."OP_MCLASSID_NOTIFY", s."ERROR_MESSAGE_TXT", s."COMMENTS" FROM "SYSADM"."PS_OP_JOBCODE_STG2$DMASK"  s , MGMT_DM_TT_13161 c0m13161, MGMT_DM_TT_13162 c1m13162, MGMT_DM_TT_13163 c2m13163 WHERE s."OP_WORKING_TITLE" = c0m13161.ORIG_VAL (+) AND NVL(c0m13161.delete_val,0) = 0 AND s."GVT_OFFICIAL_DESCR" = c1m13162.ORIG_VAL (+) AND NVL(c1m13162.delete_val,0) = 0 AND s."DESCR" = c2m13163.ORIG_VAL (+) AND NVL(c2m13163.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_JOBCODE_STG2"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE"
 LOB ("COMMENTS") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."INTFC_ID", s."CREATION_DT", s."SETID", s."OP_SETID_DESCR", s."JOBCODE", s."OP_JOBCODE", s."OP_EAPS_GUID", s."EFFDT", s."EFF_STATUS", CAST(nvl(c2m13163.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", CAST(DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."DESCRSHORT") as VARCHAR2(10 CHAR)) "DESCRSHORT", s."SETID_SALARY", s."SAL_ADMIN_PLAN", s."GRADE", s."STEP", s."MANAGER_LEVEL", s."CURRENCY_CD", s."STD_HOURS", s."STD_HRS_FREQUENCY", s."COMP_FREQUENCY", s."REG_TEMP", s."KEY_JOBCODE", s."OP_SYSTEM_SOURCE", s."GVT_OCC_SERIES", s."GVT_POSN_TITLE_CD", CAST(nvl(c1m13162.NEW_VAL, s."GVT_OFFICIAL_DESCR") AS VARCHAR2(70 CHAR)) "GVT_OFFICIAL_DESCR", s."GVT_PAY_PLAN", s."OP_EAPS_AGENCY", s."COMPANY", s."COMPANY_DESCR", s."GVT_SUB_AGENCY", s."OP_SUBAGENCY_DESCR", s."DEPTID", s."DEPT_DESCR", CAST(nvl(c0m13161.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."OP_MCLASS_CLASSFER", s."PROCESSED", s."APPROVAL_STATUS", s."OP_MCLASS_ERRORCD", s."LASTUPDOPRID", s."LASTUPDDTTM", s."OP_MCLS_AUDITID", s."OP_JOBCD_NOTIFY", s."OP_POSNBR_NOTIFY", s."OP_MCLASSID_NOTIFY", s."ERROR_MESSAGE_TXT", s."COMMENTS" FROM "SYSADM"."PS_OP_JOBCODE_STG2$DMASK"  s , MGMT_DM_TT_13161 c0m13161, MGMT_DM_TT_13162 c1m13162, MGMT_DM_TT_13163 c2m13163 WHERE s."OP_WORKING_TITLE" = c0m13161.ORIG_VAL (+) AND NVL(c0m13161.delete_val,0) = 0 AND s."GVT_OFFICIAL_DESCR" = c1m13162.ORIG_VAL (+) AND NVL(c1m13162.delete_val,0) = 0 AND s."DESCR" = c2m13163.ORIG_VAL (+) AND NVL(c2m13163.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_995_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_996_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 996 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBCODE_STG2" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBCODE_STG2" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_996_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_997_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 997 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_JOBCODE_STG2$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_JOBCODE_STG2$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_997_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_998_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 998 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13161" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13161" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_998_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_999_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 999 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13162" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13162" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_999_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1000_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1000 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13163" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13163" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1000_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1001_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1001 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_JOBCODE_STG2" ON "SYSADM"."PS_OP_JOBCODE_STG2" ("INTFC_ID","CREATION_DT","SETID","JOBCODE","OP_JOBCODE","OP_EAPS_GUID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_JOBCODE_STG2" ON "SYSADM"."PS_OP_JOBCODE_STG2" ("INTFC_ID","CREATION_DT","SETID","JOBCODE","OP_JOBCODE","OP_EAPS_GUID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1001_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1002_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1002 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_JOBCODE_STG2" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_JOBCODE_STG2" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1002_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1003_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1003 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBCODE_STG2" MODIFY ("DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBCODE_STG2" MODIFY ("DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1003_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1004_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1004 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBCODE_STG2" MODIFY ("DESCRSHORT" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBCODE_STG2" MODIFY ("DESCRSHORT" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1004_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1005_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1005 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBCODE_STG2" MODIFY ("GVT_OFFICIAL_DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBCODE_STG2" MODIFY ("GVT_OFFICIAL_DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1005_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1006_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1006 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBCODE_STG2" MODIFY ("OP_WORKING_TITLE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBCODE_STG2" MODIFY ("OP_WORKING_TITLE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1006_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1007_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1007 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JOBCODE_STG2" TO "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JOBCODE_STG2" TO "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1007_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1008_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1008 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JOBCODE_STG2" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JOBCODE_STG2" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1008_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1009_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1009 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_JOBCODE_STG2"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_JOBCODE_STG2"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1009_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1010_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1010 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13165" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13165" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1010_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1011_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1011 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_JOBCODE_ARC");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13165
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBCODE_ARC" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13165"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_JOBCODE_ARC");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13165
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBCODE_ARC" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13165"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1011_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1012_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1012 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13165_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13165_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1012_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1013_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1013 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13165_IDX ON MGMT_DM_TT_13165(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13165_IDX ON MGMT_DM_TT_13165(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1013_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1014_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1014 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13166" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13166" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1014_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1015_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1015 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "GVT_OFFICIAL_DESCR" from "SYSADM"."PS_OP_JOBCODE_ARC");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13166
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "GVT_OFFICIAL_DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBCODE_ARC" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13166"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "GVT_OFFICIAL_DESCR" from "SYSADM"."PS_OP_JOBCODE_ARC");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13166
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "GVT_OFFICIAL_DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBCODE_ARC" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13166"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1015_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1016_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1016 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13166_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13166_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1016_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1017_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1017 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13166_IDX ON MGMT_DM_TT_13166(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13166_IDX ON MGMT_DM_TT_13166(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1017_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1018_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1018 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13167" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13167" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1018_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1019_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1019 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_OP_JOBCODE_ARC");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13167
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBCODE_ARC" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13167"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_OP_JOBCODE_ARC");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13167
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBCODE_ARC" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13167"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1019_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1020_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1020 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13167_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13167_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1020_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1021_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1021 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13167_IDX ON MGMT_DM_TT_13167(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13167_IDX ON MGMT_DM_TT_13167(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1021_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1022_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1022 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_JOBCODE_ARC$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_JOBCODE_ARC$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1022_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1023_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1023 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBCODE_ARC" RENAME TO "PS_OP_JOBCODE_ARC$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBCODE_ARC" RENAME TO "PS_OP_JOBCODE_ARC$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1023_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1024_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1024 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_JOBCODE_ARC"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSDEFAULT"
 LOB ("COMMENTS") STORE AS BASICFILE  (
  TABLESPACE "PSDEFAULT" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."INTFC_ID", s."CREATION_DT", s."SETID", s."OP_SETID_DESCR", s."JOBCODE", s."OP_JOBCODE", s."OP_EAPS_GUID", s."EFFDT", s."EFF_STATUS", CAST(nvl(c2m13167.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", CAST(DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."DESCRSHORT") as VARCHAR2(10 CHAR)) "DESCRSHORT", s."SETID_SALARY", s."SAL_ADMIN_PLAN", s."GRADE", s."STEP", s."MANAGER_LEVEL", s."CURRENCY_CD", s."STD_HOURS", s."STD_HRS_FREQUENCY", s."COMP_FREQUENCY", s."REG_TEMP", s."KEY_JOBCODE", s."OP_SYSTEM_SOURCE", s."GVT_OCC_SERIES", s."GVT_POSN_TITLE_CD", CAST(nvl(c1m13166.NEW_VAL, s."GVT_OFFICIAL_DESCR") AS VARCHAR2(70 CHAR)) "GVT_OFFICIAL_DESCR", s."GVT_PAY_PLAN", s."OP_EAPS_AGENCY", s."COMPANY", s."COMPANY_DESCR", s."GVT_SUB_AGENCY", s."OP_SUBAGENCY_DESCR", s."DEPTID", s."DEPT_DESCR", CAST(nvl(c0m13165.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."OP_MCLASS_CLASSFER", s."PROCESSED", s."APPROVAL_STATUS", s."OP_MCLASS_ERRORCD", s."LASTUPDOPRID", s."LASTUPDDTTM", s."OP_MCLS_AUDITID", s."OP_JOBCD_NOTIFY", s."OP_POSNBR_NOTIFY", s."OP_MCLASSID_NOTIFY", s."ARCHIVE_DT", s."ERROR_MESSAGE_TXT", s."COMMENTS" FROM "SYSADM"."PS_OP_JOBCODE_ARC$DMASK"  s , MGMT_DM_TT_13165 c0m13165, MGMT_DM_TT_13166 c1m13166, MGMT_DM_TT_13167 c2m13167 WHERE s."OP_WORKING_TITLE" = c0m13165.ORIG_VAL (+) AND NVL(c0m13165.delete_val,0) = 0 AND s."GVT_OFFICIAL_DESCR" = c1m13166.ORIG_VAL (+) AND NVL(c1m13166.delete_val,0) = 0 AND s."DESCR" = c2m13167.ORIG_VAL (+) AND NVL(c2m13167.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_JOBCODE_ARC"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSDEFAULT"
 LOB ("COMMENTS") STORE AS BASICFILE  (
  TABLESPACE "PSDEFAULT" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."INTFC_ID", s."CREATION_DT", s."SETID", s."OP_SETID_DESCR", s."JOBCODE", s."OP_JOBCODE", s."OP_EAPS_GUID", s."EFFDT", s."EFF_STATUS", CAST(nvl(c2m13167.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", CAST(DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."DESCRSHORT") as VARCHAR2(10 CHAR)) "DESCRSHORT", s."SETID_SALARY", s."SAL_ADMIN_PLAN", s."GRADE", s."STEP", s."MANAGER_LEVEL", s."CURRENCY_CD", s."STD_HOURS", s."STD_HRS_FREQUENCY", s."COMP_FREQUENCY", s."REG_TEMP", s."KEY_JOBCODE", s."OP_SYSTEM_SOURCE", s."GVT_OCC_SERIES", s."GVT_POSN_TITLE_CD", CAST(nvl(c1m13166.NEW_VAL, s."GVT_OFFICIAL_DESCR") AS VARCHAR2(70 CHAR)) "GVT_OFFICIAL_DESCR", s."GVT_PAY_PLAN", s."OP_EAPS_AGENCY", s."COMPANY", s."COMPANY_DESCR", s."GVT_SUB_AGENCY", s."OP_SUBAGENCY_DESCR", s."DEPTID", s."DEPT_DESCR", CAST(nvl(c0m13165.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."OP_MCLASS_CLASSFER", s."PROCESSED", s."APPROVAL_STATUS", s."OP_MCLASS_ERRORCD", s."LASTUPDOPRID", s."LASTUPDDTTM", s."OP_MCLS_AUDITID", s."OP_JOBCD_NOTIFY", s."OP_POSNBR_NOTIFY", s."OP_MCLASSID_NOTIFY", s."ARCHIVE_DT", s."ERROR_MESSAGE_TXT", s."COMMENTS" FROM "SYSADM"."PS_OP_JOBCODE_ARC$DMASK"  s , MGMT_DM_TT_13165 c0m13165, MGMT_DM_TT_13166 c1m13166, MGMT_DM_TT_13167 c2m13167 WHERE s."OP_WORKING_TITLE" = c0m13165.ORIG_VAL (+) AND NVL(c0m13165.delete_val,0) = 0 AND s."GVT_OFFICIAL_DESCR" = c1m13166.ORIG_VAL (+) AND NVL(c1m13166.delete_val,0) = 0 AND s."DESCR" = c2m13167.ORIG_VAL (+) AND NVL(c2m13167.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1024_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1025_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1025 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBCODE_ARC" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBCODE_ARC" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1025_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1026_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1026 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_JOBCODE_ARC$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_JOBCODE_ARC$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1026_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1027_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1027 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13165" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13165" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1027_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1028_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1028 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13166" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13166" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1028_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1029_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1029 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13167" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13167" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1029_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1030_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1030 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_JOBCODE_ARC" ON "SYSADM"."PS_OP_JOBCODE_ARC" ("INTFC_ID","CREATION_DT","SETID","JOBCODE","OP_JOBCODE","OP_EAPS_GUID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_JOBCODE_ARC" ON "SYSADM"."PS_OP_JOBCODE_ARC" ("INTFC_ID","CREATION_DT","SETID","JOBCODE","OP_JOBCODE","OP_EAPS_GUID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1030_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1031_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1031 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_JOBCODE_ARC" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_JOBCODE_ARC" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1031_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1032_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1032 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBCODE_ARC" MODIFY ("DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBCODE_ARC" MODIFY ("DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1032_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1033_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1033 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBCODE_ARC" MODIFY ("DESCRSHORT" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBCODE_ARC" MODIFY ("DESCRSHORT" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1033_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1034_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1034 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBCODE_ARC" MODIFY ("GVT_OFFICIAL_DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBCODE_ARC" MODIFY ("GVT_OFFICIAL_DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1034_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1035_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1035 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBCODE_ARC" MODIFY ("OP_WORKING_TITLE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBCODE_ARC" MODIFY ("OP_WORKING_TITLE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1035_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1036_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1036 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JOBCODE_ARC" TO "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JOBCODE_ARC" TO "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1036_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1037_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1037 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JOBCODE_ARC" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JOBCODE_ARC" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1037_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1038_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1038 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_JOBCODE_ARC"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_JOBCODE_ARC"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1038_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1039_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1039 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13169" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13169" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1039_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1040_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1040 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "GVT_OFFICIAL_DESCR" from "SYSADM"."PS_OP_JC_INTF_AET");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13169
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "GVT_OFFICIAL_DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JC_INTF_AET" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13169"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "GVT_OFFICIAL_DESCR" from "SYSADM"."PS_OP_JC_INTF_AET");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13169
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "GVT_OFFICIAL_DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JC_INTF_AET" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13169"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1040_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1041_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1041 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13169_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13169_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1041_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1042_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1042 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13169_IDX ON MGMT_DM_TT_13169(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13169_IDX ON MGMT_DM_TT_13169(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1042_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1043_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1043 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13170" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13170" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1043_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1044_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1044 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_JC_INTF_AET");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13170
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JC_INTF_AET" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13170"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_JC_INTF_AET");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13170
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JC_INTF_AET" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13170"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1044_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1045_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1045 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13170_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13170_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1045_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1046_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1046 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13170_IDX ON MGMT_DM_TT_13170(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13170_IDX ON MGMT_DM_TT_13170(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1046_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1047_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1047 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13171" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13171" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1047_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1048_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1048 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_OP_JC_INTF_AET");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13171
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JC_INTF_AET" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13171"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_OP_JC_INTF_AET");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13171
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JC_INTF_AET" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13171"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1048_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1049_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1049 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13171_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13171_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1049_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1050_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1050 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13171_IDX ON MGMT_DM_TT_13171(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13171_IDX ON MGMT_DM_TT_13171(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1050_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1051_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1051 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_JC_INTF_AET$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_JC_INTF_AET$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1051_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1052_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1052 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JC_INTF_AET" RENAME TO "PS_OP_JC_INTF_AET$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JC_INTF_AET" RENAME TO "PS_OP_JC_INTF_AET$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1052_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1053_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1053 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_JC_INTF_AET$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_JC_INTF_AET$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_1053_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1054_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1054 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_JC_INTF_AET"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSDEFAULT" AS SELECT s."PROCESS_INSTANCE", s."OPRID", s."RUN_CNTL_ID", s."INTFC_ID", s."SETID", s."JOBCODE", s."OP_JOBCODE", s."DATE1", CAST(nvl(c2m13171.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", s."GRADE", s."GVT_OCC_SERIES", s."GVT_POSN_TITLE_CD", CAST(nvl(c0m13169.NEW_VAL, s."GVT_OFFICIAL_DESCR") AS VARCHAR2(70 CHAR)) "GVT_OFFICIAL_DESCR", s."OP_EAPS_AGENCY", s."COMPANY", s."GVT_SUB_AGENCY", s."DEPTID", s."OP_EAPS_GUID", CAST(nvl(c1m13170.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."OP_MCLASS_CLASSFER", s."DEPT_DESCR", s."EFF_STATUS", s."INSTANCEID", s."EMPLID", s."POSITION_NBR", s."OP_JOBCD_NOTIFY", s."OP_MCLASSID_NOTIFY", s."OP_POSNBR_NOTIFY", s."COMPANY_DESCR", s."OP_SETID_DESCR", s."OP_SUBAGENCY_DESCR", s."OP_MCLS_AUDITID", s."OP_MCLASS_ERRORCD", s."ERROR_MESSAGE_TXT" FROM "SYSADM"."PS_OP_JC_INTF_AET$DMASK"  s , MGMT_DM_TT_13169 c0m13169, MGMT_DM_TT_13170 c1m13170, MGMT_DM_TT_13171 c2m13171 WHERE s."GVT_OFFICIAL_DESCR" = c0m13169.ORIG_VAL (+) AND NVL(c0m13169.delete_val,0) = 0 AND s."OP_WORKING_TITLE" = c1m13170.ORIG_VAL (+) AND NVL(c1m13170.delete_val,0) = 0 AND s."DESCR" = c2m13171.ORIG_VAL (+) AND NVL(c2m13171.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_JC_INTF_AET"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSDEFAULT" AS SELECT s."PROCESS_INSTANCE", s."OPRID", s."RUN_CNTL_ID", s."INTFC_ID", s."SETID", s."JOBCODE", s."OP_JOBCODE", s."DATE1", CAST(nvl(c2m13171.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", s."GRADE", s."GVT_OCC_SERIES", s."GVT_POSN_TITLE_CD", CAST(nvl(c0m13169.NEW_VAL, s."GVT_OFFICIAL_DESCR") AS VARCHAR2(70 CHAR)) "GVT_OFFICIAL_DESCR", s."OP_EAPS_AGENCY", s."COMPANY", s."GVT_SUB_AGENCY", s."DEPTID", s."OP_EAPS_GUID", CAST(nvl(c1m13170.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."OP_MCLASS_CLASSFER", s."DEPT_DESCR", s."EFF_STATUS", s."INSTANCEID", s."EMPLID", s."POSITION_NBR", s."OP_JOBCD_NOTIFY", s."OP_MCLASSID_NOTIFY", s."OP_POSNBR_NOTIFY", s."COMPANY_DESCR", s."OP_SETID_DESCR", s."OP_SUBAGENCY_DESCR", s."OP_MCLS_AUDITID", s."OP_MCLASS_ERRORCD", s."ERROR_MESSAGE_TXT" FROM "SYSADM"."PS_OP_JC_INTF_AET$DMASK"  s , MGMT_DM_TT_13169 c0m13169, MGMT_DM_TT_13170 c1m13170, MGMT_DM_TT_13171 c2m13171 WHERE s."GVT_OFFICIAL_DESCR" = c0m13169.ORIG_VAL (+) AND NVL(c0m13169.delete_val,0) = 0 AND s."OP_WORKING_TITLE" = c1m13170.ORIG_VAL (+) AND NVL(c1m13170.delete_val,0) = 0 AND s."DESCR" = c2m13171.ORIG_VAL (+) AND NVL(c2m13171.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1054_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1055_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1055 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JC_INTF_AET" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JC_INTF_AET" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1055_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1056_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1056 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_JC_INTF_AET$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_JC_INTF_AET$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1056_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1057_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1057 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13169" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13169" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1057_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1058_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1058 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13170" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13170" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1058_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1059_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1059 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13171" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13171" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1059_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1060_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1060 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS0OP_JC_INTF_AET" ON "SYSADM"."PS_OP_JC_INTF_AET" ("GVT_OFFICIAL_DESCR","PROCESS_INSTANCE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS0OP_JC_INTF_AET" ON "SYSADM"."PS_OP_JC_INTF_AET" ("GVT_OFFICIAL_DESCR","PROCESS_INSTANCE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1060_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1061_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1061 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS0OP_JC_INTF_AET" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS0OP_JC_INTF_AET" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1061_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1062_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1062 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_JC_INTF_AET" ON "SYSADM"."PS_OP_JC_INTF_AET" ("PROCESS_INSTANCE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_JC_INTF_AET" ON "SYSADM"."PS_OP_JC_INTF_AET" ("PROCESS_INSTANCE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1062_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1063_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1063 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_JC_INTF_AET" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_JC_INTF_AET" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1063_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1064_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1064 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JC_INTF_AET" MODIFY ("DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JC_INTF_AET" MODIFY ("DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1064_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1065_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1065 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JC_INTF_AET" MODIFY ("GVT_OFFICIAL_DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JC_INTF_AET" MODIFY ("GVT_OFFICIAL_DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1065_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1066_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1066 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JC_INTF_AET" MODIFY ("OP_WORKING_TITLE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JC_INTF_AET" MODIFY ("OP_WORKING_TITLE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1066_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1067_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1067 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JC_INTF_AET" TO "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JC_INTF_AET" TO "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1067_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1068_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1068 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JC_INTF_AET" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JC_INTF_AET" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1068_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1069_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1069 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_JC_INTF_AET"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_JC_INTF_AET"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1069_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1070_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1070 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13172" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13172" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1070_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1071_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1071 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_EI_FP_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13172
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_EI_FP_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13172"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_EI_FP_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 5, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13172
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_EI_FP_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13172"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1071_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1072_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1072 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13172_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13172_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1072_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1073_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1073 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13172_IDX ON MGMT_DM_TT_13172(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13172_IDX ON MGMT_DM_TT_13172(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1073_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1074_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1074 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13173" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13173" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1074_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1075_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1075 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_OP_EI_FP_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13173
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_EI_FP_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13173"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_OP_EI_FP_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13173
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_EI_FP_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13173"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1075_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1076_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1076 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13173_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13173_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1076_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1077_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1077 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13173_IDX ON MGMT_DM_TT_13173(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13173_IDX ON MGMT_DM_TT_13173(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1077_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1078_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1078 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_EI_FP_STG$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_EI_FP_STG$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1078_13048;
/

*/

CREATE OR REPLACE PROCEDURE mgmt$step_1079_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN

step_num := 1079;

    IF step_num <> 1079 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_EI_FP_STG" RENAME TO "PS_OP_EI_FP_STG$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_EI_FP_STG" RENAME TO "PS_OP_EI_FP_STG$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1079_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1080_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1080 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_EI_FP_STG$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_EI_FP_STG$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_1080_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1081_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1081 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_EI_FP_STG"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSDEFAULT" AS SELECT s."OP_EI_FP_KEY", s."POSITION_NBR", s."COUNTRY", s."EFFDT", CAST(nvl(c1m13173.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", s."COMPANY", s."REG_TEMP", s."FULL_PART_TIME", s."GRADE", s."KEY_POSITION", s."DESCR254", s."SEC_CLEARANCE_TYPE", s."POSN_STATUS", s."OP_STFG_PTRN_IND", s."OP_STFG_PTRN_ORDER", s."SUPV_LVL_ID", s."OP_EAPS_AGENCY", s."OP_APPROPRIATION", s."OP_ALLOTMENT", s."OP_DIV_BUREAU", CAST(nvl(c0m13172.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."OP_OBO_SECTION", s."OP_OBO_OFFICE", s."OP_OBO_TITLE", s."OP_OBO_SPACETYPE", s."OP_OBO_CAA_IND", s."OP_OBO_COL_IND", s."OP_OBO_USPOS_IND", s."OP_OBO_DESK_IND", s."OP_OBO_ALT_LOC_TXT", s."OP_EI_SA_KEY", s."OP_EI_SICW_KEY", s."OP_EI_SPT_KEY", s."OP_EI_SP_KEY", s."OP_EI_SPSE_KEY", s."GVT_OCC_SERIES", s."GVT_POSN_TITLE_CD", s."OP_GUID_JOB_TITLE", s."POSITION_END_DT", s."OP_EMPL_MECHANISM", s."DEPTID" FROM "SYSADM"."PS_OP_EI_FP_STG$DMASK"  s , MGMT_DM_TT_13172 c0m13172, MGMT_DM_TT_13173 c1m13173 WHERE s."OP_WORKING_TITLE" = c0m13172.ORIG_VAL (+) AND NVL(c0m13172.delete_val,0) = 0 AND s."DESCR" = c1m13173.ORIG_VAL (+) AND NVL(c1m13173.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_EI_FP_STG"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSDEFAULT" AS SELECT s."OP_EI_FP_KEY", s."POSITION_NBR", s."COUNTRY", s."EFFDT", CAST(nvl(c1m13173.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", s."COMPANY", s."REG_TEMP", s."FULL_PART_TIME", s."GRADE", s."KEY_POSITION", s."DESCR254", s."SEC_CLEARANCE_TYPE", s."POSN_STATUS", s."OP_STFG_PTRN_IND", s."OP_STFG_PTRN_ORDER", s."SUPV_LVL_ID", s."OP_EAPS_AGENCY", s."OP_APPROPRIATION", s."OP_ALLOTMENT", s."OP_DIV_BUREAU", CAST(nvl(c0m13172.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."OP_OBO_SECTION", s."OP_OBO_OFFICE", s."OP_OBO_TITLE", s."OP_OBO_SPACETYPE", s."OP_OBO_CAA_IND", s."OP_OBO_COL_IND", s."OP_OBO_USPOS_IND", s."OP_OBO_DESK_IND", s."OP_OBO_ALT_LOC_TXT", s."OP_EI_SA_KEY", s."OP_EI_SICW_KEY", s."OP_EI_SPT_KEY", s."OP_EI_SP_KEY", s."OP_EI_SPSE_KEY", s."GVT_OCC_SERIES", s."GVT_POSN_TITLE_CD", s."OP_GUID_JOB_TITLE", s."POSITION_END_DT", s."OP_EMPL_MECHANISM", s."DEPTID" FROM "SYSADM"."PS_OP_EI_FP_STG$DMASK"  s , MGMT_DM_TT_13172 c0m13172, MGMT_DM_TT_13173 c1m13173 WHERE s."OP_WORKING_TITLE" = c0m13172.ORIG_VAL (+) AND NVL(c0m13172.delete_val,0) = 0 AND s."DESCR" = c1m13173.ORIG_VAL (+) AND NVL(c1m13173.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1081_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1082_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1082 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_EI_FP_STG" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_EI_FP_STG" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1082_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1083_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1083 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_EI_FP_STG$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_EI_FP_STG$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1083_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1084_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1084 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13172" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13172" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1084_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1085_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1085 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13173" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13173" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1085_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1086_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1086 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_EI_FP_STG" MODIFY ("DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_EI_FP_STG" MODIFY ("DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1086_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1087_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1087 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_EI_FP_STG" MODIFY ("OP_WORKING_TITLE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_EI_FP_STG" MODIFY ("OP_WORKING_TITLE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1087_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1088_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1088 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_EI_FP_STG" TO "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_EI_FP_STG" TO "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1088_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1089_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1089 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_EI_FP_STG" TO "EAPSREAD"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_EI_FP_STG" TO "EAPSREAD"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1089_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1090_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1090 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_EI_FP_STG" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_EI_FP_STG" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1090_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1091_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1091 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_EI_FP_STG"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_EI_FP_STG"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1091_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1092_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1092 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13174" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13174" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1092_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1093_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1093 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_EI_AP_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13174
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_EI_AP_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13174"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_EI_AP_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13174
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_EI_AP_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13174"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1093_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1094_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1094 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13174_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13174_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1094_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1095_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1095 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13174_IDX ON MGMT_DM_TT_13174(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13174_IDX ON MGMT_DM_TT_13174(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1095_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1096_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1096 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_EI_AP_STG$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_EI_AP_STG$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1096_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1097_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1097 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_EI_AP_STG" RENAME TO "PS_OP_EI_AP_STG$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_EI_AP_STG" RENAME TO "PS_OP_EI_AP_STG$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1097_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1098_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1098 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_EI_AP_STG$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_EI_AP_STG$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_1098_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1099_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1099 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_EI_AP_STG"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSDEFAULT" AS SELECT s."OP_EI_AP_KEY", s."POSITION_NBR", c0m13174.NEW_VAL "OP_WORKING_TITLE", s."OP_STFG_PTRN_IND", s."OP_STFG_PTRN_ORDER", s."FULL_PART_TIME", s."REG_TEMP", s."GRADE", s."KEY_POSITION", s."SEC_CLEARANCE_TYPE", s."LOCATION_DESCR", s."DESCR254", s."OP_EAPS_AGENCY", s."OP_USED_BUREAU_ID", s."OP_APPROPRIATION", s."OP_ALLOTMENT", s."OP_PROJECT_CD", s."OP_FUNCTION_CD", s."OP_BENEFITTING_ORG", s."EFF_STATUS", s."ORIG_EFFDT", s."POSITION_END_DT", s."OP_OBO_DESK_IND", s."OP_OBO_CAA_IND", s."OP_OBO_USPOS_IND", s."OP_EI_SA_KEY", s."OP_EI_SICW_KEY", s."OP_EI_SPT_KEY", s."OP_EI_SP_KEY", s."OP_EI_SPSE_KEY", s."OP_OBO_COL_IND", s."OP_OBO_ALT_LOC_TXT", s."OP_EI_SOBO_KEY", s."OP_EI_SOBT_KEY", s."OP_OBO_SECTION", s."OP_OBO_OFFICE", s."OP_OBO_TITLE", s."OP_OBO_SPACETYPE", s."OP_TM_POS_SEQ", s."DEPTID", s."OP_EFM_IND", s."OP_SKILL_CD" FROM "SYSADM"."PS_OP_EI_AP_STG$DMASK"  s , MGMT_DM_TT_13174 c0m13174 WHERE s."OP_WORKING_TITLE" = c0m13174.ORIG_VAL (+) AND NVL(c0m13174.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_EI_AP_STG"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSDEFAULT" AS SELECT s."OP_EI_AP_KEY", s."POSITION_NBR", c0m13174.NEW_VAL "OP_WORKING_TITLE", s."OP_STFG_PTRN_IND", s."OP_STFG_PTRN_ORDER", s."FULL_PART_TIME", s."REG_TEMP", s."GRADE", s."KEY_POSITION", s."SEC_CLEARANCE_TYPE", s."LOCATION_DESCR", s."DESCR254", s."OP_EAPS_AGENCY", s."OP_USED_BUREAU_ID", s."OP_APPROPRIATION", s."OP_ALLOTMENT", s."OP_PROJECT_CD", s."OP_FUNCTION_CD", s."OP_BENEFITTING_ORG", s."EFF_STATUS", s."ORIG_EFFDT", s."POSITION_END_DT", s."OP_OBO_DESK_IND", s."OP_OBO_CAA_IND", s."OP_OBO_USPOS_IND", s."OP_EI_SA_KEY", s."OP_EI_SICW_KEY", s."OP_EI_SPT_KEY", s."OP_EI_SP_KEY", s."OP_EI_SPSE_KEY", s."OP_OBO_COL_IND", s."OP_OBO_ALT_LOC_TXT", s."OP_EI_SOBO_KEY", s."OP_EI_SOBT_KEY", s."OP_OBO_SECTION", s."OP_OBO_OFFICE", s."OP_OBO_TITLE", s."OP_OBO_SPACETYPE", s."OP_TM_POS_SEQ", s."DEPTID", s."OP_EFM_IND", s."OP_SKILL_CD" FROM "SYSADM"."PS_OP_EI_AP_STG$DMASK"  s , MGMT_DM_TT_13174 c0m13174 WHERE s."OP_WORKING_TITLE" = c0m13174.ORIG_VAL (+) AND NVL(c0m13174.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1099_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1100_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1100 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_EI_AP_STG" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_EI_AP_STG" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1100_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1101_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1101 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_EI_AP_STG$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_EI_AP_STG$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1101_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1102_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1102 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13174" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13174" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1102_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1103_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1103 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_EI_AP_STG" TO "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_EI_AP_STG" TO "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1103_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1104_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1104 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_EI_AP_STG" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_EI_AP_STG" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1104_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1105_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1105 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_EI_AP_STG"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_EI_AP_STG"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1105_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1106_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1106 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13175" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13175" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1106_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1107_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1107 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_CI_POS_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13175
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_CI_POS_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13175"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_CI_POS_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13175
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_CI_POS_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13175"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1107_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1108_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1108 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13175_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13175_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1108_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1109_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1109 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13175_IDX ON MGMT_DM_TT_13175(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13175_IDX ON MGMT_DM_TT_13175(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1109_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1110_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1110 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13176" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13176" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1110_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1111_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1111 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_OP_CI_POS_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13176
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_CI_POS_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13176"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_OP_CI_POS_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13176
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_CI_POS_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13176"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1111_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1112_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1112 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13176_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13176_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1112_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1113_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1113 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13176_IDX ON MGMT_DM_TT_13176(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13176_IDX ON MGMT_DM_TT_13176(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1113_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1114_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1114 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_CI_POS_STG$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_CI_POS_STG$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1114_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1115_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1115 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_CI_POS_STG" RENAME TO "PS_OP_CI_POS_STG$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_CI_POS_STG" RENAME TO "PS_OP_CI_POS_STG$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1115_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1116_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1116 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_CI_POS_STG$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_CI_POS_STG$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_1116_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1117_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1117 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_CI_POS_STG"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSDEFAULT" AS SELECT s."OP_EAPS_GUID", s."OP_EAPS_FEP_GUID", s."POSITION_NBR", s."EFFDT", s."STATUS_FIELD", s."OP_POST_NAME", s."OP_POSITION_TYPE", s."AGENCY", s."JOBCODE", s."BUSINESS_UNIT", s."REG_TEMP", s."FULL_PART_TIME", s."DEPTID", CAST(nvl(c0m13175.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."OP_POST_SECTION_ID", s."GVT_SUB_AGENCY", s."OP_ICASS_AGENCY_CD", s."OP_OBO_SECTION", s."OP_OBO_OFFICE", s."OP_OBO_TITLE", s."OP_OBO_SPACE_TYP", s."OP_OBO_CAA_IND", s."OP_OBO_USPOS_IND", s."OP_OBO_DESK_IND", s."OP_OBO_COL_IND", s."OP_OBO_ALT_LOC_TXT", s."OP_STFG_PTRN_IND", s."OP_STFG_PTRN_ORDER", s."OP_SKILL_CD2", s."TRN_PROGRAM", s."SUPV_LVL_ID", s."COUNTRY", s."OP_SYSTEM_SOURCE", s."GVT_PAY_PLAN", s."GRADE", s."STEP", s."GVT_WORK_SCHED", CAST(nvl(c1m13176.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", s."OP_SOURCE_POS_NBR", s."OP_APPROPRIATION", s."OP_ALLOTMENT", s."OP_PLAN_ABOLISH_DT", s."MAX_HEAD_COUNT", s."LOCATION", s."STD_HOURS", s."DATE_LOADED", s."PROCESSED", s."PROCESSINSTANCE", s."COMMENTS_256" FROM "SYSADM"."PS_OP_CI_POS_STG$DMASK"  s , MGMT_DM_TT_13175 c0m13175, MGMT_DM_TT_13176 c1m13176 WHERE s."OP_WORKING_TITLE" = c0m13175.ORIG_VAL (+) AND NVL(c0m13175.delete_val,0) = 0 AND s."DESCR" = c1m13176.ORIG_VAL (+) AND NVL(c1m13176.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_CI_POS_STG"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSDEFAULT" AS SELECT s."OP_EAPS_GUID", s."OP_EAPS_FEP_GUID", s."POSITION_NBR", s."EFFDT", s."STATUS_FIELD", s."OP_POST_NAME", s."OP_POSITION_TYPE", s."AGENCY", s."JOBCODE", s."BUSINESS_UNIT", s."REG_TEMP", s."FULL_PART_TIME", s."DEPTID", CAST(nvl(c0m13175.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."OP_POST_SECTION_ID", s."GVT_SUB_AGENCY", s."OP_ICASS_AGENCY_CD", s."OP_OBO_SECTION", s."OP_OBO_OFFICE", s."OP_OBO_TITLE", s."OP_OBO_SPACE_TYP", s."OP_OBO_CAA_IND", s."OP_OBO_USPOS_IND", s."OP_OBO_DESK_IND", s."OP_OBO_COL_IND", s."OP_OBO_ALT_LOC_TXT", s."OP_STFG_PTRN_IND", s."OP_STFG_PTRN_ORDER", s."OP_SKILL_CD2", s."TRN_PROGRAM", s."SUPV_LVL_ID", s."COUNTRY", s."OP_SYSTEM_SOURCE", s."GVT_PAY_PLAN", s."GRADE", s."STEP", s."GVT_WORK_SCHED", CAST(nvl(c1m13176.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", s."OP_SOURCE_POS_NBR", s."OP_APPROPRIATION", s."OP_ALLOTMENT", s."OP_PLAN_ABOLISH_DT", s."MAX_HEAD_COUNT", s."LOCATION", s."STD_HOURS", s."DATE_LOADED", s."PROCESSED", s."PROCESSINSTANCE", s."COMMENTS_256" FROM "SYSADM"."PS_OP_CI_POS_STG$DMASK"  s , MGMT_DM_TT_13175 c0m13175, MGMT_DM_TT_13176 c1m13176 WHERE s."OP_WORKING_TITLE" = c0m13175.ORIG_VAL (+) AND NVL(c0m13175.delete_val,0) = 0 AND s."DESCR" = c1m13176.ORIG_VAL (+) AND NVL(c1m13176.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1117_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1118_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1118 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_CI_POS_STG" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_CI_POS_STG" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1118_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1119_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1119 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_CI_POS_STG$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_CI_POS_STG$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1119_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1120_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1120 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13175" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13175" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1120_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1121_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1121 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13176" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13176" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1121_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1122_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1122 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_CI_POS_STG" ON "SYSADM"."PS_OP_CI_POS_STG" ("OP_EAPS_GUID","OP_EAPS_FEP_GUID","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_CI_POS_STG" ON "SYSADM"."PS_OP_CI_POS_STG" ("OP_EAPS_GUID","OP_EAPS_FEP_GUID","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1122_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1123_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1123 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_CI_POS_STG" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_CI_POS_STG" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1123_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1124_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1124 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_CI_POS_STG" MODIFY ("OP_WORKING_TITLE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_CI_POS_STG" MODIFY ("OP_WORKING_TITLE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1124_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1125_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1125 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_CI_POS_STG" MODIFY ("DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_CI_POS_STG" MODIFY ("DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1125_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1126_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1126 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_CI_POS_STG" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_CI_POS_STG" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1126_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1127_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1127 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_CI_POS_STG"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_CI_POS_STG"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1127_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1128_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1128 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13177" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13177" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1128_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1129_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1129 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR50" from "SYSADM"."PS_OP_EI_SDT_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13177
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(100 CHAR)) orig_val, CAST(null AS VARCHAR2(100 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(100 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR50" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_EI_SDT_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13177"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR50" from "SYSADM"."PS_OP_EI_SDT_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 2, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13177
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(100 CHAR)) orig_val, CAST(null AS VARCHAR2(100 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(100 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR50" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_EI_SDT_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13177"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1129_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1130_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1130 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13177_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13177_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1130_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1131_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1131 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13177_IDX ON MGMT_DM_TT_13177(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13177_IDX ON MGMT_DM_TT_13177(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1131_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1132_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1132 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_EI_SDT_STG$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_EI_SDT_STG$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1132_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1133_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1133 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_EI_SDT_STG" RENAME TO "PS_OP_EI_SDT_STG$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_EI_SDT_STG" RENAME TO "PS_OP_EI_SDT_STG$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1133_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1134_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1134 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_EI_SDT_STG$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_EI_SDT_STG$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_1134_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1135_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1135 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_EI_SDT_STG"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSDEFAULT" AS SELECT s."OP_EI_SDT_KEY", s."OP_DIP_TTL_CD", c0m13177.NEW_VAL "DESCR50", s."DESCR" FROM "SYSADM"."PS_OP_EI_SDT_STG$DMASK"  s , MGMT_DM_TT_13177 c0m13177 WHERE s."DESCR50" = c0m13177.ORIG_VAL (+) AND NVL(c0m13177.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_EI_SDT_STG"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 40 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSDEFAULT" AS SELECT s."OP_EI_SDT_KEY", s."OP_DIP_TTL_CD", c0m13177.NEW_VAL "DESCR50", s."DESCR" FROM "SYSADM"."PS_OP_EI_SDT_STG$DMASK"  s , MGMT_DM_TT_13177 c0m13177 WHERE s."DESCR50" = c0m13177.ORIG_VAL (+) AND NVL(c0m13177.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1135_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1136_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1136 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_EI_SDT_STG" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_EI_SDT_STG" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1136_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1137_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1137 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_EI_SDT_STG$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_EI_SDT_STG$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1137_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1138_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1138 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13177" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13177" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1138_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1139_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1139 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_EI_SDT_STG" TO "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_EI_SDT_STG" TO "EAPS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1139_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1140_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1140 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_EI_SDT_STG" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_EI_SDT_STG" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1140_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1141_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1141 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_EI_SDT_STG"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_EI_SDT_STG"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1141_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1142_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1142 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13178" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13178" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1142_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1143_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1143 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR100" from "SYSADM"."PS_OP_DPLMT_TTL_CD");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13178
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(100 CHAR)) orig_val, CAST(null AS VARCHAR2(100 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(100 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR100" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_DPLMT_TTL_CD" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13178"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR100" from "SYSADM"."PS_OP_DPLMT_TTL_CD");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13178
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(100 CHAR)) orig_val, CAST(null AS VARCHAR2(100 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(100 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR100" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_DPLMT_TTL_CD" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13178"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1143_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1144_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1144 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13178_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13178_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1144_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1145_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1145 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13178_IDX ON MGMT_DM_TT_13178(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13178_IDX ON MGMT_DM_TT_13178(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1145_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1146_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1146 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13179" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13179" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1146_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1147_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1147 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR50" from "SYSADM"."PS_OP_DPLMT_TTL_CD");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13179
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(50 CHAR)) orig_val, CAST(null AS VARCHAR2(50 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(50 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR50" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_DPLMT_TTL_CD" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13179"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR50" from "SYSADM"."PS_OP_DPLMT_TTL_CD");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13179
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(50 CHAR)) orig_val, CAST(null AS VARCHAR2(50 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(50 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR50" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_DPLMT_TTL_CD" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13179"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1147_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1148_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1148 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13179_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13179_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1148_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1149_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1149 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13179_IDX ON MGMT_DM_TT_13179(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13179_IDX ON MGMT_DM_TT_13179(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1149_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1150_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1150 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_DPLMT_TTL_CD$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_DPLMT_TTL_CD$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1150_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1151_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1151 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_DPLMT_TTL_CD" RENAME TO "PS_OP_DPLMT_TTL_CD$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_DPLMT_TTL_CD" RENAME TO "PS_OP_DPLMT_TTL_CD$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1151_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1152_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1152 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_DPLMT_TTL_CD$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_DPLMT_TTL_CD$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_1152_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1153_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1153 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_DPLMT_TTL_CD"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSDEFAULT" AS SELECT s."OP_DIP_TTL_CD", s."EFFDT", s."EFF_STATUS", s."OP_DIP_CD_REL", CAST(nvl(c0m13178.NEW_VAL, s."DESCR100") AS VARCHAR2(100 CHAR)) "DESCR100", CAST(nvl(c1m13179.NEW_VAL, s."DESCR50") AS VARCHAR2(50 CHAR)) "DESCR50" FROM "SYSADM"."PS_OP_DPLMT_TTL_CD$DMASK"  s , MGMT_DM_TT_13178 c0m13178, MGMT_DM_TT_13179 c1m13179 WHERE s."DESCR100" = c0m13178.ORIG_VAL (+) AND NVL(c0m13178.delete_val,0) = 0 AND s."DESCR50" = c1m13179.ORIG_VAL (+) AND NVL(c1m13179.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_DPLMT_TTL_CD"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSDEFAULT" AS SELECT s."OP_DIP_TTL_CD", s."EFFDT", s."EFF_STATUS", s."OP_DIP_CD_REL", CAST(nvl(c0m13178.NEW_VAL, s."DESCR100") AS VARCHAR2(100 CHAR)) "DESCR100", CAST(nvl(c1m13179.NEW_VAL, s."DESCR50") AS VARCHAR2(50 CHAR)) "DESCR50" FROM "SYSADM"."PS_OP_DPLMT_TTL_CD$DMASK"  s , MGMT_DM_TT_13178 c0m13178, MGMT_DM_TT_13179 c1m13179 WHERE s."DESCR100" = c0m13178.ORIG_VAL (+) AND NVL(c0m13178.delete_val,0) = 0 AND s."DESCR50" = c1m13179.ORIG_VAL (+) AND NVL(c1m13179.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1153_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1154_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1154 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_DPLMT_TTL_CD" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_DPLMT_TTL_CD" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1154_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1155_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1155 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_DPLMT_TTL_CD$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_DPLMT_TTL_CD$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1155_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1156_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1156 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13178" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13178" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1156_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1157_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1157 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13179" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13179" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1157_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1158_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1158 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS0OP_DPLMT_TTL_CD" ON "SYSADM"."PS_OP_DPLMT_TTL_CD" ("DESCR100","OP_DIP_TTL_CD","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS0OP_DPLMT_TTL_CD" ON "SYSADM"."PS_OP_DPLMT_TTL_CD" ("DESCR100","OP_DIP_TTL_CD","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1158_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1159_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1159 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS0OP_DPLMT_TTL_CD" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS0OP_DPLMT_TTL_CD" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1159_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1160_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1160 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_DPLMT_TTL_CD" ON "SYSADM"."PS_OP_DPLMT_TTL_CD" ("OP_DIP_TTL_CD","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_DPLMT_TTL_CD" ON "SYSADM"."PS_OP_DPLMT_TTL_CD" ("OP_DIP_TTL_CD","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1160_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1161_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1161 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_DPLMT_TTL_CD" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_DPLMT_TTL_CD" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1161_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1162_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1162 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_DPLMT_TTL_CD" MODIFY ("DESCR100" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_DPLMT_TTL_CD" MODIFY ("DESCR100" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1162_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1163_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1163 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_DPLMT_TTL_CD" MODIFY ("DESCR50" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_DPLMT_TTL_CD" MODIFY ("DESCR50" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1163_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1164_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1164 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_DPLMT_TTL_CD" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_DPLMT_TTL_CD" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1164_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1165_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1165 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_DPLMT_TTL_CD"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_DPLMT_TTL_CD"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1165_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1166_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1166 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13180" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13180" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1166_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1167_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1167 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "GVT_OFFICIAL_DESCR" from "SYSADM"."PS_OP_JOBC_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13180
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "GVT_OFFICIAL_DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBC_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13180"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "GVT_OFFICIAL_DESCR" from "SYSADM"."PS_OP_JOBC_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13180
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "GVT_OFFICIAL_DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBC_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13180"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1167_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1168_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1168 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13180_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13180_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1168_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1169_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1169 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13180_IDX ON MGMT_DM_TT_13180(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13180_IDX ON MGMT_DM_TT_13180(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1169_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1170_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1170 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13181" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13181" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1170_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1171_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1171 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_JOBC_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13181
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBC_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13181"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_JOBC_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13181
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBC_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13181"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1171_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1172_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1172 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13181_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13181_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1172_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1173_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1173 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13181_IDX ON MGMT_DM_TT_13181(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13181_IDX ON MGMT_DM_TT_13181(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1173_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1174_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1174 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13182" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13182" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1174_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1175_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1175 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_OP_JOBC_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13182
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBC_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13182"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_OP_JOBC_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 3, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13182
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBC_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13182"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1175_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1176_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1176 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13182_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13182_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1176_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1177_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1177 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13182_IDX ON MGMT_DM_TT_13182(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13182_IDX ON MGMT_DM_TT_13182(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1177_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1178_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1178 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_JOBC_STG$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_JOBC_STG$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1178_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1179_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1179 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBC_STG" RENAME TO "PS_OP_JOBC_STG$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBC_STG" RENAME TO "PS_OP_JOBC_STG$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1179_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1180_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1180 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_JOBC_STG$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PS_OP_JOBC_STG$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_1180_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1181_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1181 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_JOBC_STG"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "HRAPP1" AS SELECT s."OP_POS_GUID", s."SETID", s."JOBCODE", s."EFFDT", s."OP_EAPS_FEP_GUID", s."COUNTRY", s."OP_POST_NUM", s."OP_POST_NAME", CAST(nvl(c2m13182.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", CAST(DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."DESCRSHORT") as VARCHAR2(10 CHAR)) "DESCRSHORT", s."JOB_FAMILY", s."GVT_OCC_SERIES", s."SETID_SALARY", s."SAL_ADMIN_PLAN", s."GRADE", s."STEP", s."MANAGER_LEVEL", s."REG_REGION", s."OP_POSITION_NBR", s."GVT_POSN_TITLE_CD", s."GVT_SUB_AGENCY", s."GVT_ORG_TTL_CD", s."REG_TEMP", s."COMPANY", s."GVT_ORG_TTL_DESCR", CAST(nvl(c1m13181.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."STD_HOURS", s."OP_SKILL_CD1", CAST(nvl(c0m13180.NEW_VAL, s."GVT_OFFICIAL_DESCR") AS VARCHAR2(70 CHAR)) "GVT_OFFICIAL_DESCR", s."STD_HRS_FREQUENCY", s."EEO1CODE", s."EEO4CODE", s."EEO5CODE", s."EEO6CODE", s."IPEDSSCODE", s."FLSA_STATUS", s."DIRECTLY_TIPPED", s."GVT_POI", s."BARG_UNIT", s."GVT_PAY_BASIS", s."GVT_PATCOB_CD", s."GVT_PAY_PLAN", s."AGENCY", s."OP_SYSTEM_SOURCE", s."GVT_TARGET_GRADE", s."GVT_DT_CLASSIFIED", s."GVT_IA_ACTIONS", s."GVT_CLASSIFIER_ID", s."GVT_CLS_STANDARD", s."GVT_LEO_POSITION", s."GVT_POSN_SENS_CD", s."GVT_FUNC_CLASS", s."GVT_EXEC_FIN_DISCL", s."GVT_EMP_FIN_INT", s."GVT_PAREN_TITLE", s."GVT_FUND_SOURCE", s."COMP_FREQUENCY", s."JOB_SUB_FUNC", s."JOB_FUNCTION", s."OP_SKILL_CD", s."EFF_STATUS", s."DEPTID", s."DATE_LOADED", s."PROCESSED", s."PROCESSINSTANCE", s."COMMENTS_256" FROM "SYSADM"."PS_OP_JOBC_STG$DMASK"  s , MGMT_DM_TT_13180 c0m13180, MGMT_DM_TT_13181 c1m13181, MGMT_DM_TT_13182 c2m13182 WHERE s."GVT_OFFICIAL_DESCR" = c0m13180.ORIG_VAL (+) AND NVL(c0m13180.delete_val,0) = 0 AND s."OP_WORKING_TITLE" = c1m13181.ORIG_VAL (+) AND NVL(c1m13181.delete_val,0) = 0 AND s."DESCR" = c2m13182.ORIG_VAL (+) AND NVL(c2m13182.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_JOBC_STG"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "HRAPP1" AS SELECT s."OP_POS_GUID", s."SETID", s."JOBCODE", s."EFFDT", s."OP_EAPS_FEP_GUID", s."COUNTRY", s."OP_POST_NUM", s."OP_POST_NAME", CAST(nvl(c2m13182.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", CAST(DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."DESCRSHORT") as VARCHAR2(10 CHAR)) "DESCRSHORT", s."JOB_FAMILY", s."GVT_OCC_SERIES", s."SETID_SALARY", s."SAL_ADMIN_PLAN", s."GRADE", s."STEP", s."MANAGER_LEVEL", s."REG_REGION", s."OP_POSITION_NBR", s."GVT_POSN_TITLE_CD", s."GVT_SUB_AGENCY", s."GVT_ORG_TTL_CD", s."REG_TEMP", s."COMPANY", s."GVT_ORG_TTL_DESCR", CAST(nvl(c1m13181.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."STD_HOURS", s."OP_SKILL_CD1", CAST(nvl(c0m13180.NEW_VAL, s."GVT_OFFICIAL_DESCR") AS VARCHAR2(70 CHAR)) "GVT_OFFICIAL_DESCR", s."STD_HRS_FREQUENCY", s."EEO1CODE", s."EEO4CODE", s."EEO5CODE", s."EEO6CODE", s."IPEDSSCODE", s."FLSA_STATUS", s."DIRECTLY_TIPPED", s."GVT_POI", s."BARG_UNIT", s."GVT_PAY_BASIS", s."GVT_PATCOB_CD", s."GVT_PAY_PLAN", s."AGENCY", s."OP_SYSTEM_SOURCE", s."GVT_TARGET_GRADE", s."GVT_DT_CLASSIFIED", s."GVT_IA_ACTIONS", s."GVT_CLASSIFIER_ID", s."GVT_CLS_STANDARD", s."GVT_LEO_POSITION", s."GVT_POSN_SENS_CD", s."GVT_FUNC_CLASS", s."GVT_EXEC_FIN_DISCL", s."GVT_EMP_FIN_INT", s."GVT_PAREN_TITLE", s."GVT_FUND_SOURCE", s."COMP_FREQUENCY", s."JOB_SUB_FUNC", s."JOB_FUNCTION", s."OP_SKILL_CD", s."EFF_STATUS", s."DEPTID", s."DATE_LOADED", s."PROCESSED", s."PROCESSINSTANCE", s."COMMENTS_256" FROM "SYSADM"."PS_OP_JOBC_STG$DMASK"  s , MGMT_DM_TT_13180 c0m13180, MGMT_DM_TT_13181 c1m13181, MGMT_DM_TT_13182 c2m13182 WHERE s."GVT_OFFICIAL_DESCR" = c0m13180.ORIG_VAL (+) AND NVL(c0m13180.delete_val,0) = 0 AND s."OP_WORKING_TITLE" = c1m13181.ORIG_VAL (+) AND NVL(c1m13181.delete_val,0) = 0 AND s."DESCR" = c2m13182.ORIG_VAL (+) AND NVL(c2m13182.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1181_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1182_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1182 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBC_STG" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBC_STG" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1182_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1183_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1183 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_JOBC_STG$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_JOBC_STG$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1183_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1184_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1184 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13180" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13180" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1184_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1185_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1185 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13181" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13181" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1185_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1186_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1186 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13182" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13182" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1186_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1187_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1187 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_JOBC_STG" ON "SYSADM"."PS_OP_JOBC_STG" ("OP_POS_GUID","SETID","JOBCODE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_JOBC_STG" ON "SYSADM"."PS_OP_JOBC_STG" ("OP_POS_GUID","SETID","JOBCODE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1187_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1188_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1188 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_JOBC_STG" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_JOBC_STG" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1188_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1189_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1189 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBC_STG" MODIFY ("DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBC_STG" MODIFY ("DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1189_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1190_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1190 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBC_STG" MODIFY ("DESCRSHORT" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBC_STG" MODIFY ("DESCRSHORT" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1190_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1191_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1191 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBC_STG" MODIFY ("OP_WORKING_TITLE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBC_STG" MODIFY ("OP_WORKING_TITLE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1191_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1192_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1192 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBC_STG" MODIFY ("GVT_OFFICIAL_DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBC_STG" MODIFY ("GVT_OFFICIAL_DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1192_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1193_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1193 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JOBC_STG" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JOBC_STG" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1193_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1194_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1194 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_JOBC_STG"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_JOBC_STG"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1194_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1195_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1195 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_TRV_MSG_VAL$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_TRV_MSG_VAL$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1195_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1196_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1196 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_TRV_MSG_VAL" RENAME TO "PS_OP_TRV_MSG_VAL$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_TRV_MSG_VAL" RENAME TO "PS_OP_TRV_MSG_VAL$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1196_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1197_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1197 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_TRV_MSG_VAL"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "HRLARGE"
 LOB ("DESCRLONG") STORE AS BASICFILE  (
  TABLESPACE "HRLARGE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."EMPLID", s."BEGIN_DT", s."OP_TRV_MSG_ID", s."OP_TRV_MSG_TYPE", s."OP_TM_TEMPLATE_TYP", s."FIELDNAME", s."FIELDVALUE", s."XLATLONGNAME", s."OP_TM_TMPL_TK_TYPE", s."OP_TM_VAR_PREFIX", s."CONFIG_VALUE", s."CREATE_HDR_FLG", to_clob(''Real data have been MASKED!'') "DESCRLONG" FROM "SYSADM"."PS_OP_TRV_MSG_VAL$DMASK"  s ');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_TRV_MSG_VAL"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "HRLARGE"
 LOB ("DESCRLONG") STORE AS BASICFILE  (
  TABLESPACE "HRLARGE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."EMPLID", s."BEGIN_DT", s."OP_TRV_MSG_ID", s."OP_TRV_MSG_TYPE", s."OP_TM_TEMPLATE_TYP", s."FIELDNAME", s."FIELDVALUE", s."XLATLONGNAME", s."OP_TM_TMPL_TK_TYPE", s."OP_TM_VAR_PREFIX", s."CONFIG_VALUE", s."CREATE_HDR_FLG", to_clob(''Real data have been MASKED!'') "DESCRLONG" FROM "SYSADM"."PS_OP_TRV_MSG_VAL$DMASK"  s ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1197_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1198_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1198 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_TRV_MSG_VAL" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_TRV_MSG_VAL" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1198_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1199_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1199 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_TRV_MSG_VAL$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_TRV_MSG_VAL$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1199_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1200_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1200 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS0OP_TRV_MSG_VAL" ON "SYSADM"."PS_OP_TRV_MSG_VAL" ("OP_TM_TEMPLATE_TYP","EMPLID","BEGIN_DT","OP_TRV_MSG_ID","OP_TRV_MSG_TYPE","FIELDNAME","FIELDVALUE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS0OP_TRV_MSG_VAL" ON "SYSADM"."PS_OP_TRV_MSG_VAL" ("OP_TM_TEMPLATE_TYP","EMPLID","BEGIN_DT","OP_TRV_MSG_ID","OP_TRV_MSG_TYPE","FIELDNAME","FIELDVALUE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1200_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1201_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1201 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS0OP_TRV_MSG_VAL" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS0OP_TRV_MSG_VAL" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1201_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1202_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1202 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS1OP_TRV_MSG_VAL" ON "SYSADM"."PS_OP_TRV_MSG_VAL" ("OP_TM_TMPL_TK_TYPE","EMPLID","BEGIN_DT","OP_TRV_MSG_ID","OP_TRV_MSG_TYPE","FIELDNAME","FIELDVALUE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS1OP_TRV_MSG_VAL" ON "SYSADM"."PS_OP_TRV_MSG_VAL" ("OP_TM_TMPL_TK_TYPE","EMPLID","BEGIN_DT","OP_TRV_MSG_ID","OP_TRV_MSG_TYPE","FIELDNAME","FIELDVALUE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1202_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1203_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1203 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS1OP_TRV_MSG_VAL" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS1OP_TRV_MSG_VAL" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1203_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1204_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1204 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS2OP_TRV_MSG_VAL" ON "SYSADM"."PS_OP_TRV_MSG_VAL" ("CREATE_HDR_FLG","EMPLID","BEGIN_DT","OP_TRV_MSG_ID","OP_TRV_MSG_TYPE","FIELDNAME","FIELDVALUE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS2OP_TRV_MSG_VAL" ON "SYSADM"."PS_OP_TRV_MSG_VAL" ("CREATE_HDR_FLG","EMPLID","BEGIN_DT","OP_TRV_MSG_ID","OP_TRV_MSG_TYPE","FIELDNAME","FIELDVALUE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1204_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1205_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1205 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS2OP_TRV_MSG_VAL" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS2OP_TRV_MSG_VAL" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1205_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1206_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1206 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_TRV_MSG_VAL" ON "SYSADM"."PS_OP_TRV_MSG_VAL" ("EMPLID","BEGIN_DT","OP_TRV_MSG_ID","OP_TRV_MSG_TYPE","FIELDNAME","FIELDVALUE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_TRV_MSG_VAL" ON "SYSADM"."PS_OP_TRV_MSG_VAL" ("EMPLID","BEGIN_DT","OP_TRV_MSG_ID","OP_TRV_MSG_TYPE","FIELDNAME","FIELDVALUE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1206_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1207_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1207 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_TRV_MSG_VAL" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_TRV_MSG_VAL" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1207_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1208_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1208 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_TRV_MSG_VAL" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_TRV_MSG_VAL" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1208_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1209_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1209 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_TRV_MSG_VAL"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_TRV_MSG_VAL"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1209_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1210_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1210 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_TRV_MSG_DAT$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_TRV_MSG_DAT$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1210_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1211_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1211 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_TRV_MSG_DAT" RENAME TO "PS_OP_TRV_MSG_DAT$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_TRV_MSG_DAT" RENAME TO "PS_OP_TRV_MSG_DAT$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1211_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1212_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1212 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_TRV_MSG_DAT"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE"
 LOB ("DESCRLONG") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_DATA_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT))
 LOB ("OP_TRV_MSG") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_DATA_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."EMPLID", s."BEGIN_DT", s."OP_TRV_MSG_ID", s."OP_TRV_MSG_TYPE", s."OP_TM_TEMPLATE_TYP", s."WL_TEMPLATE_ID", s."OP_TM_CABLE_STATUS", s."DATE_CREATED", s."DESCR50", s."OP_TM_TA_ID", s."OP_TRV_MSG_GUID", s."OP_ORI_TRVMSG_GUID", s."CREATEOPRID", s."CREATED_DTTM", s."LASTUPDOPRID", s."LASTUPDDTTM", s."SENT_DT", s."RECEIVED_DT", s."WF_STATUS", to_clob(''Real data have been MASKED!'') "DESCRLONG", s."OP_TRV_MSG" FROM "SYSADM"."PS_OP_TRV_MSG_DAT$DMASK"  s ');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_TRV_MSG_DAT"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE"
 LOB ("DESCRLONG") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_DATA_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT))
 LOB ("OP_TRV_MSG") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_DATA_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."EMPLID", s."BEGIN_DT", s."OP_TRV_MSG_ID", s."OP_TRV_MSG_TYPE", s."OP_TM_TEMPLATE_TYP", s."WL_TEMPLATE_ID", s."OP_TM_CABLE_STATUS", s."DATE_CREATED", s."DESCR50", s."OP_TM_TA_ID", s."OP_TRV_MSG_GUID", s."OP_ORI_TRVMSG_GUID", s."CREATEOPRID", s."CREATED_DTTM", s."LASTUPDOPRID", s."LASTUPDDTTM", s."SENT_DT", s."RECEIVED_DT", s."WF_STATUS", to_clob(''Real data have been MASKED!'') "DESCRLONG", s."OP_TRV_MSG" FROM "SYSADM"."PS_OP_TRV_MSG_DAT$DMASK"  s ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1212_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1213_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1213 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_TRV_MSG_DAT" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_TRV_MSG_DAT" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1213_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1214_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1214 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_TRV_MSG_DAT$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_TRV_MSG_DAT$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1214_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1215_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1215 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS0OP_TRV_MSG_DAT" ON "SYSADM"."PS_OP_TRV_MSG_DAT" ("OP_TM_TEMPLATE_TYP","EMPLID","BEGIN_DT","OP_TRV_MSG_ID","OP_TRV_MSG_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS0OP_TRV_MSG_DAT" ON "SYSADM"."PS_OP_TRV_MSG_DAT" ("OP_TM_TEMPLATE_TYP","EMPLID","BEGIN_DT","OP_TRV_MSG_ID","OP_TRV_MSG_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1215_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1216_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1216 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS0OP_TRV_MSG_DAT" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS0OP_TRV_MSG_DAT" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1216_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1217_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1217 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS1OP_TRV_MSG_DAT" ON "SYSADM"."PS_OP_TRV_MSG_DAT" ("OP_TRV_MSG_GUID","EMPLID","BEGIN_DT","OP_TRV_MSG_ID","OP_TRV_MSG_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS1OP_TRV_MSG_DAT" ON "SYSADM"."PS_OP_TRV_MSG_DAT" ("OP_TRV_MSG_GUID","EMPLID","BEGIN_DT","OP_TRV_MSG_ID","OP_TRV_MSG_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1217_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1218_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1218 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS1OP_TRV_MSG_DAT" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS1OP_TRV_MSG_DAT" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1218_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1219_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1219 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS2OP_TRV_MSG_DAT" ON "SYSADM"."PS_OP_TRV_MSG_DAT" ("OP_ORI_TRVMSG_GUID","EMPLID","BEGIN_DT","OP_TRV_MSG_ID","OP_TRV_MSG_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS2OP_TRV_MSG_DAT" ON "SYSADM"."PS_OP_TRV_MSG_DAT" ("OP_ORI_TRVMSG_GUID","EMPLID","BEGIN_DT","OP_TRV_MSG_ID","OP_TRV_MSG_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1219_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1220_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1220 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS2OP_TRV_MSG_DAT" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS2OP_TRV_MSG_DAT" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1220_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1221_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1221 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_TRV_MSG_DAT" ON "SYSADM"."PS_OP_TRV_MSG_DAT" ("EMPLID","BEGIN_DT","OP_TRV_MSG_ID","OP_TRV_MSG_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_TRV_MSG_DAT" ON "SYSADM"."PS_OP_TRV_MSG_DAT" ("EMPLID","BEGIN_DT","OP_TRV_MSG_ID","OP_TRV_MSG_TYPE")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1221_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1222_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1222 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_TRV_MSG_DAT" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_TRV_MSG_DAT" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1222_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1223_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1223 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_TRV_MSG_DAT" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_TRV_MSG_DAT" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1223_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1224_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1224 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_TRV_MSG_DAT"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_TRV_MSG_DAT"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1224_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1225_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1225 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13187" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13187" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1225_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1226_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1226 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_POSN_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13187
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_POSN_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13187"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "OP_WORKING_TITLE" from "SYSADM"."PS_OP_POSN_STG");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 1, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13187
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "OP_WORKING_TITLE" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_POSN_STG" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13187"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1226_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1227_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1227 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13187_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13187_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1227_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1228_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1228 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13187_IDX ON MGMT_DM_TT_13187(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13187_IDX ON MGMT_DM_TT_13187(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1228_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1229_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1229 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_POSN_STG$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_POSN_STG$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1229_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1230_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1230 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_POSN_STG" RENAME TO "PS_OP_POSN_STG$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_POSN_STG" RENAME TO "PS_OP_POSN_STG$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1230_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1231_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1231 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_POSN_STG"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "HRAPP1"
 LOB ("DESCRLONG") STORE AS BASICFILE  (
  TABLESPACE "HRAPP1" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."OP_POS_GUID", s."OP_EAPS_FEP_GUID", s."POSITION_NBR", s."SOURCE", s."COUNTRY", s."OP_POST_NUM", s."OP_POST_NAME", s."EFFDT", s."STATUS_FIELD", s."OP_POSITION_TYPE", s."AGENCY", s."JOBCODE", s."BUSINESS_UNIT", s."REG_TEMP", s."FULL_PART_TIME", s."DEPTID", CAST(nvl(c1m13187.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."OP_POST_SECTION_ID", s."GVT_SUB_AGENCY", s."OP_ICASS_AGENCY_CD", s."OP_OBO_SECTION", s."OP_OBO_OFFICE", s."OP_OBO_TITLE", s."OP_OBO_SPACETYPE", s."OP_OBO_CAA_IND", s."OP_OBO_USPOS_IND", s."OP_OBO_DESK_IND", s."OP_OBO_COL_IND", s."OP_OBO_ALT_LOC_TXT", s."OP_STFG_PTRN_IND", s."OP_STFG_PTRN_ORDER", s."OP_SKILL_CD2", s."OP_SOURCE_POS_NBR", s."GVT_EXEC_FIN_DISCL", s."GVT_PRESIDENT_APPT", s."GVT_PROC_INTEG_PSN", s."GVT_MOB_POSN_IND", s."GVT_INTEL_POSN", s."GVT_DRUG_TEST_REQ", s."SEASONAL", s."GVT_STAFF_LINE", s."TRN_PROGRAM", s."LANGUAGE_SKILL", s."GVT_LEO_POSITION", s."GVT_POSN_SENS_CD", s."CONFIDENTIAL_POSN", s."BUDGETED_POSN", s."GVT_POI", s."GVT_POSN_LOC", s."GVT_OBLIG_EXPIR_DT", s."GVT_OBLIGATED_TO", s."GVT_TARGET_GRADE", s."GVT_FUND_SOURCE", s."GVT_PAR_NBR", s."GVT_WORK_SCHED", s."GVT_LAST_AUDIT_DT", s."GVT_AUDITED_BY_ID", s."GVT_NTE_DATE", s."GVT_DT_POSN_ESTAB", s."GVT_COMP_LEVEL", s."GVT_COMP_AREA", s."GVT_POSN_OCCUPIED", s."GVT_ORG_TTL_CD", s."GVT_PAREN_TITLE", s."GVT_OCC_SERIES", CAST(DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."DESCRSHORT") as VARCHAR2(10 CHAR)) "DESCRSHORT", s."KEY_POSITION", s."STATUS_DT", s."POSN_STATUS", s."ACTION_REASON", s."ACTION", s."EFF_STATUS", s."SEC_CLEARANCE_TYPE", s."LOCATION", s."COMPANY", s."SETID", s."DATE_LOADED", s."PROCESSED", s."PROCESSINSTANCE", s."OP_SKILL_CD", s."COMMENTS_256", to_clob(''Real data have been MASKED!'') "DESCRLONG" FROM "SYSADM"."PS_OP_POSN_STG$DMASK"  s , MGMT_DM_TT_13187 c1m13187 WHERE s."OP_WORKING_TITLE" = c1m13187.ORIG_VAL (+) AND NVL(c1m13187.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_POSN_STG"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "HRAPP1"
 LOB ("DESCRLONG") STORE AS BASICFILE  (
  TABLESPACE "HRAPP1" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."OP_POS_GUID", s."OP_EAPS_FEP_GUID", s."POSITION_NBR", s."SOURCE", s."COUNTRY", s."OP_POST_NUM", s."OP_POST_NAME", s."EFFDT", s."STATUS_FIELD", s."OP_POSITION_TYPE", s."AGENCY", s."JOBCODE", s."BUSINESS_UNIT", s."REG_TEMP", s."FULL_PART_TIME", s."DEPTID", CAST(nvl(c1m13187.NEW_VAL, s."OP_WORKING_TITLE") AS VARCHAR2(70 CHAR)) "OP_WORKING_TITLE", s."OP_POST_SECTION_ID", s."GVT_SUB_AGENCY", s."OP_ICASS_AGENCY_CD", s."OP_OBO_SECTION", s."OP_OBO_OFFICE", s."OP_OBO_TITLE", s."OP_OBO_SPACETYPE", s."OP_OBO_CAA_IND", s."OP_OBO_USPOS_IND", s."OP_OBO_DESK_IND", s."OP_OBO_COL_IND", s."OP_OBO_ALT_LOC_TXT", s."OP_STFG_PTRN_IND", s."OP_STFG_PTRN_ORDER", s."OP_SKILL_CD2", s."OP_SOURCE_POS_NBR", s."GVT_EXEC_FIN_DISCL", s."GVT_PRESIDENT_APPT", s."GVT_PROC_INTEG_PSN", s."GVT_MOB_POSN_IND", s."GVT_INTEL_POSN", s."GVT_DRUG_TEST_REQ", s."SEASONAL", s."GVT_STAFF_LINE", s."TRN_PROGRAM", s."LANGUAGE_SKILL", s."GVT_LEO_POSITION", s."GVT_POSN_SENS_CD", s."CONFIDENTIAL_POSN", s."BUDGETED_POSN", s."GVT_POI", s."GVT_POSN_LOC", s."GVT_OBLIG_EXPIR_DT", s."GVT_OBLIGATED_TO", s."GVT_TARGET_GRADE", s."GVT_FUND_SOURCE", s."GVT_PAR_NBR", s."GVT_WORK_SCHED", s."GVT_LAST_AUDIT_DT", s."GVT_AUDITED_BY_ID", s."GVT_NTE_DATE", s."GVT_DT_POSN_ESTAB", s."GVT_COMP_LEVEL", s."GVT_COMP_AREA", s."GVT_POSN_OCCUPIED", s."GVT_ORG_TTL_CD", s."GVT_PAREN_TITLE", s."GVT_OCC_SERIES", CAST(DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."DESCRSHORT") as VARCHAR2(10 CHAR)) "DESCRSHORT", s."KEY_POSITION", s."STATUS_DT", s."POSN_STATUS", s."ACTION_REASON", s."ACTION", s."EFF_STATUS", s."SEC_CLEARANCE_TYPE", s."LOCATION", s."COMPANY", s."SETID", s."DATE_LOADED", s."PROCESSED", s."PROCESSINSTANCE", s."OP_SKILL_CD", s."COMMENTS_256", to_clob(''Real data have been MASKED!'') "DESCRLONG" FROM "SYSADM"."PS_OP_POSN_STG$DMASK"  s , MGMT_DM_TT_13187 c1m13187 WHERE s."OP_WORKING_TITLE" = c1m13187.ORIG_VAL (+) AND NVL(c1m13187.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1231_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1232_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1232 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_POSN_STG" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_POSN_STG" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1232_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1233_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1233 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_POSN_STG$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_POSN_STG$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1233_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1234_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1234 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13187" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13187" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1234_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1235_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1235 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_POSN_STG" ON "SYSADM"."PS_OP_POSN_STG" ("OP_POS_GUID","OP_EAPS_FEP_GUID","POSITION_NBR")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_POSN_STG" ON "SYSADM"."PS_OP_POSN_STG" ("OP_POS_GUID","OP_EAPS_FEP_GUID","POSITION_NBR")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1235_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1236_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1236 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_POSN_STG" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_POSN_STG" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1236_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1237_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1237 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_POSN_STG" MODIFY ("OP_WORKING_TITLE" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_POSN_STG" MODIFY ("OP_WORKING_TITLE" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1237_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1238_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1238 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_POSN_STG" MODIFY ("DESCRSHORT" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_POSN_STG" MODIFY ("DESCRSHORT" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1238_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1239_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1239 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_POSN_STG" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_POSN_STG" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1239_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1240_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1240 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_POSN_STG"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_POSN_STG"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1240_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1241_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1241 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13189" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13189" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1241_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1242_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1242 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "GVT_ORG_TTL_DESCR" from "SYSADM"."PS_POSITION_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13189
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "GVT_ORG_TTL_DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_POSITION_DATA" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13189"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "GVT_ORG_TTL_DESCR" from "SYSADM"."PS_POSITION_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13189
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "GVT_ORG_TTL_DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_POSITION_DATA" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13189"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1242_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1243_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1243 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13189_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13189_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1243_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1244_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1244 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13189_IDX ON MGMT_DM_TT_13189(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13189_IDX ON MGMT_DM_TT_13189(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1244_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1245_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1245 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13191" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13191" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1245_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1246_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1246 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_POSITION_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13191
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_POSITION_DATA" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13191"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_POSITION_DATA");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13191
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_POSITION_DATA" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13191"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1246_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1247_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1247 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13191_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13191_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1247_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1248_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1248 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13191_IDX ON MGMT_DM_TT_13191(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13191_IDX ON MGMT_DM_TT_13191(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1248_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1249_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1249 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_POSITION_DATA$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_POSITION_DATA$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1249_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1250_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1250 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_POSITION_DATA" RENAME TO "PS_POSITION_DATA$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_POSITION_DATA" RENAME TO "PS_POSITION_DATA$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1250_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1251_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1251 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_POSITION_DATA"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 73728 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE"
 LOB ("DESCRLONG") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."POSITION_NBR", s."EFFDT", s."EFF_STATUS", CAST(nvl(c2m13191.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", CAST(DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."DESCRSHORT") as VARCHAR2(10 CHAR)) "DESCRSHORT", s."ACTION", s."ACTION_REASON", s."ACTION_DT", s."BUSINESS_UNIT", s."DEPTID", s."JOBCODE", s."POSN_STATUS", s."STATUS_DT", s."BUDGETED_POSN", s."CONFIDENTIAL_POSN", s."KEY_POSITION", s."JOB_SHARE", s."MAX_HEAD_COUNT", s."UPDATE_INCUMBENTS", s."REPORTS_TO", s."REPORT_DOTTED_LINE", s."ORGCODE", s."ORGCODE_FLAG", s."LOCATION", s."MAIL_DROP", s."COUNTRY_CODE", s."PHONE", s."COMPANY", s."STD_HOURS", s."STD_HRS_FREQUENCY", s."UNION_CD", s."SHIFT", s."REG_TEMP", s."FULL_PART_TIME", s."MON_HRS", s."TUES_HRS", s."WED_HRS", s."THURS_HRS", s."FRI_HRS", s."SAT_HRS", s."SUN_HRS", s."BARG_UNIT", s."GVT_PAY_PLAN", s."SEASONAL", s."TRN_PROGRAM", s."LANGUAGE_SKILL", s."MANAGER_LEVEL", s."FLSA_STATUS", s."GVT_WIP_STATUS", s."GVT_STATUS_TYPE", s."GVT_WORK_SCHED", s."GVT_SUB_AGENCY", s."GVT_DT_POSN_ESTAB", s."GVT_COMP_AREA", s."GVT_COMP_LEVEL", s."GVT_ORG_TTL_CD", CAST(nvl(c0m13189.NEW_VAL, s."GVT_ORG_TTL_DESCR") AS VARCHAR2(70 CHAR)) "GVT_ORG_TTL_DESCR", s."GVT_DRUG_TEST_REQ", s."GVT_FUND_SOURCE", s."GVT_INTEL_POSN", s."GVT_LEO_POSITION", s."GVT_MOB_POSN_IND", s."GVT_PROC_INTEG_PSN", s."GVT_PRESIDENT_APPT", s."GVT_NTE_DATE", s."GVT_OCC_SERIES", s."GVT_PAR_NBR", s."GVT_PAREN_TITLE", s."GVT_PERF_PLAN", s."GVT_POI", s."GVT_POSN_LOC", s."GVT_POSN_OCCUPIED", s."GVT_POSN_SENS_CD", s."GVT_STAFF_LINE", s."GVT_LAST_AUDIT_DT", s."GVT_AUDITED_BY_ID", s."GVT_OBLIGATED_TO", s."GVT_OBLIG_EXPIR_DT", s."GVT_TARGET_GRADE", s."GVT_PI_UPD_IND", s."GVT_EXEC_FIN_DISCL", s."GVT_NFC_FUNCTN_CD", s."GVT_MAINT_REVIEWCD", s."GVT_MANTREV_RESULT", s."GVT_VACY_REVW_CD", s."GVT_ORG_SUBAGENCY", s."GVT_ORG_NUMCD1", s."GVT_ORG_NUMCD2", s."GVT_ORG_NUMCD3", s."GVT_ORG_NUMCD4", s."GVT_ORG_NUMCD5", s."GVT_ORG_NUMCD6", s."GVT_ORG_NUMCD7", s."GVT_NFC_PI_IND_OVR", s."GVT_CYBER_SEC_CD", s."REG_REGION", s."CLASS_INDC", s."ENCUMBER_INDC", s."FTE", s."POSITION_POOL_ID", s."EG_ACADEMIC_RANK", s."EG_GROUP", s."ENCUMB_SAL_OPTN", s."ENCUMB_SAL_AMT", s."HEALTH_CERTIFICATE", s."SIGN_AUTHORITY", s."ADDS_TO_FTE_ACTUAL", s."SAL_ADMIN_PLAN", s."GRADE", s."GRADE_FROM", s."STEP_FROM", s."GRADE_TO",'||
' s."STEP_TO", s."STEP", s."PKG_TEMPLATE_ID", s."PKG_RULE_ID", s."SUPV_LVL_ID", s."INCLUDE_SALPLN_FLG", s."LASTUPDDTTM", s."LASTUPDOPRID", s."SEC_CLEARANCE_TYPE", s."MILITARY_SERVICE", s."MIL_SVC_COMP_CD", s."MIL_RANK", s."AVAIL_TELEWORK_POS", s."INCLUDE_TITLE", s."ELS_STATUS", to_clob(''Real data have been MASKED!'') "DESCRLONG" FROM "SYSADM"."PS_POSITION_DATA$DMASK"  s , MGMT_DM_TT_13189 c0m13189, MGMT_DM_TT_13191 c2m13191 WHERE s."GVT_ORG_TTL_DESCR" = c0m13189.ORIG_VAL (+) AND NVL(c0m13189.delete_val,0) = 0 AND s."DESCR" = c2m13191.ORIG_VAL (+) AND NVL(c2m13191.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_POSITION_DATA"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 73728 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE"
 LOB ("DESCRLONG") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."POSITION_NBR", s."EFFDT", s."EFF_STATUS", CAST(nvl(c2m13191.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", CAST(DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."DESCRSHORT") as VARCHAR2(10 CHAR)) "DESCRSHORT", s."ACTION", s."ACTION_REASON", s."ACTION_DT", s."BUSINESS_UNIT", s."DEPTID", s."JOBCODE", s."POSN_STATUS", s."STATUS_DT", s."BUDGETED_POSN", s."CONFIDENTIAL_POSN", s."KEY_POSITION", s."JOB_SHARE", s."MAX_HEAD_COUNT", s."UPDATE_INCUMBENTS", s."REPORTS_TO", s."REPORT_DOTTED_LINE", s."ORGCODE", s."ORGCODE_FLAG", s."LOCATION", s."MAIL_DROP", s."COUNTRY_CODE", s."PHONE", s."COMPANY", s."STD_HOURS", s."STD_HRS_FREQUENCY", s."UNION_CD", s."SHIFT", s."REG_TEMP", s."FULL_PART_TIME", s."MON_HRS", s."TUES_HRS", s."WED_HRS", s."THURS_HRS", s."FRI_HRS", s."SAT_HRS", s."SUN_HRS", s."BARG_UNIT", s."GVT_PAY_PLAN", s."SEASONAL", s."TRN_PROGRAM", s."LANGUAGE_SKILL", s."MANAGER_LEVEL", s."FLSA_STATUS", s."GVT_WIP_STATUS", s."GVT_STATUS_TYPE", s."GVT_WORK_SCHED", s."GVT_SUB_AGENCY", s."GVT_DT_POSN_ESTAB", s."GVT_COMP_AREA", s."GVT_COMP_LEVEL", s."GVT_ORG_TTL_CD", CAST(nvl(c0m13189.NEW_VAL, s."GVT_ORG_TTL_DESCR") AS VARCHAR2(70 CHAR)) "GVT_ORG_TTL_DESCR", s."GVT_DRUG_TEST_REQ", s."GVT_FUND_SOURCE", s."GVT_INTEL_POSN", s."GVT_LEO_POSITION", s."GVT_MOB_POSN_IND", s."GVT_PROC_INTEG_PSN", s."GVT_PRESIDENT_APPT", s."GVT_NTE_DATE", s."GVT_OCC_SERIES", s."GVT_PAR_NBR", s."GVT_PAREN_TITLE", s."GVT_PERF_PLAN", s."GVT_POI", s."GVT_POSN_LOC", s."GVT_POSN_OCCUPIED", s."GVT_POSN_SENS_CD", s."GVT_STAFF_LINE", s."GVT_LAST_AUDIT_DT", s."GVT_AUDITED_BY_ID", s."GVT_OBLIGATED_TO", s."GVT_OBLIG_EXPIR_DT", s."GVT_TARGET_GRADE", s."GVT_PI_UPD_IND", s."GVT_EXEC_FIN_DISCL", s."GVT_NFC_FUNCTN_CD", s."GVT_MAINT_REVIEWCD", s."GVT_MANTREV_RESULT", s."GVT_VACY_REVW_CD", s."GVT_ORG_SUBAGENCY", s."GVT_ORG_NUMCD1", s."GVT_ORG_NUMCD2", s."GVT_ORG_NUMCD3", s."GVT_ORG_NUMCD4", s."GVT_ORG_NUMCD5", s."GVT_ORG_NUMCD6", s."GVT_ORG_NUMCD7", s."GVT_NFC_PI_IND_OVR", s."GVT_CYBER_SEC_CD", s."REG_REGION", s."CLASS_INDC", s."ENCUMBER_INDC", s."FTE", s."POSITION_POOL_ID", s."EG_ACADEMIC_RANK", s."EG_GROUP", s."ENCUMB_SAL_OPTN", s."ENCUMB_SAL_AMT", s."HEALTH_CERTIFICATE", s."SIGN_AUTHORITY", s."ADDS_TO_FTE_ACTUAL", s."SAL_ADMIN_PLAN", s."GRADE", s."GRADE_FROM", s."STEP_FROM", s."GRADE_TO",'||
' s."STEP_TO", s."STEP", s."PKG_TEMPLATE_ID", s."PKG_RULE_ID", s."SUPV_LVL_ID", s."INCLUDE_SALPLN_FLG", s."LASTUPDDTTM", s."LASTUPDOPRID", s."SEC_CLEARANCE_TYPE", s."MILITARY_SERVICE", s."MIL_SVC_COMP_CD", s."MIL_RANK", s."AVAIL_TELEWORK_POS", s."INCLUDE_TITLE", s."ELS_STATUS", to_clob(''Real data have been MASKED!'') "DESCRLONG" FROM "SYSADM"."PS_POSITION_DATA$DMASK"  s , MGMT_DM_TT_13189 c0m13189, MGMT_DM_TT_13191 c2m13191 WHERE s."GVT_ORG_TTL_DESCR" = c0m13189.ORIG_VAL (+) AND NVL(c0m13189.delete_val,0) = 0 AND s."DESCR" = c2m13191.ORIG_VAL (+) AND NVL(c2m13191.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1251_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1252_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1252 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_POSITION_DATA" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_POSITION_DATA" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1252_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1253_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1253 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_POSITION_DATA$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_POSITION_DATA$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1253_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1254_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1254 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13189" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13189" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1254_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1255_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1255 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13191" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13191" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1255_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1256_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1256 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS0POSITION_DATA" ON "SYSADM"."PS_POSITION_DATA" ("DESCR","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS0POSITION_DATA" ON "SYSADM"."PS_POSITION_DATA" ("DESCR","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1256_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1257_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1257 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS0POSITION_DATA" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS0POSITION_DATA" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1257_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1258_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1258 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS1POSITION_DATA" ON "SYSADM"."PS_POSITION_DATA" ("BUSINESS_UNIT","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS1POSITION_DATA" ON "SYSADM"."PS_POSITION_DATA" ("BUSINESS_UNIT","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1258_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1259_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1259 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS1POSITION_DATA" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS1POSITION_DATA" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1259_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1260_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1260 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS2POSITION_DATA" ON "SYSADM"."PS_POSITION_DATA" ("DEPTID","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS2POSITION_DATA" ON "SYSADM"."PS_POSITION_DATA" ("DEPTID","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1260_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1261_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1261 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS2POSITION_DATA" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS2POSITION_DATA" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1261_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1262_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1262 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS3POSITION_DATA" ON "SYSADM"."PS_POSITION_DATA" ("JOBCODE","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS3POSITION_DATA" ON "SYSADM"."PS_POSITION_DATA" ("JOBCODE","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1262_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1263_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1263 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS3POSITION_DATA" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS3POSITION_DATA" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1263_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1264_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1264 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS4POSITION_DATA" ON "SYSADM"."PS_POSITION_DATA" ("POSN_STATUS","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS4POSITION_DATA" ON "SYSADM"."PS_POSITION_DATA" ("POSN_STATUS","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 131072 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1264_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1265_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1265 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS4POSITION_DATA" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS4POSITION_DATA" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1265_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1266_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1266 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS5POSITION_DATA" ON "SYSADM"."PS_POSITION_DATA" ("JOB_SHARE","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS5POSITION_DATA" ON "SYSADM"."PS_POSITION_DATA" ("JOB_SHARE","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1266_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1267_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1267 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS5POSITION_DATA" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS5POSITION_DATA" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1267_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1268_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1268 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS6POSITION_DATA" ON "SYSADM"."PS_POSITION_DATA" ("REPORTS_TO","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 49152 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS6POSITION_DATA" ON "SYSADM"."PS_POSITION_DATA" ("REPORTS_TO","POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 49152 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1268_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1269_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1269 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS6POSITION_DATA" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS6POSITION_DATA" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1269_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1270_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1270 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_POSITION_DATA" ON "SYSADM"."PS_POSITION_DATA" ("POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_POSITION_DATA" ON "SYSADM"."PS_POSITION_DATA" ("POSITION_NBR","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1270_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1271_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1271 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_POSITION_DATA" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_POSITION_DATA" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1271_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1272_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1272 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_POSITION_DATA" MODIFY ("DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_POSITION_DATA" MODIFY ("DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1272_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1273_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1273 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_POSITION_DATA" MODIFY ("DESCRSHORT" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_POSITION_DATA" MODIFY ("DESCRSHORT" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1273_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1274_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1274 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_POSITION_DATA" MODIFY ("GVT_ORG_TTL_DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_POSITION_DATA" MODIFY ("GVT_ORG_TTL_DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1274_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1275_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1275 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_POSITION_DATA" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_POSITION_DATA" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1275_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1276_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1276 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_POSITION_DATA"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_POSITION_DATA"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1276_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1277_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1277 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13194" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13194" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1277_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1278_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1278 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_OP_JOBC_LOD");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13194
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBC_LOD" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13194"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_OP_JOBC_LOD");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13194
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_OP_JOBC_LOD" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13194"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1278_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1279_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1279 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13194_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13194_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1279_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1280_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1280 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13194_IDX ON MGMT_DM_TT_13194(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13194_IDX ON MGMT_DM_TT_13194(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1280_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1281_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1281 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_JOBC_LOD$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_JOBC_LOD$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1281_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1282_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1282 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBC_LOD" RENAME TO "PS_OP_JOBC_LOD$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBC_LOD" RENAME TO "PS_OP_JOBC_LOD$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1282_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1283_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1283 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_OP_JOBC_LOD"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "HRAPP"
 LOB ("DESCRLONG") STORE AS BASICFILE  (
  TABLESPACE "HRAPP" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."SETID", s."JOBCODE", s."EFFDT", s."EFF_STATUS", CAST(nvl(c1m13194.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", CAST(DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."DESCRSHORT") as VARCHAR2(10 CHAR)) "DESCRSHORT", s."JOB_FAMILY", s."GVT_OCC_SERIES", s."SETID_SALARY", s."SAL_ADMIN_PLAN", s."GRADE", s."STEP", s."MANAGER_LEVEL", s."REG_REGION", s."LASTUPDOPRID", s."LASTUPDDTTM", s."OP_POST_NUM", s."OP_POSITION_NBR", s."OP_POSITION_ORIGIN", s."OP_DATA_SOURCE", s."OP_JOBCODE", s."PROCESSED", s."GVT_POSN_TITLE_CD", s."GVT_ORG_TTL_CD", s."OP_POS_GUID", s."REG_TEMP", s."COMPANY", s."GVT_SUB_AGENCY", s."GVT_ORG_TTL_DESCR", s."STD_HOURS", s."OP_GUID_JOB_SERIES", s."OP_GUID_JOB_TITLE", s."COUNTRY", s."OP_POST_NAME", s."PROCESSED_FLAG", s."SOURCE", s."COMMENTS_256", to_clob(''Real data have been MASKED!'') "DESCRLONG" FROM "SYSADM"."PS_OP_JOBC_LOD$DMASK"  s , MGMT_DM_TT_13194 c1m13194 WHERE s."DESCR" = c1m13194.ORIG_VAL (+) AND NVL(c1m13194.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_OP_JOBC_LOD"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "HRAPP"
 LOB ("DESCRLONG") STORE AS BASICFILE  (
  TABLESPACE "HRAPP" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."SETID", s."JOBCODE", s."EFFDT", s."EFF_STATUS", CAST(nvl(c1m13194.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", CAST(DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."DESCRSHORT") as VARCHAR2(10 CHAR)) "DESCRSHORT", s."JOB_FAMILY", s."GVT_OCC_SERIES", s."SETID_SALARY", s."SAL_ADMIN_PLAN", s."GRADE", s."STEP", s."MANAGER_LEVEL", s."REG_REGION", s."LASTUPDOPRID", s."LASTUPDDTTM", s."OP_POST_NUM", s."OP_POSITION_NBR", s."OP_POSITION_ORIGIN", s."OP_DATA_SOURCE", s."OP_JOBCODE", s."PROCESSED", s."GVT_POSN_TITLE_CD", s."GVT_ORG_TTL_CD", s."OP_POS_GUID", s."REG_TEMP", s."COMPANY", s."GVT_SUB_AGENCY", s."GVT_ORG_TTL_DESCR", s."STD_HOURS", s."OP_GUID_JOB_SERIES", s."OP_GUID_JOB_TITLE", s."COUNTRY", s."OP_POST_NAME", s."PROCESSED_FLAG", s."SOURCE", s."COMMENTS_256", to_clob(''Real data have been MASKED!'') "DESCRLONG" FROM "SYSADM"."PS_OP_JOBC_LOD$DMASK"  s , MGMT_DM_TT_13194 c1m13194 WHERE s."DESCR" = c1m13194.ORIG_VAL (+) AND NVL(c1m13194.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1283_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1284_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1284 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBC_LOD" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBC_LOD" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1284_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1285_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1285 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_OP_JOBC_LOD$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_OP_JOBC_LOD$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1285_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1286_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1286 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13194" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13194" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1286_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1287_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1287 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS0OP_JOBC_LOD" ON "SYSADM"."PS_OP_JOBC_LOD" ("DESCR","JOBCODE","OP_POS_GUID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS0OP_JOBC_LOD" ON "SYSADM"."PS_OP_JOBC_LOD" ("DESCR","JOBCODE","OP_POS_GUID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1287_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1288_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1288 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS0OP_JOBC_LOD" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS0OP_JOBC_LOD" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1288_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1289_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1289 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_OP_JOBC_LOD" ON "SYSADM"."PS_OP_JOBC_LOD" ("JOBCODE","OP_POS_GUID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_OP_JOBC_LOD" ON "SYSADM"."PS_OP_JOBC_LOD" ("JOBCODE","OP_POS_GUID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1289_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1290_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1290 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_OP_JOBC_LOD" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_OP_JOBC_LOD" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1290_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1291_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1291 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBC_LOD" MODIFY ("DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBC_LOD" MODIFY ("DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1291_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1292_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1292 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_OP_JOBC_LOD" MODIFY ("DESCRSHORT" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_OP_JOBC_LOD" MODIFY ("DESCRSHORT" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1292_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1293_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1293 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JOBC_LOD" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_OP_JOBC_LOD" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1293_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1294_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1294 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_JOBC_LOD"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_OP_JOBC_LOD"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1294_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1295_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1295 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13197" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13197" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1295_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1296_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1296 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "GVT_OFFICIAL_DESCR" from "SYSADM"."PS_JOBCODE_TBL");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13197
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "GVT_OFFICIAL_DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_JOBCODE_TBL" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13197"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "GVT_OFFICIAL_DESCR" from "SYSADM"."PS_JOBCODE_TBL");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13197
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "GVT_OFFICIAL_DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_JOBCODE_TBL" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13197"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1296_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1297_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1297 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13197_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13197_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1297_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1298_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1298 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13197_IDX ON MGMT_DM_TT_13197(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13197_IDX ON MGMT_DM_TT_13197(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1298_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1299_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1299 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13198" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13198" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1299_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1300_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER, arg_hsd IN NUMBER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1300 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_JOBCODE_TBL");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13198
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_JOBCODE_TBL" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', ***)+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13198"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
    cnt0 NUMBER;
    hcnt0 NUMBER;
begin
    select count(*) into adj from (select distinct "DESCR" from "SYSADM"."PS_JOBCODE_TBL");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    select count(*) into cnt0 from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE");
    hcnt0 := greatest(0, cnt0-1);
    hcnt0 := least(4294967295, hcnt0);
    execute immediate ''create table MGMT_DM_TT_13198
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(30 CHAR)) orig_val, CAST(null AS VARCHAR2(30 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        a0.new_val
         AS VARCHAR2(30 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset             from (select "DESCR" orig_val, 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PS_JOBCODE_TBL" ) group by orig_val) s
    ,(select rownum rn, "POSITION_TITLE_TXT" new_val from (select distinct "POSITION_TITLE_TXT" from "MASK"."POSITION_TITLE" order by "POSITION_TITLE_TXT")) a0
 where          ora_hash(s.orig_val, '' || hcnt0 || '', '||arg_hsd||')+1 = a0.rn
 and  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13198"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1300_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1301_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1301 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13198_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13198_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1301_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1302_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1302 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13198_IDX ON MGMT_DM_TT_13198(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13198_IDX ON MGMT_DM_TT_13198(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1302_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1303_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1303 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_JOBCODE_TBL$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_JOBCODE_TBL$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1303_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1304_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1304 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_JOBCODE_TBL" RENAME TO "PS_JOBCODE_TBL$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_JOBCODE_TBL" RENAME TO "PS_JOBCODE_TBL$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1304_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1305_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1305 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PS_JOBCODE_TBL"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 180224 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE"
 LOB ("DESCRLONG") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."SETID", s."JOBCODE", s."EFFDT", s."EFF_STATUS", CAST(nvl(c2m13198.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", CAST(DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."DESCRSHORT") as VARCHAR2(10 CHAR)) "DESCRSHORT", s."JOB_FUNCTION", s."SETID_SALARY", s."SAL_ADMIN_PLAN", s."GRADE", s."STEP", s."MANAGER_LEVEL", s."SURVEY_SALARY", s."SURVEY_JOB_CODE", s."UNION_CD", s."RETRO_RATE", s."RETRO_PERCENT", s."CURRENCY_CD", s."STD_HOURS", s."STD_HRS_FREQUENCY", s."COMP_FREQUENCY", s."WORKERS_COMP_CD", s."JOB_FAMILY", s."JOB_KNOWHOW_POINTS", s."JOB_ACCNTAB_POINTS", s."JOB_PROBSLV_POINTS", s."JOB_POINTS_TOTAL", s."JOB_KNOWHOW_PCT", s."JOB_ACCNTAB_PCT", s."JOB_PROBSLV_PCT", s."REG_TEMP", s."DIRECTLY_TIPPED", s."MED_CHKUP_REQ", s."FLSA_STATUS", s."EEO1CODE", s."EEO4CODE", s."EEO5CODE", s."EEO6CODE", s."EEO_JOB_GROUP", s."US_SOC_CD", s."IPEDSSCODE", s."US_OCC_CD", s."AVAIL_TELEWORK", s."BN_ACA_ELIG_IND", s."CAN_PAYEQ_JOB_CLS", s."CAN_NOC_CD", s."SEASONAL", s."BPS_ACTIVITY_CD", s."ELS_STATUS", s."FUNCTION_CD", s."BA_CD", s."TECHNICAL", s."MED_SURV_REQ", s."EMP_CATEGRY_FRA", s."ACTIVITY_TYPE_FRA", s."INSEE_CD_FRA", s."JOB_CTG_FRA_CD", s."UK_SOC_CD", s."GVT_PAY_PLAN", s."GVT_OCC_SERIES", s."TRN_PROGRAM", s."COMPANY", s."GVT_FUNC_CLASS", s."GVT_POSN_TITLE_CD", CAST(nvl(c1m13197.NEW_VAL, s."GVT_OFFICIAL_DESCR") AS VARCHAR2(70 CHAR)) "GVT_OFFICIAL_DESCR", s."GVT_ORG_TTL_CD", s."GVT_ORG_TTL_DESCR", s."GVT_PAY_BASIS", s."GVT_SUB_AGENCY", s."GVT_POI", s."GVT_PAREN_TITLE", s."GVT_OPM_CERT_NBR", s."GVT_POSN_CLASS_STD", s."GVT_POSN_SENS_CD", s."GVT_IA_ACTIONS", s."GVT_EXEC_FIN_DISCL", s."GVT_EMP_FIN_INT", s."GVT_PATCOB_CD", s."GVT_CLS_STANDARD", s."GVT_CLASSIFIER_ID", s."GVT_DT_CLASSIFIED", s."BARG_UNIT", s."GVT_FUND_SOURCE", s."GVT_LEO_POSITION", s."GVT_PERF_PLAN", s."GVT_TARGET_GRADE", s."GVT_PI_UPD_IND", s."GVT_NFC_FUNCTN_CD", s."GVT_OFF_TITLEPREFX", s."GVT_NFC_PI_IND_OVR", s."ENCUMBER_INDC", s."POSN_MGMT_INDC", s."EG_ACADEMIC_RANK", s."EG_GROUP", s."HP_STATS_DUTIES", s."HP_STATS_RPT_FLAG", s."ENCUMB_SAL_OPTN", s."ENCUMB_SAL_AMT", s."INAIL_CODE", s."CNO_ESP", s."ASCO_CD_AUS", s."PKG_TEMPLATE_ID", s."PKG_RULE_ID", s."FUNCTION_AUS", s."ANN_CNTACT_HRS_AUS", s."TEACH_WEEKS_AUS", s."CASUAL_TYPE_AUS", s."WORK_DAY_HOURS", s."FA_PAY_PROGRAM", s."ELECTION_GROUP",'||
' s."LABOR_AGREEMENT", s."FP_PROF_CATG", s."FP_JOB_FMLY", s."FP_OFF_COLAG", s."FP_MATRIX_TYP", s."FP_MATRIX_CD", s."FP_BUSINESS_CD", s."FP_JOBCD_ACC", s."FP_ATCH_AREA", s."FP_JOB_TYP", s."FP_AUTO_RATFY", s."LAST_UPDATE_DATE", s."REG_REGION", s."SAL_RANGE_MIN_RATE", s."SAL_RANGE_MID_RATE", s."SAL_RANGE_MAX_RATE", s."SAL_RANGE_CURRENCY", s."SAL_RANGE_FREQ", s."MILITARY_SERVICE", s."MIL_RANK", s."JOB_SUB_FUNC", s."LASTUPDOPRID", s."LASTUPDDTTM", s."KEY_JOBCODE", to_clob(''Real data have been MASKED!'') "DESCRLONG" FROM "SYSADM"."PS_JOBCODE_TBL$DMASK"  s , MGMT_DM_TT_13197 c1m13197, MGMT_DM_TT_13198 c2m13198 WHERE s."GVT_OFFICIAL_DESCR" = c1m13197.ORIG_VAL (+) AND NVL(c1m13197.delete_val,0) = 0 AND s."DESCR" = c2m13198.ORIG_VAL (+) AND NVL(c2m13198.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PS_JOBCODE_TBL"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 180224 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE"
 LOB ("DESCRLONG") STORE AS BASICFILE  (
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ENABLE STORAGE IN ROW CHUNK 8192 RETENTION 
  NOCACHE LOGGING
  STORAGE( INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) AS SELECT s."SETID", s."JOBCODE", s."EFFDT", s."EFF_STATUS", CAST(nvl(c2m13198.NEW_VAL, s."DESCR") AS VARCHAR2(30 CHAR)) "DESCR", CAST(DBSNMP.DM_FMTLIB.MGMT_DM_SCRAMBLE('''','''',s."DESCRSHORT") as VARCHAR2(10 CHAR)) "DESCRSHORT", s."JOB_FUNCTION", s."SETID_SALARY", s."SAL_ADMIN_PLAN", s."GRADE", s."STEP", s."MANAGER_LEVEL", s."SURVEY_SALARY", s."SURVEY_JOB_CODE", s."UNION_CD", s."RETRO_RATE", s."RETRO_PERCENT", s."CURRENCY_CD", s."STD_HOURS", s."STD_HRS_FREQUENCY", s."COMP_FREQUENCY", s."WORKERS_COMP_CD", s."JOB_FAMILY", s."JOB_KNOWHOW_POINTS", s."JOB_ACCNTAB_POINTS", s."JOB_PROBSLV_POINTS", s."JOB_POINTS_TOTAL", s."JOB_KNOWHOW_PCT", s."JOB_ACCNTAB_PCT", s."JOB_PROBSLV_PCT", s."REG_TEMP", s."DIRECTLY_TIPPED", s."MED_CHKUP_REQ", s."FLSA_STATUS", s."EEO1CODE", s."EEO4CODE", s."EEO5CODE", s."EEO6CODE", s."EEO_JOB_GROUP", s."US_SOC_CD", s."IPEDSSCODE", s."US_OCC_CD", s."AVAIL_TELEWORK", s."BN_ACA_ELIG_IND", s."CAN_PAYEQ_JOB_CLS", s."CAN_NOC_CD", s."SEASONAL", s."BPS_ACTIVITY_CD", s."ELS_STATUS", s."FUNCTION_CD", s."BA_CD", s."TECHNICAL", s."MED_SURV_REQ", s."EMP_CATEGRY_FRA", s."ACTIVITY_TYPE_FRA", s."INSEE_CD_FRA", s."JOB_CTG_FRA_CD", s."UK_SOC_CD", s."GVT_PAY_PLAN", s."GVT_OCC_SERIES", s."TRN_PROGRAM", s."COMPANY", s."GVT_FUNC_CLASS", s."GVT_POSN_TITLE_CD", CAST(nvl(c1m13197.NEW_VAL, s."GVT_OFFICIAL_DESCR") AS VARCHAR2(70 CHAR)) "GVT_OFFICIAL_DESCR", s."GVT_ORG_TTL_CD", s."GVT_ORG_TTL_DESCR", s."GVT_PAY_BASIS", s."GVT_SUB_AGENCY", s."GVT_POI", s."GVT_PAREN_TITLE", s."GVT_OPM_CERT_NBR", s."GVT_POSN_CLASS_STD", s."GVT_POSN_SENS_CD", s."GVT_IA_ACTIONS", s."GVT_EXEC_FIN_DISCL", s."GVT_EMP_FIN_INT", s."GVT_PATCOB_CD", s."GVT_CLS_STANDARD", s."GVT_CLASSIFIER_ID", s."GVT_DT_CLASSIFIED", s."BARG_UNIT", s."GVT_FUND_SOURCE", s."GVT_LEO_POSITION", s."GVT_PERF_PLAN", s."GVT_TARGET_GRADE", s."GVT_PI_UPD_IND", s."GVT_NFC_FUNCTN_CD", s."GVT_OFF_TITLEPREFX", s."GVT_NFC_PI_IND_OVR", s."ENCUMBER_INDC", s."POSN_MGMT_INDC", s."EG_ACADEMIC_RANK", s."EG_GROUP", s."HP_STATS_DUTIES", s."HP_STATS_RPT_FLAG", s."ENCUMB_SAL_OPTN", s."ENCUMB_SAL_AMT", s."INAIL_CODE", s."CNO_ESP", s."ASCO_CD_AUS", s."PKG_TEMPLATE_ID", s."PKG_RULE_ID", s."FUNCTION_AUS", s."ANN_CNTACT_HRS_AUS", s."TEACH_WEEKS_AUS", s."CASUAL_TYPE_AUS", s."WORK_DAY_HOURS", s."FA_PAY_PROGRAM", s."ELECTION_GROUP",'||
' s."LABOR_AGREEMENT", s."FP_PROF_CATG", s."FP_JOB_FMLY", s."FP_OFF_COLAG", s."FP_MATRIX_TYP", s."FP_MATRIX_CD", s."FP_BUSINESS_CD", s."FP_JOBCD_ACC", s."FP_ATCH_AREA", s."FP_JOB_TYP", s."FP_AUTO_RATFY", s."LAST_UPDATE_DATE", s."REG_REGION", s."SAL_RANGE_MIN_RATE", s."SAL_RANGE_MID_RATE", s."SAL_RANGE_MAX_RATE", s."SAL_RANGE_CURRENCY", s."SAL_RANGE_FREQ", s."MILITARY_SERVICE", s."MIL_RANK", s."JOB_SUB_FUNC", s."LASTUPDOPRID", s."LASTUPDDTTM", s."KEY_JOBCODE", to_clob(''Real data have been MASKED!'') "DESCRLONG" FROM "SYSADM"."PS_JOBCODE_TBL$DMASK"  s , MGMT_DM_TT_13197 c1m13197, MGMT_DM_TT_13198 c2m13198 WHERE s."GVT_OFFICIAL_DESCR" = c1m13197.ORIG_VAL (+) AND NVL(c1m13197.delete_val,0) = 0 AND s."DESCR" = c2m13198.ORIG_VAL (+) AND NVL(c2m13198.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1305_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1306_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1306 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_JOBCODE_TBL" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_JOBCODE_TBL" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1306_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1307_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1307 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PS_JOBCODE_TBL$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PS_JOBCODE_TBL$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1307_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1308_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1308 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13197" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13197" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1308_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1309_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1309 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13198" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13198" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1309_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1310_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1310 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS0JOBCODE_TBL" ON "SYSADM"."PS_JOBCODE_TBL" ("DESCR","SETID","JOBCODE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS0JOBCODE_TBL" ON "SYSADM"."PS_JOBCODE_TBL" ("DESCR","SETID","JOBCODE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1310_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1311_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1311 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS0JOBCODE_TBL" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS0JOBCODE_TBL" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1311_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1312_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1312 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS1JOBCODE_TBL" ON "SYSADM"."PS_JOBCODE_TBL" ("GVT_OCC_SERIES","SETID","JOBCODE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS1JOBCODE_TBL" ON "SYSADM"."PS_JOBCODE_TBL" ("GVT_OCC_SERIES","SETID","JOBCODE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1312_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1313_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1313 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS1JOBCODE_TBL" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS1JOBCODE_TBL" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1313_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1314_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1314 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS2JOBCODE_TBL" ON "SYSADM"."PS_JOBCODE_TBL" ("GVT_OFFICIAL_DESCR","SETID","JOBCODE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS2JOBCODE_TBL" ON "SYSADM"."PS_JOBCODE_TBL" ("GVT_OFFICIAL_DESCR","SETID","JOBCODE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1314_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1315_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1315 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS2JOBCODE_TBL" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS2JOBCODE_TBL" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1315_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1316_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1316 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PSAJOBCODE_TBL" ON "SYSADM"."PS_JOBCODE_TBL" ("JOB_FAMILY")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PSAJOBCODE_TBL" ON "SYSADM"."PS_JOBCODE_TBL" ("JOB_FAMILY")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1316_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1317_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1317 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PSAJOBCODE_TBL" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PSAJOBCODE_TBL" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1317_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1318_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1318 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PSBJOBCODE_TBL" ON "SYSADM"."PS_JOBCODE_TBL" ("SETID","JOBCODE","DESCR")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PSBJOBCODE_TBL" ON "SYSADM"."PS_JOBCODE_TBL" ("SETID","JOBCODE","DESCR")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1318_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1319_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1319 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PSBJOBCODE_TBL" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PSBJOBCODE_TBL" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1319_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1320_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1320 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PSCJOBCODE_TBL" ON "SYSADM"."PS_JOBCODE_TBL" ("EFF_STATUS")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PSCJOBCODE_TBL" ON "SYSADM"."PS_JOBCODE_TBL" ("EFF_STATUS")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "PSINDEX" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1320_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1321_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1321 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PSCJOBCODE_TBL" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PSCJOBCODE_TBL" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1321_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1322_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1322 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_JOBCODE_TBL" ON "SYSADM"."PS_JOBCODE_TBL" ("SETID","JOBCODE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_JOBCODE_TBL" ON "SYSADM"."PS_JOBCODE_TBL" ("SETID","JOBCODE","EFFDT")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 24576 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1322_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1323_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1323 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_JOBCODE_TBL" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_JOBCODE_TBL" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1323_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1324_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1324 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_JOBCODE_TBL" MODIFY ("DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_JOBCODE_TBL" MODIFY ("DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1324_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1325_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1325 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_JOBCODE_TBL" MODIFY ("DESCRSHORT" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_JOBCODE_TBL" MODIFY ("DESCRSHORT" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1325_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1326_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1326 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PS_JOBCODE_TBL" MODIFY ("GVT_OFFICIAL_DESCR" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PS_JOBCODE_TBL" MODIFY ("GVT_OFFICIAL_DESCR" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1326_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1327_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1327 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_JOBCODE_TBL" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PS_JOBCODE_TBL" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1327_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1328_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1328 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_JOBCODE_TBL"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PS_JOBCODE_TBL"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1328_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1329_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1329 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13201" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13201" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1329_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1330_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1330 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF mgmt$mask_util.isWorkloadMasking OR mgmt$mask_util.isSTSMasking THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "EMAILID" from "SYSADM"."PSOPRDEFN");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13201
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_email(rid, ''''EMAILID'''', orig_val)
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "EMAILID" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PSOPRDEFN" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13201"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

');
      EXECUTE IMMEDIATE 'declare
    adj number:=0;
    num number:=0;
    numd number:=0;
begin
    select count(*) into adj from (select distinct "EMAILID" from "SYSADM"."PSOPRDEFN");
    numd:= adj;
    num := length(adj-1);
    adj := greatest(num - 4, 0);
    execute immediate ''create table MGMT_DM_TT_13201
        (orig_val null, new_val null, delete_val null) NOLOGGING   ''|| mgmt$mask_util.get_tbps_clause ||'' as 
    select CAST(null AS VARCHAR2(70 CHAR)) orig_val, CAST(null AS VARCHAR2(70 CHAR)) new_val, CAST(0 AS NUMBER) delete_val from dual union all 
     select s.orig_val,
    case 
        when s.subset = 1 then 
        CAST(
        MASK.PKG_MASK.udf_mask_email(rid, ''''EMAILID'''', orig_val)
         AS VARCHAR2(70 CHAR))
    end new_val,

    CAST(0 as NUMBER) delete_val
    from (select orig_val, min(subset) subset ,min(rid)  rid             from (select "EMAILID" orig_val,rowid rid , 
        case 
            when 1=1 then 1
        end
  subset
        from "SYSADM"."PSOPRDEFN" ) group by orig_val) s
 where  1=1 and ( s.orig_val is not null)
'';
    DBMS_STATS.GATHER_TABLE_STATS(NULL, ''"MGMT_DM_TT_13201"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, options=>''GATHER AUTO'');
end; 

';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1330_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1331_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1331 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP INDEX MGMT_DM_TT_13201_IDX');
      EXECUTE IMMEDIATE 'DROP INDEX MGMT_DM_TT_13201_IDX';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1331_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1332_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1332 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('CREATE UNIQUE INDEX MGMT_DM_TT_13201_IDX ON MGMT_DM_TT_13201(orig_val) NOLOGGING  PCTFREE 0 ');
      EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX MGMT_DM_TT_13201_IDX ON MGMT_DM_TT_13201(orig_val) NOLOGGING  PCTFREE 0 ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1332_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1333_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1333 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PSOPRDEFN$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PSOPRDEFN$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1333_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1334_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1334 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PSOPRDEFN" RENAME TO "PSOPRDEFN$DMASK"');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PSOPRDEFN" RENAME TO "PSOPRDEFN$DMASK"';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1334_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1335_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1335 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg (' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PSOPRDEFN$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
');
      EXECUTE IMMEDIATE ' begin 
  if mgmt$mask_util.is_move_dmask then 
    EXECUTE IMMEDIATE ''ALTER TABLE "SYSADM"."PSOPRDEFN$DMASK" MOVE  ''||mgmt$mask_util.get_tbps_clause_dmask||''''; 
  end if;
 end;
';
    EXCEPTION
      WHEN OTHERS THEN
           sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
           mgmt$mask_sendMsg ( 'Could not move table to custom tablespace, continuing' );
           mgmt$mask_sendMsg (sqlerr_msg);
    END;
END mgmt$step_1335_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1336_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1336 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE TABLE "SYSADM"."PSOPRDEFN"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."OPRID", s."VERSION", CAST(''MASKED USER NAME'' as VARCHAR2(30 CHAR)) "OPRDEFNDESC", s."EMPLID", CAST(nvl(c1m13201.NEW_VAL, s."EMAILID") AS VARCHAR2(70 CHAR)) "EMAILID", s."OPRCLASS", s."ROWSECCLASS", s."OPERPSWD", s."PTOPERPSWDV2", s."OPERPSWDSALT", s."ENCRYPTED", s."SYMBOLICID", s."LANGUAGE_CD", s."MULTILANG", s."CURRENCY_CD", s."LASTPSWDCHANGE", s."ACCTLOCK", s."PRCSPRFLCLS", s."DEFAULTNAVHP", s."FAILEDLOGINS", s."EXPENT", s."OPRTYPE", s."USERIDALIAS", s."LASTSIGNONDTTM", s."LASTUPDDTTM", s."LASTUPDOPRID", s."PTALLOWSWITCHUSER" FROM "SYSADM"."PSOPRDEFN$DMASK"  s , MGMT_DM_TT_13201 c1m13201 WHERE s."EMAILID" = c1m13201.ORIG_VAL (+) AND NVL(c1m13201.delete_val,0) = 0');
      EXECUTE IMMEDIATE '  CREATE TABLE "SYSADM"."PSOPRDEFN"
    SEGMENT CREATION IMMEDIATE
  PCTFREE 10 PCTUSED 80 INITRANS 1 NOCOMPRESS NOLOGGING
  STORAGE( INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_DATA_TDE" AS SELECT s."OPRID", s."VERSION", CAST(''MASKED USER NAME'' as VARCHAR2(30 CHAR)) "OPRDEFNDESC", s."EMPLID", CAST(nvl(c1m13201.NEW_VAL, s."EMAILID") AS VARCHAR2(70 CHAR)) "EMAILID", s."OPRCLASS", s."ROWSECCLASS", s."OPERPSWD", s."PTOPERPSWDV2", s."OPERPSWDSALT", s."ENCRYPTED", s."SYMBOLICID", s."LANGUAGE_CD", s."MULTILANG", s."CURRENCY_CD", s."LASTPSWDCHANGE", s."ACCTLOCK", s."PRCSPRFLCLS", s."DEFAULTNAVHP", s."FAILEDLOGINS", s."EXPENT", s."OPRTYPE", s."USERIDALIAS", s."LASTSIGNONDTTM", s."LASTUPDDTTM", s."LASTUPDOPRID", s."PTALLOWSWITCHUSER" FROM "SYSADM"."PSOPRDEFN$DMASK"  s , MGMT_DM_TT_13201 c1m13201 WHERE s."EMAILID" = c1m13201.ORIG_VAL (+) AND NVL(c1m13201.delete_val,0) = 0';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1336_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1337_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1337 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PSOPRDEFN" LOGGING ');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PSOPRDEFN" LOGGING ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1337_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1338_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1338 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "SYSADM"."PSOPRDEFN$DMASK" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "SYSADM"."PSOPRDEFN$DMASK" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1338_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1339_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1339 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('DROP TABLE "MGMT_DM_TT_13201" PURGE');
      EXECUTE IMMEDIATE 'DROP TABLE "MGMT_DM_TT_13201" PURGE';
    EXCEPTION
      WHEN OTHERS THEN
      IF SQLCODE = -1418 THEN 
        mgmt$mask_sendMsg ( 'Index already dropped, continuing' );
      ELSIF SQLCODE = -942 THEN
        mgmt$mask_sendMsg ( 'Table or view already dropped, continuing' );
      ELSIF SQLCODE = -24344 THEN
        mgmt$mask_sendMsg ( 'Compiled with errors, continuing' );
      ELSE
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
      END IF;
    END;
END mgmt$step_1339_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1340_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1340 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PS0PSOPRDEFN" ON "SYSADM"."PSOPRDEFN" ("USERIDALIAS","OPRID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PS0PSOPRDEFN" ON "SYSADM"."PSOPRDEFN" ("USERIDALIAS","OPRID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1340_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1341_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1341 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS0PSOPRDEFN" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS0PSOPRDEFN" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1341_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1342_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1342 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PSAPSOPRDEFN" ON "SYSADM"."PSOPRDEFN" ("VERSION")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PSAPSOPRDEFN" ON "SYSADM"."PSOPRDEFN" ("VERSION")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1342_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1343_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1343 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PSAPSOPRDEFN" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PSAPSOPRDEFN" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1343_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1344_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1344 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PSBPSOPRDEFN" ON "SYSADM"."PSOPRDEFN" ("EMPLID","OPRID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PSBPSOPRDEFN" ON "SYSADM"."PSOPRDEFN" ("EMPLID","OPRID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1344_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1345_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1345 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PSBPSOPRDEFN" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PSBPSOPRDEFN" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1345_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1346_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1346 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE INDEX "SYSADM"."PSCPSOPRDEFN" ON "SYSADM"."PSOPRDEFN" ("USERIDALIAS")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE INDEX "SYSADM"."PSCPSOPRDEFN" ON "SYSADM"."PSOPRDEFN" ("USERIDALIAS")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1346_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1347_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1347 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PSCPSOPRDEFN" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PSCPSOPRDEFN" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1347_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1348_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1348 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE UNIQUE INDEX "SYSADM"."PS_PSOPRDEFN" ON "SYSADM"."PSOPRDEFN" ("OPRID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ');
      EXECUTE IMMEDIATE '  CREATE UNIQUE INDEX "SYSADM"."PS_PSOPRDEFN" ON "SYSADM"."PSOPRDEFN" ("OPRID")
  PCTFREE 10 INITRANS 2 NOLOGGING
  STORAGE(INITIAL 40960 NEXT 106496 MINEXTENTS 1 MAXEXTENTS 2147483645 
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "OPS_SYSADM_INDEX_TDE" ';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1348_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1349_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1349 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER INDEX "SYSADM"."PS_PSOPRDEFN" PARALLEL 1');
      EXECUTE IMMEDIATE 'ALTER INDEX "SYSADM"."PS_PSOPRDEFN" PARALLEL 1';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1349_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1350_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1350 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PSOPRDEFN" MODIFY ("OPRDEFNDESC" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PSOPRDEFN" MODIFY ("OPRDEFNDESC" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1350_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1351_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1351 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('ALTER TABLE "SYSADM"."PSOPRDEFN" MODIFY ("EMAILID" NOT NULL )');
      EXECUTE IMMEDIATE 'ALTER TABLE "SYSADM"."PSOPRDEFN" MODIFY ("EMAILID" NOT NULL )';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1351_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1352_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1352 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PSOPRDEFN" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PSOPRDEFN" TO "HREXREADONLY"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1352_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1353_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1353 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
    mgmt$mask_sendMsg ('Processing grants on object using: ');
    mgmt$mask_sendMsg ('CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PSOPRDEFN" TO "HRPSINS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END;  ');
    mgmt$mask_sendMsg ('BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END;  ');
    mgmt$mask_sendMsg ('DROP procedure "SYSADM".MGMT$MASK_GRANT_13048 ');
    EXECUTE IMMEDIATE 'CREATE OR REPLACE procedure "SYSADM".MGMT$MASK_GRANT_13048 AS 
                grant_cur INTEGER; 
                BEGIN 
                  grant_cur := DBMS_SQL.OPEN_CURSOR; 
                  DBMS_SQL.PARSE (grant_cur, '' GRANT SELECT ON "SYSADM"."PSOPRDEFN" TO "HRPSINS"'', DBMS_SQL.NATIVE); 
                  DBMS_SQL.CLOSE_CURSOR (grant_cur); 
                END; ';
    EXECUTE IMMEDIATE 'BEGIN "SYSADM".MGMT$MASK_GRANT_13048; END; ';
    EXECUTE IMMEDIATE 'DROP procedure "SYSADM".MGMT$MASK_GRANT_13048';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1353_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1354_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1354 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('  CREATE OR REPLACE EDITIONABLE TRIGGER "SYSADM"."OP_PSOPRDEFN_TR"
  AFTER INSERT OR DELETE OR UPDATE ON "SYSADM"."PSOPRDEFN"
  REFERENCING FOR EACH ROW
  DECLARE
V_AUDIT_OPRID VARCHAR2(64);
BEGIN
DBMS_APPLICATION_INFO.READ_CLIENT_INFO(V_AUDIT_OPRID);
IF INSERTING
THEN
INSERT INTO PS_OP_OPRDFN_AUDIT
VALUES (GET_PS_OPRID(V_AUDIT_OPRID),SYSDATE,''A'',:NEW.OPRID,:NEW.ROWSECCLASS);
ELSE
IF DELETING
THEN
INSERT INTO PS_OP_OPRDFN_AUDIT
VALUES (GET_PS_OPRID(V_AUDIT_OPRID),SYSDATE,''D'',:OLD.OPRID,:OLD.ROWSECCLASS);
ELSE
  IF :OLD.ROWSECCLASS <> :NEW.ROWSECCLASS THEN
  INSERT INTO PS_OP_OPRDFN_AUDIT
  VALUES (GET_PS_OPRID(V_AUDIT_OPRID),SYSDATE,''K'',:OLD.OPRID,:OLD.ROWSECCLASS);
  INSERT INTO PS_OP_OPRDFN_AUDIT
  VALUES (GET_PS_OPRID(V_AUDIT_OPRID),SYSDATE,''N'',:NEW.OPRID,:NEW.ROWSECCLASS);
  END IF;
END IF;
END IF;
END OP_PSOPRDEFN_TR;');
      EXECUTE IMMEDIATE '  CREATE OR REPLACE EDITIONABLE TRIGGER "SYSADM"."OP_PSOPRDEFN_TR"
  AFTER INSERT OR DELETE OR UPDATE ON "SYSADM"."PSOPRDEFN"
  REFERENCING FOR EACH ROW
  DECLARE
V_AUDIT_OPRID VARCHAR2(64);
BEGIN
DBMS_APPLICATION_INFO.READ_CLIENT_INFO(V_AUDIT_OPRID);
IF INSERTING
THEN
INSERT INTO PS_OP_OPRDFN_AUDIT
VALUES (GET_PS_OPRID(V_AUDIT_OPRID),SYSDATE,''A'',:NEW.OPRID,:NEW.ROWSECCLASS);
ELSE
IF DELETING
THEN
INSERT INTO PS_OP_OPRDFN_AUDIT
VALUES (GET_PS_OPRID(V_AUDIT_OPRID),SYSDATE,''D'',:OLD.OPRID,:OLD.ROWSECCLASS);
ELSE
  IF :OLD.ROWSECCLASS <> :NEW.ROWSECCLASS THEN
  INSERT INTO PS_OP_OPRDFN_AUDIT
  VALUES (GET_PS_OPRID(V_AUDIT_OPRID),SYSDATE,''K'',:OLD.OPRID,:OLD.ROWSECCLASS);
  INSERT INTO PS_OP_OPRDFN_AUDIT
  VALUES (GET_PS_OPRID(V_AUDIT_OPRID),SYSDATE,''N'',:NEW.OPRID,:NEW.ROWSECCLASS);
  END IF;
END IF;
END IF;
END OP_PSOPRDEFN_TR;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1354_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1355_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1355 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PSOPRDEFN"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;');
      EXECUTE IMMEDIATE 'BEGIN DBMS_STATS.GATHER_TABLE_STATS(''"SYSADM"'', ''"PSOPRDEFN"'', estimate_percent=>DBMS_STATS.AUTO_SAMPLE_SIZE, cascade=>TRUE, options=>''GATHER AUTO''); END;';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1355_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1356_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1356 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF NOT mgmt$mask_util.isSPATrialRequired THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_SQLPA.execute_analysis_task(task_name => mgmt$mask_util.get_task_name, execution_type  => ''explain plan'', execution_name  => ''post-mask_DM_RAT_13048''); END; 
');
      EXECUTE IMMEDIATE 'BEGIN DBMS_SQLPA.execute_analysis_task(task_name => mgmt$mask_util.get_task_name, execution_type  => ''explain plan'', execution_name  => ''post-mask_DM_RAT_13048''); END; 
';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1356_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1357_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1357 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF NOT mgmt$mask_util.isSPATrialRequired THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('BEGIN DBMS_SQLPA.execute_analysis_task(task_name => mgmt$mask_util.get_task_name, execution_type  => ''compare'', execution_name  => ''compare-mask_DM_RAT_13048''); END; 
');
      EXECUTE IMMEDIATE 'BEGIN DBMS_SQLPA.execute_analysis_task(task_name => mgmt$mask_util.get_task_name, execution_type  => ''compare'', execution_name  => ''compare-mask_DM_RAT_13048''); END; 
';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1357_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1358_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1358 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF NOT mgmt$mask_util.isSPATrialRequired THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('begin mgmt$mask_util.create_xml_report(DBMS_SQLPA.report_analysis_task(task_name => mgmt$mask_util.get_task_name,type => ''html'') );  END; 
');
      EXECUTE IMMEDIATE 'begin mgmt$mask_util.create_xml_report(DBMS_SQLPA.report_analysis_task(task_name => mgmt$mask_util.get_task_name,type => ''html'') );  END; 
';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1358_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1359_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1359 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;

    IF NOT mgmt$mask_util.isSPATrialRequired THEN
      return; 
    END IF;

    BEGIN
      mgmt$mask_sendMsg ('declare 
 l_task_id number ;
 begin 
  select task_id  into l_task_id from dba_advisor_tasks where task_name = mgmt$mask_util.get_task_name and owner = user;
   dbms_rat_mask.remove_spa_peeked_binds(l_task_id);
 end; 
');
      EXECUTE IMMEDIATE 'declare 
 l_task_id number ;
 begin 
  select task_id  into l_task_id from dba_advisor_tasks where task_name = mgmt$mask_util.get_task_name and owner = user;
   dbms_rat_mask.remove_spa_peeked_binds(l_task_id);
 end; 
';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1359_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1360_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1360 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('alter system flush shared_pool');
      EXECUTE IMMEDIATE 'alter system flush shared_pool';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1360_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$step_1361_13048(script_id IN INTEGER, job_table IN VARCHAR2, step_num IN OUT INTEGER)
AUTHID CURRENT_USER IS
    sqlerr_msg VARCHAR2(400);
BEGIN
    IF step_num <> 1361 THEN
      return;
    END IF;

    mgmt$mask_setStep (13048, 'MGMT$MASK_CHECKPOINT', step_num);
    step_num := step_num + 1;
    BEGIN
      mgmt$mask_sendMsg ('alter system checkpoint');
      EXECUTE IMMEDIATE 'alter system checkpoint';
    EXCEPTION
      WHEN OTHERS THEN
        sqlerr_msg := SUBSTRB(SQLERRM, 1, 400);
        mgmt$mask_errorExitOraError('ERROR executing steps ',  sqlerr_msg);
        -- step_num := -1;
        return;
    END;
END mgmt$step_1361_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$mask_cleanup_13048 (script_id IN INTEGER, job_table IN VARCHAR2, step_num IN INTEGER, highest_step IN INTEGER)
AUTHID CURRENT_USER IS
BEGIN
    IF step_num <= highest_step THEN
      return;
    END IF;

    mgmt$mask_sendMsg ('Starting cleanup of recovery tables');

    mgmt$mask_deleteJobTableEntry(script_id, job_table, step_num, highest_step);
    mgmt$mask_util.drop_seed;

    mgmt$mask_util.drop_tablespace;
    mgmt$mask_sendMsg ('Completed cleanup of recovery tables');
END mgmt$mask_cleanup_13048;
/

CREATE OR REPLACE PROCEDURE mgmt$mask_commentheader_13048 IS
BEGIN
     mgmt$mask_sendMsg ('-- *** There are WARNINGS in the script. ***');
     mgmt$mask_sendMsg ('-- Review the Impact Report.');
     mgmt$mask_sendMsg ('-- ');
     mgmt$mask_sendMsg ('--   Target database:	OPSMASK.HR.STATE.SBU');
     mgmt$mask_sendMsg ('--   Script generated at:	06-DEC-2021   09:04');
END mgmt$mask_commentheader_13048;
/

-- Script Execution Controller
-- ==============================================

variable step_num number;
exec mgmt$mask_commentheader_13048;
exec mgmt$mask_sendMsg ('Starting Data Masking');
show user;
exec mgmt$mask_checkDBAPrivs;
exec mgmt$mask_disableFlashback;
exec mgmt$mask_setupJobTable (13048, 'MGMT$MASK_CHECKPOINT', :step_num);

/*

exec mgmt$step_1_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_2_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_3_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_4_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_5_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_6_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_7_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_8_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_9_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_10_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_11_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_12_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_13_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_14_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_15_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_16_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_17_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_18_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_19_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_20_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_21_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_22_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_23_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_24_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_25_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_26_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_27_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_28_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_29_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_30_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_31_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_32_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_33_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_34_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_35_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_36_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_37_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_38_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_39_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_40_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_41_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_42_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_43_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_44_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_45_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_46_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_47_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_48_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_49_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_50_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_51_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_52_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_53_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_54_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_55_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_56_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_57_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_58_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_59_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_60_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_61_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_62_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_63_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_64_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_65_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_66_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_67_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_68_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_69_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_70_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_71_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_72_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_73_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_74_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_75_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_76_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_77_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_78_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_79_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_80_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_81_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_82_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_83_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_84_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_85_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_86_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_87_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_88_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_89_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_90_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_91_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_92_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_93_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_94_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_95_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_96_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_97_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_98_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_99_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_100_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_101_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_102_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_103_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_104_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_105_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_106_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_107_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_108_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_109_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_110_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_111_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_112_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_113_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_114_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_115_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_116_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_117_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_118_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_119_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_120_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_121_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_122_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_123_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_124_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_125_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_126_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_127_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_128_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_129_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_130_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_131_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_132_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_133_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_134_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_135_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_136_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_137_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_138_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_139_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_140_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_141_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_142_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_143_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_144_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_145_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_146_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_147_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_148_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_149_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_150_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_151_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_152_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_153_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_154_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_155_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_156_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_157_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_158_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_159_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_160_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_161_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_162_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_163_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_164_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_165_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_166_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_167_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_168_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_169_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_170_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_171_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_172_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_173_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_174_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_175_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_176_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_177_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_178_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_179_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_180_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_181_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_182_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_183_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_184_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_185_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_186_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_187_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_188_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_189_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_190_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_191_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_192_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_193_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_194_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_195_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_196_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_197_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_198_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_199_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_200_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_201_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_202_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_203_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_204_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_205_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_206_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_207_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_208_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_209_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_210_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_211_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_212_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_213_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_214_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_215_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_216_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_217_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_218_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_219_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_220_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_221_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_222_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_223_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_224_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_225_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_226_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_227_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_228_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_229_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_230_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_231_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_232_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_233_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_234_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_235_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_236_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_237_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_238_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_239_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_240_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_241_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_242_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_243_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_244_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_245_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_246_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_247_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_248_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_249_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_250_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_251_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_252_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_253_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_254_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_255_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_256_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_257_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_258_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_259_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_260_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_261_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_262_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_263_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_264_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_265_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_266_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_267_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_268_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_269_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_270_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_271_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_272_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_273_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_274_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_275_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_276_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_277_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_278_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_279_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_280_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_281_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_282_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_283_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_284_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_285_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_286_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_287_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_288_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_289_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_290_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_291_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_292_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_293_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_294_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_295_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_296_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_297_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_298_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_299_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_300_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_301_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_302_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_303_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_304_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_305_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_306_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_307_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_308_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_309_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_310_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_311_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_312_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_313_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_314_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_315_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_316_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_317_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_318_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_319_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_320_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_321_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_322_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_323_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_324_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_325_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_326_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_327_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_328_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_329_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_330_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_331_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_332_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_333_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_334_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_335_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_336_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_337_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_338_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_339_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_340_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_341_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_342_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_343_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_344_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_345_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_346_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_347_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_348_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_349_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_350_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_351_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_352_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_353_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_354_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_355_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_356_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_357_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_358_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_359_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_360_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_361_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_362_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_363_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_364_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_365_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_366_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_367_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_368_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_369_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_370_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_371_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_372_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_373_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_374_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_375_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_376_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_377_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_378_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_379_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_380_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_381_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_382_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_383_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_384_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_385_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_386_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_387_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_388_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_389_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_390_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_391_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_392_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_393_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_394_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_395_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_396_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_397_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_398_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_399_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_400_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_401_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_402_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_403_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_404_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_405_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_406_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_407_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_408_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_409_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_410_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_411_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_412_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_413_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_414_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_415_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_416_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_417_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_418_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_419_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_420_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_421_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_422_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_423_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_424_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_425_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_426_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_427_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_428_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_429_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_430_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_431_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_432_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_433_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_434_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_435_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_436_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_437_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_438_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_439_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_440_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_441_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_442_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_443_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_444_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_445_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_446_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_447_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_448_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_449_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_450_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_451_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_452_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_453_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_454_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_455_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_456_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_457_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_458_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_459_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_460_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_461_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_462_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_463_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_464_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_465_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_466_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_467_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_468_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_469_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_470_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_471_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_472_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_473_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_474_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_475_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_476_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_477_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_478_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_479_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_480_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_481_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_482_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_483_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_484_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_485_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_486_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_487_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_488_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_489_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_490_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_491_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_492_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_493_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_494_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_495_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_496_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_497_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_498_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_499_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_500_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_501_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_502_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_503_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_504_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_505_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_506_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_507_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_508_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_509_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_510_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_511_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_512_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_513_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_514_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_515_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_516_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_517_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_518_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_519_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_520_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_521_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_522_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_523_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_524_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_525_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_526_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_527_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_528_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_529_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_530_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_531_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_532_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_533_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_534_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_535_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_536_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_537_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_538_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_539_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_540_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_541_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_542_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_543_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_544_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_545_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_546_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_547_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_548_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_549_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_550_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_551_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_552_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_553_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_554_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_555_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_556_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_557_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_558_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_559_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_560_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_561_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_562_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_563_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_564_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_565_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_566_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_567_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_568_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_569_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_570_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_571_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_572_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_573_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_574_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_575_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_576_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_577_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_578_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_579_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_580_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_581_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_582_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_583_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_584_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_585_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_586_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_587_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_588_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_589_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_590_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_591_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_592_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_593_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_594_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_595_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_596_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_597_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_598_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_599_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_600_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_601_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_602_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_603_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_604_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_605_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_606_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_607_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_608_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_609_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_610_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_611_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_612_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_613_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_614_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_615_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_616_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_617_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_618_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_619_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_620_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_621_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_622_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_623_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_624_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_625_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_626_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_627_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_628_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_629_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_630_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_631_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_632_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_633_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_634_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_635_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_636_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_637_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_638_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_639_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_640_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_641_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_642_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_643_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_644_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_645_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_646_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_647_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_648_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_649_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_650_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_651_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_652_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_653_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_654_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_655_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_656_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_657_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_658_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_659_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_660_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_661_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_662_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_663_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_664_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_665_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_666_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_667_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_668_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_669_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_670_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_671_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_672_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_673_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_674_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_675_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_676_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_677_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_678_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_679_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_680_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_681_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_682_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_683_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_684_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_685_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_686_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_687_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_688_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_689_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_690_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_691_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_692_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_693_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_694_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_695_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_696_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_697_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_698_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_699_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_700_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_701_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_702_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_703_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_704_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_705_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_706_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_707_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_708_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_709_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_710_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_711_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_712_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_713_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_714_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_715_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_716_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_717_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_718_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_719_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_720_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_721_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_722_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_723_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_724_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_725_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_726_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_727_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_728_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_729_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_730_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_731_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_732_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_733_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_734_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_735_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_736_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_737_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_738_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_739_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_740_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_741_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_742_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_743_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_744_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_745_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_746_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_747_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_748_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_749_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_750_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_751_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_752_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_753_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_754_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_755_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_756_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_757_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_758_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_759_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_760_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_761_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_762_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_763_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_764_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_765_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_766_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_767_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_768_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_769_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_770_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_771_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_772_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_773_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_774_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_775_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_776_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_777_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_778_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_779_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_780_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_781_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_782_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_783_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_784_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_785_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_786_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_787_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_788_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_789_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_790_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_791_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_792_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_793_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_794_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_795_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_796_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_797_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_798_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_799_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_800_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_801_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_802_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_803_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_804_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_805_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_806_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_807_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_808_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_809_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_810_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_811_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_812_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_813_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_814_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_815_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_816_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_817_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_818_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_819_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_820_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_821_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_822_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_823_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_824_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_825_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_826_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_827_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_828_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_829_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_830_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_831_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_832_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_833_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_834_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_835_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_836_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_837_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_838_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_839_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_840_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_841_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_842_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_843_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_844_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_845_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_846_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_847_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_848_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_849_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_850_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_851_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_852_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_853_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_854_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_855_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_856_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_857_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_858_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_859_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_860_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_861_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_862_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_863_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_864_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_865_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_866_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_867_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_868_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_869_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_870_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_871_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_872_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_873_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_874_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_875_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_876_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_877_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_878_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_879_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_880_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_881_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_882_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_883_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_884_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_885_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_886_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_887_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_888_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_889_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_890_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_891_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_892_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_893_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_894_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_895_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_896_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_897_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_898_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_899_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_900_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_901_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_902_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_903_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_904_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_905_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_906_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_907_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_908_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_909_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_910_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_911_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_912_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_913_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_914_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_915_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_916_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_917_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_918_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_919_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_920_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_921_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_922_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_923_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_924_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_925_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_926_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_927_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_928_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_929_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_930_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_931_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_932_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_933_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_934_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_935_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_936_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_937_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_938_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_939_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_940_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_941_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_942_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_943_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_944_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_945_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_946_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_947_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_948_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_949_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_950_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_951_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_952_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_953_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_954_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_955_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_956_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_957_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_958_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_959_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_960_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_961_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_962_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_963_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_964_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_965_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_966_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_967_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_968_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_969_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_970_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_971_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_972_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_973_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_974_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_975_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_976_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_977_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_978_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_979_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_980_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_981_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_982_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_983_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_984_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_985_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_986_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_987_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_988_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_989_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_990_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_991_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_992_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_993_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_994_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_995_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_996_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_997_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_998_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_999_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1000_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1001_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1002_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1003_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1004_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1005_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1006_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1007_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1008_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1009_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1010_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1011_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1012_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1013_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1014_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1015_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1016_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1017_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1018_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1019_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1020_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1021_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1022_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1023_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1024_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1025_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1026_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1027_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1028_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1029_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1030_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1031_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1032_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1033_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1034_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1035_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1036_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1037_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1038_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1039_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1040_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1041_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1042_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1043_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1044_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1045_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1046_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1047_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1048_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1049_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1050_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1051_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1052_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1053_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1054_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1055_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1056_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1057_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1058_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1059_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1060_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1061_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1062_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1063_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1064_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1065_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1066_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1067_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1068_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1069_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1070_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1071_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1072_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1073_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1074_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1075_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1076_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1077_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1078_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
*/

exec mgmt$step_1079_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1080_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1081_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1082_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1083_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1084_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1085_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1086_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1087_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1088_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1089_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1090_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1091_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1092_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1093_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1094_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1095_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1096_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1097_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1098_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1099_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1100_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1101_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1102_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1103_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1104_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1105_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1106_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1107_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1108_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1109_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1110_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1111_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1112_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1113_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1114_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1115_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1116_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1117_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1118_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1119_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1120_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1121_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1122_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1123_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1124_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1125_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1126_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1127_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1128_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1129_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1130_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1131_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1132_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1133_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1134_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1135_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1136_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1137_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1138_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1139_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1140_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1141_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1142_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1143_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1144_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1145_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1146_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1147_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1148_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1149_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1150_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1151_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1152_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1153_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1154_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1155_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1156_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1157_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1158_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1159_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1160_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1161_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1162_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1163_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1164_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1165_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1166_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1167_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1168_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1169_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1170_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1171_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1172_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1173_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1174_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1175_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1176_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1177_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1178_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1179_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1180_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1181_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1182_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1183_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1184_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1185_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1186_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1187_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1188_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1189_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1190_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1191_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1192_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1193_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1194_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1195_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1196_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1197_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1198_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1199_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1200_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1201_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1202_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1203_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1204_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1205_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1206_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1207_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1208_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1209_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1210_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1211_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1212_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1213_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1214_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1215_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1216_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1217_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1218_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1219_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1220_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1221_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1222_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1223_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1224_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1225_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1226_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1227_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1228_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1229_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1230_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1231_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1232_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1233_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1234_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1235_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1236_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1237_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1238_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1239_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1240_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1241_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1242_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1243_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1244_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1245_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1246_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1247_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1248_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1249_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1250_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1251_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1252_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1253_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1254_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1255_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1256_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1257_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1258_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1259_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1260_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1261_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1262_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1263_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1264_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1265_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1266_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1267_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1268_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1269_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1270_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1271_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1272_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1273_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1274_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1275_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1276_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1277_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1278_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1279_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1280_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1281_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1282_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1283_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1284_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1285_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1286_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1287_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1288_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1289_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1290_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1291_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1292_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1293_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1294_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1295_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1296_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1297_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1298_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1299_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1300_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num, :seed);
exec mgmt$step_1301_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1302_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1303_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1304_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1305_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1306_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1307_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1308_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1309_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1310_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1311_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1312_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1313_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1314_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1315_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1316_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1317_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1318_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1319_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1320_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1321_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1322_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1323_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1324_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1325_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1326_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1327_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1328_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1329_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1330_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1331_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1332_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1333_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1334_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1335_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1336_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1337_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1338_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1339_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1340_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1341_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1342_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1343_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1344_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1345_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1346_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1347_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1348_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1349_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1350_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1351_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1352_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1353_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1354_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1355_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1356_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1357_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1358_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1359_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1360_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);
exec mgmt$step_1361_13048(13048, 'MGMT$MASK_CHECKPOINT', :step_num);

exec mgmt$mask_sendMsg ('Completed Data Masking. Starting cleanup phase.');

exec mgmt$mask_enableFlashback;

exec mgmt$mask_cleanup_13048 (13048, 'MGMT$MASK_CHECKPOINT', :step_num, 1361);

exec mgmt$mask_sendMsg ('Starting cleanup of generated procedures');

DROP PROCEDURE mgmt$step_1_13048;
DROP PROCEDURE mgmt$step_2_13048;
DROP PROCEDURE mgmt$step_3_13048;
DROP PROCEDURE mgmt$step_4_13048;
DROP PROCEDURE mgmt$step_5_13048;
DROP PROCEDURE mgmt$step_6_13048;
DROP PROCEDURE mgmt$step_7_13048;
DROP PROCEDURE mgmt$step_8_13048;
DROP PROCEDURE mgmt$step_9_13048;
DROP PROCEDURE mgmt$step_10_13048;
DROP PROCEDURE mgmt$step_11_13048;
DROP PROCEDURE mgmt$step_12_13048;
DROP PROCEDURE mgmt$step_13_13048;
DROP PROCEDURE mgmt$step_14_13048;
DROP PROCEDURE mgmt$step_15_13048;
DROP PROCEDURE mgmt$step_16_13048;
DROP PROCEDURE mgmt$step_17_13048;
DROP PROCEDURE mgmt$step_18_13048;
DROP PROCEDURE mgmt$step_19_13048;
DROP PROCEDURE mgmt$step_20_13048;
DROP PROCEDURE mgmt$step_21_13048;
DROP PROCEDURE mgmt$step_22_13048;
DROP PROCEDURE mgmt$step_23_13048;
DROP PROCEDURE mgmt$step_24_13048;
DROP PROCEDURE mgmt$step_25_13048;
DROP PROCEDURE mgmt$step_26_13048;
DROP PROCEDURE mgmt$step_27_13048;
DROP PROCEDURE mgmt$step_28_13048;
DROP PROCEDURE mgmt$step_29_13048;
DROP PROCEDURE mgmt$step_30_13048;
DROP PROCEDURE mgmt$step_31_13048;
DROP PROCEDURE mgmt$step_32_13048;
DROP PROCEDURE mgmt$step_33_13048;
DROP PROCEDURE mgmt$step_34_13048;
DROP PROCEDURE mgmt$step_35_13048;
DROP PROCEDURE mgmt$step_36_13048;
DROP PROCEDURE mgmt$step_37_13048;
DROP PROCEDURE mgmt$step_38_13048;
DROP PROCEDURE mgmt$step_39_13048;
DROP PROCEDURE mgmt$step_40_13048;
DROP PROCEDURE mgmt$step_41_13048;
DROP PROCEDURE mgmt$step_42_13048;
DROP PROCEDURE mgmt$step_43_13048;
DROP PROCEDURE mgmt$step_44_13048;
DROP PROCEDURE mgmt$step_45_13048;
DROP PROCEDURE mgmt$step_46_13048;
DROP PROCEDURE mgmt$step_47_13048;
DROP PROCEDURE mgmt$step_48_13048;
DROP PROCEDURE mgmt$step_49_13048;
DROP PROCEDURE mgmt$step_50_13048;
DROP PROCEDURE mgmt$step_51_13048;
DROP PROCEDURE mgmt$step_52_13048;
DROP PROCEDURE mgmt$step_53_13048;
DROP PROCEDURE mgmt$step_54_13048;
DROP PROCEDURE mgmt$step_55_13048;
DROP PROCEDURE mgmt$step_56_13048;
DROP PROCEDURE mgmt$step_57_13048;
DROP PROCEDURE mgmt$step_58_13048;
DROP PROCEDURE mgmt$step_59_13048;
DROP PROCEDURE mgmt$step_60_13048;
DROP PROCEDURE mgmt$step_61_13048;
DROP PROCEDURE mgmt$step_62_13048;
DROP PROCEDURE mgmt$step_63_13048;
DROP PROCEDURE mgmt$step_64_13048;
DROP PROCEDURE mgmt$step_65_13048;
DROP PROCEDURE mgmt$step_66_13048;
DROP PROCEDURE mgmt$step_67_13048;
DROP PROCEDURE mgmt$step_68_13048;
DROP PROCEDURE mgmt$step_69_13048;
DROP PROCEDURE mgmt$step_70_13048;
DROP PROCEDURE mgmt$step_71_13048;
DROP PROCEDURE mgmt$step_72_13048;
DROP PROCEDURE mgmt$step_73_13048;
DROP PROCEDURE mgmt$step_74_13048;
DROP PROCEDURE mgmt$step_75_13048;
DROP PROCEDURE mgmt$step_76_13048;
DROP PROCEDURE mgmt$step_77_13048;
DROP PROCEDURE mgmt$step_78_13048;
DROP PROCEDURE mgmt$step_79_13048;
DROP PROCEDURE mgmt$step_80_13048;
DROP PROCEDURE mgmt$step_81_13048;
DROP PROCEDURE mgmt$step_82_13048;
DROP PROCEDURE mgmt$step_83_13048;
DROP PROCEDURE mgmt$step_84_13048;
DROP PROCEDURE mgmt$step_85_13048;
DROP PROCEDURE mgmt$step_86_13048;
DROP PROCEDURE mgmt$step_87_13048;
DROP PROCEDURE mgmt$step_88_13048;
DROP PROCEDURE mgmt$step_89_13048;
DROP PROCEDURE mgmt$step_90_13048;
DROP PROCEDURE mgmt$step_91_13048;
DROP PROCEDURE mgmt$step_92_13048;
DROP PROCEDURE mgmt$step_93_13048;
DROP PROCEDURE mgmt$step_94_13048;
DROP PROCEDURE mgmt$step_95_13048;
DROP PROCEDURE mgmt$step_96_13048;
DROP PROCEDURE mgmt$step_97_13048;
DROP PROCEDURE mgmt$step_98_13048;
DROP PROCEDURE mgmt$step_99_13048;
DROP PROCEDURE mgmt$step_100_13048;
DROP PROCEDURE mgmt$step_101_13048;
DROP PROCEDURE mgmt$step_102_13048;
DROP PROCEDURE mgmt$step_103_13048;
DROP PROCEDURE mgmt$step_104_13048;
DROP PROCEDURE mgmt$step_105_13048;
DROP PROCEDURE mgmt$step_106_13048;
DROP PROCEDURE mgmt$step_107_13048;
DROP PROCEDURE mgmt$step_108_13048;
DROP PROCEDURE mgmt$step_109_13048;
DROP PROCEDURE mgmt$step_110_13048;
DROP PROCEDURE mgmt$step_111_13048;
DROP PROCEDURE mgmt$step_112_13048;
DROP PROCEDURE mgmt$step_113_13048;
DROP PROCEDURE mgmt$step_114_13048;
DROP PROCEDURE mgmt$step_115_13048;
DROP PROCEDURE mgmt$step_116_13048;
DROP PROCEDURE mgmt$step_117_13048;
DROP PROCEDURE mgmt$step_118_13048;
DROP PROCEDURE mgmt$step_119_13048;
DROP PROCEDURE mgmt$step_120_13048;
DROP PROCEDURE mgmt$step_121_13048;
DROP PROCEDURE mgmt$step_122_13048;
DROP PROCEDURE mgmt$step_123_13048;
DROP PROCEDURE mgmt$step_124_13048;
DROP PROCEDURE mgmt$step_125_13048;
DROP PROCEDURE mgmt$step_126_13048;
DROP PROCEDURE mgmt$step_127_13048;
DROP PROCEDURE mgmt$step_128_13048;
DROP PROCEDURE mgmt$step_129_13048;
DROP PROCEDURE mgmt$step_130_13048;
DROP PROCEDURE mgmt$step_131_13048;
DROP PROCEDURE mgmt$step_132_13048;
DROP PROCEDURE mgmt$step_133_13048;
DROP PROCEDURE mgmt$step_134_13048;
DROP PROCEDURE mgmt$step_135_13048;
DROP PROCEDURE mgmt$step_136_13048;
DROP PROCEDURE mgmt$step_137_13048;
DROP PROCEDURE mgmt$step_138_13048;
DROP PROCEDURE mgmt$step_139_13048;
DROP PROCEDURE mgmt$step_140_13048;
DROP PROCEDURE mgmt$step_141_13048;
DROP PROCEDURE mgmt$step_142_13048;
DROP PROCEDURE mgmt$step_143_13048;
DROP PROCEDURE mgmt$step_144_13048;
DROP PROCEDURE mgmt$step_145_13048;
DROP PROCEDURE mgmt$step_146_13048;
DROP PROCEDURE mgmt$step_147_13048;
DROP PROCEDURE mgmt$step_148_13048;
DROP PROCEDURE mgmt$step_149_13048;
DROP PROCEDURE mgmt$step_150_13048;
DROP PROCEDURE mgmt$step_151_13048;
DROP PROCEDURE mgmt$step_152_13048;
DROP PROCEDURE mgmt$step_153_13048;
DROP PROCEDURE mgmt$step_154_13048;
DROP PROCEDURE mgmt$step_155_13048;
DROP PROCEDURE mgmt$step_156_13048;
DROP PROCEDURE mgmt$step_157_13048;
DROP PROCEDURE mgmt$step_158_13048;
DROP PROCEDURE mgmt$step_159_13048;
DROP PROCEDURE mgmt$step_160_13048;
DROP PROCEDURE mgmt$step_161_13048;
DROP PROCEDURE mgmt$step_162_13048;
DROP PROCEDURE mgmt$step_163_13048;
DROP PROCEDURE mgmt$step_164_13048;
DROP PROCEDURE mgmt$step_165_13048;
DROP PROCEDURE mgmt$step_166_13048;
DROP PROCEDURE mgmt$step_167_13048;
DROP PROCEDURE mgmt$step_168_13048;
DROP PROCEDURE mgmt$step_169_13048;
DROP PROCEDURE mgmt$step_170_13048;
DROP PROCEDURE mgmt$step_171_13048;
DROP PROCEDURE mgmt$step_172_13048;
DROP PROCEDURE mgmt$step_173_13048;
DROP PROCEDURE mgmt$step_174_13048;
DROP PROCEDURE mgmt$step_175_13048;
DROP PROCEDURE mgmt$step_176_13048;
DROP PROCEDURE mgmt$step_177_13048;
DROP PROCEDURE mgmt$step_178_13048;
DROP PROCEDURE mgmt$step_179_13048;
DROP PROCEDURE mgmt$step_180_13048;
DROP PROCEDURE mgmt$step_181_13048;
DROP PROCEDURE mgmt$step_182_13048;
DROP PROCEDURE mgmt$step_183_13048;
DROP PROCEDURE mgmt$step_184_13048;
DROP PROCEDURE mgmt$step_185_13048;
DROP PROCEDURE mgmt$step_186_13048;
DROP PROCEDURE mgmt$step_187_13048;
DROP PROCEDURE mgmt$step_188_13048;
DROP PROCEDURE mgmt$step_189_13048;
DROP PROCEDURE mgmt$step_190_13048;
DROP PROCEDURE mgmt$step_191_13048;
DROP PROCEDURE mgmt$step_192_13048;
DROP PROCEDURE mgmt$step_193_13048;
DROP PROCEDURE mgmt$step_194_13048;
DROP PROCEDURE mgmt$step_195_13048;
DROP PROCEDURE mgmt$step_196_13048;
DROP PROCEDURE mgmt$step_197_13048;
DROP PROCEDURE mgmt$step_198_13048;
DROP PROCEDURE mgmt$step_199_13048;
DROP PROCEDURE mgmt$step_200_13048;
DROP PROCEDURE mgmt$step_201_13048;
DROP PROCEDURE mgmt$step_202_13048;
DROP PROCEDURE mgmt$step_203_13048;
DROP PROCEDURE mgmt$step_204_13048;
DROP PROCEDURE mgmt$step_205_13048;
DROP PROCEDURE mgmt$step_206_13048;
DROP PROCEDURE mgmt$step_207_13048;
DROP PROCEDURE mgmt$step_208_13048;
DROP PROCEDURE mgmt$step_209_13048;
DROP PROCEDURE mgmt$step_210_13048;
DROP PROCEDURE mgmt$step_211_13048;
DROP PROCEDURE mgmt$step_212_13048;
DROP PROCEDURE mgmt$step_213_13048;
DROP PROCEDURE mgmt$step_214_13048;
DROP PROCEDURE mgmt$step_215_13048;
DROP PROCEDURE mgmt$step_216_13048;
DROP PROCEDURE mgmt$step_217_13048;
DROP PROCEDURE mgmt$step_218_13048;
DROP PROCEDURE mgmt$step_219_13048;
DROP PROCEDURE mgmt$step_220_13048;
DROP PROCEDURE mgmt$step_221_13048;
DROP PROCEDURE mgmt$step_222_13048;
DROP PROCEDURE mgmt$step_223_13048;
DROP PROCEDURE mgmt$step_224_13048;
DROP PROCEDURE mgmt$step_225_13048;
DROP PROCEDURE mgmt$step_226_13048;
DROP PROCEDURE mgmt$step_227_13048;
DROP PROCEDURE mgmt$step_228_13048;
DROP PROCEDURE mgmt$step_229_13048;
DROP PROCEDURE mgmt$step_230_13048;
DROP PROCEDURE mgmt$step_231_13048;
DROP PROCEDURE mgmt$step_232_13048;
DROP PROCEDURE mgmt$step_233_13048;
DROP PROCEDURE mgmt$step_234_13048;
DROP PROCEDURE mgmt$step_235_13048;
DROP PROCEDURE mgmt$step_236_13048;
DROP PROCEDURE mgmt$step_237_13048;
DROP PROCEDURE mgmt$step_238_13048;
DROP PROCEDURE mgmt$step_239_13048;
DROP PROCEDURE mgmt$step_240_13048;
DROP PROCEDURE mgmt$step_241_13048;
DROP PROCEDURE mgmt$step_242_13048;
DROP PROCEDURE mgmt$step_243_13048;
DROP PROCEDURE mgmt$step_244_13048;
DROP PROCEDURE mgmt$step_245_13048;
DROP PROCEDURE mgmt$step_246_13048;
DROP PROCEDURE mgmt$step_247_13048;
DROP PROCEDURE mgmt$step_248_13048;
DROP PROCEDURE mgmt$step_249_13048;
DROP PROCEDURE mgmt$step_250_13048;
DROP PROCEDURE mgmt$step_251_13048;
DROP PROCEDURE mgmt$step_252_13048;
DROP PROCEDURE mgmt$step_253_13048;
DROP PROCEDURE mgmt$step_254_13048;
DROP PROCEDURE mgmt$step_255_13048;
DROP PROCEDURE mgmt$step_256_13048;
DROP PROCEDURE mgmt$step_257_13048;
DROP PROCEDURE mgmt$step_258_13048;
DROP PROCEDURE mgmt$step_259_13048;
DROP PROCEDURE mgmt$step_260_13048;
DROP PROCEDURE mgmt$step_261_13048;
DROP PROCEDURE mgmt$step_262_13048;
DROP PROCEDURE mgmt$step_263_13048;
DROP PROCEDURE mgmt$step_264_13048;
DROP PROCEDURE mgmt$step_265_13048;
DROP PROCEDURE mgmt$step_266_13048;
DROP PROCEDURE mgmt$step_267_13048;
DROP PROCEDURE mgmt$step_268_13048;
DROP PROCEDURE mgmt$step_269_13048;
DROP PROCEDURE mgmt$step_270_13048;
DROP PROCEDURE mgmt$step_271_13048;
DROP PROCEDURE mgmt$step_272_13048;
DROP PROCEDURE mgmt$step_273_13048;
DROP PROCEDURE mgmt$step_274_13048;
DROP PROCEDURE mgmt$step_275_13048;
DROP PROCEDURE mgmt$step_276_13048;
DROP PROCEDURE mgmt$step_277_13048;
DROP PROCEDURE mgmt$step_278_13048;
DROP PROCEDURE mgmt$step_279_13048;
DROP PROCEDURE mgmt$step_280_13048;
DROP PROCEDURE mgmt$step_281_13048;
DROP PROCEDURE mgmt$step_282_13048;
DROP PROCEDURE mgmt$step_283_13048;
DROP PROCEDURE mgmt$step_284_13048;
DROP PROCEDURE mgmt$step_285_13048;
DROP PROCEDURE mgmt$step_286_13048;
DROP PROCEDURE mgmt$step_287_13048;
DROP PROCEDURE mgmt$step_288_13048;
DROP PROCEDURE mgmt$step_289_13048;
DROP PROCEDURE mgmt$step_290_13048;
DROP PROCEDURE mgmt$step_291_13048;
DROP PROCEDURE mgmt$step_292_13048;
DROP PROCEDURE mgmt$step_293_13048;
DROP PROCEDURE mgmt$step_294_13048;
DROP PROCEDURE mgmt$step_295_13048;
DROP PROCEDURE mgmt$step_296_13048;
DROP PROCEDURE mgmt$step_297_13048;
DROP PROCEDURE mgmt$step_298_13048;
DROP PROCEDURE mgmt$step_299_13048;
DROP PROCEDURE mgmt$step_300_13048;
DROP PROCEDURE mgmt$step_301_13048;
DROP PROCEDURE mgmt$step_302_13048;
DROP PROCEDURE mgmt$step_303_13048;
DROP PROCEDURE mgmt$step_304_13048;
DROP PROCEDURE mgmt$step_305_13048;
DROP PROCEDURE mgmt$step_306_13048;
DROP PROCEDURE mgmt$step_307_13048;
DROP PROCEDURE mgmt$step_308_13048;
DROP PROCEDURE mgmt$step_309_13048;
DROP PROCEDURE mgmt$step_310_13048;
DROP PROCEDURE mgmt$step_311_13048;
DROP PROCEDURE mgmt$step_312_13048;
DROP PROCEDURE mgmt$step_313_13048;
DROP PROCEDURE mgmt$step_314_13048;
DROP PROCEDURE mgmt$step_315_13048;
DROP PROCEDURE mgmt$step_316_13048;
DROP PROCEDURE mgmt$step_317_13048;
DROP PROCEDURE mgmt$step_318_13048;
DROP PROCEDURE mgmt$step_319_13048;
DROP PROCEDURE mgmt$step_320_13048;
DROP PROCEDURE mgmt$step_321_13048;
DROP PROCEDURE mgmt$step_322_13048;
DROP PROCEDURE mgmt$step_323_13048;
DROP PROCEDURE mgmt$step_324_13048;
DROP PROCEDURE mgmt$step_325_13048;
DROP PROCEDURE mgmt$step_326_13048;
DROP PROCEDURE mgmt$step_327_13048;
DROP PROCEDURE mgmt$step_328_13048;
DROP PROCEDURE mgmt$step_329_13048;
DROP PROCEDURE mgmt$step_330_13048;
DROP PROCEDURE mgmt$step_331_13048;
DROP PROCEDURE mgmt$step_332_13048;
DROP PROCEDURE mgmt$step_333_13048;
DROP PROCEDURE mgmt$step_334_13048;
DROP PROCEDURE mgmt$step_335_13048;
DROP PROCEDURE mgmt$step_336_13048;
DROP PROCEDURE mgmt$step_337_13048;
DROP PROCEDURE mgmt$step_338_13048;
DROP PROCEDURE mgmt$step_339_13048;
DROP PROCEDURE mgmt$step_340_13048;
DROP PROCEDURE mgmt$step_341_13048;
DROP PROCEDURE mgmt$step_342_13048;
DROP PROCEDURE mgmt$step_343_13048;
DROP PROCEDURE mgmt$step_344_13048;
DROP PROCEDURE mgmt$step_345_13048;
DROP PROCEDURE mgmt$step_346_13048;
DROP PROCEDURE mgmt$step_347_13048;
DROP PROCEDURE mgmt$step_348_13048;
DROP PROCEDURE mgmt$step_349_13048;
DROP PROCEDURE mgmt$step_350_13048;
DROP PROCEDURE mgmt$step_351_13048;
DROP PROCEDURE mgmt$step_352_13048;
DROP PROCEDURE mgmt$step_353_13048;
DROP PROCEDURE mgmt$step_354_13048;
DROP PROCEDURE mgmt$step_355_13048;
DROP PROCEDURE mgmt$step_356_13048;
DROP PROCEDURE mgmt$step_357_13048;
DROP PROCEDURE mgmt$step_358_13048;
DROP PROCEDURE mgmt$step_359_13048;
DROP PROCEDURE mgmt$step_360_13048;
DROP PROCEDURE mgmt$step_361_13048;
DROP PROCEDURE mgmt$step_362_13048;
DROP PROCEDURE mgmt$step_363_13048;
DROP PROCEDURE mgmt$step_364_13048;
DROP PROCEDURE mgmt$step_365_13048;
DROP PROCEDURE mgmt$step_366_13048;
DROP PROCEDURE mgmt$step_367_13048;
DROP PROCEDURE mgmt$step_368_13048;
DROP PROCEDURE mgmt$step_369_13048;
DROP PROCEDURE mgmt$step_370_13048;
DROP PROCEDURE mgmt$step_371_13048;
DROP PROCEDURE mgmt$step_372_13048;
DROP PROCEDURE mgmt$step_373_13048;
DROP PROCEDURE mgmt$step_374_13048;
DROP PROCEDURE mgmt$step_375_13048;
DROP PROCEDURE mgmt$step_376_13048;
DROP PROCEDURE mgmt$step_377_13048;
DROP PROCEDURE mgmt$step_378_13048;
DROP PROCEDURE mgmt$step_379_13048;
DROP PROCEDURE mgmt$step_380_13048;
DROP PROCEDURE mgmt$step_381_13048;
DROP PROCEDURE mgmt$step_382_13048;
DROP PROCEDURE mgmt$step_383_13048;
DROP PROCEDURE mgmt$step_384_13048;
DROP PROCEDURE mgmt$step_385_13048;
DROP PROCEDURE mgmt$step_386_13048;
DROP PROCEDURE mgmt$step_387_13048;
DROP PROCEDURE mgmt$step_388_13048;
DROP PROCEDURE mgmt$step_389_13048;
DROP PROCEDURE mgmt$step_390_13048;
DROP PROCEDURE mgmt$step_391_13048;
DROP PROCEDURE mgmt$step_392_13048;
DROP PROCEDURE mgmt$step_393_13048;
DROP PROCEDURE mgmt$step_394_13048;
DROP PROCEDURE mgmt$step_395_13048;
DROP PROCEDURE mgmt$step_396_13048;
DROP PROCEDURE mgmt$step_397_13048;
DROP PROCEDURE mgmt$step_398_13048;
DROP PROCEDURE mgmt$step_399_13048;
DROP PROCEDURE mgmt$step_400_13048;
DROP PROCEDURE mgmt$step_401_13048;
DROP PROCEDURE mgmt$step_402_13048;
DROP PROCEDURE mgmt$step_403_13048;
DROP PROCEDURE mgmt$step_404_13048;
DROP PROCEDURE mgmt$step_405_13048;
DROP PROCEDURE mgmt$step_406_13048;
DROP PROCEDURE mgmt$step_407_13048;
DROP PROCEDURE mgmt$step_408_13048;
DROP PROCEDURE mgmt$step_409_13048;
DROP PROCEDURE mgmt$step_410_13048;
DROP PROCEDURE mgmt$step_411_13048;
DROP PROCEDURE mgmt$step_412_13048;
DROP PROCEDURE mgmt$step_413_13048;
DROP PROCEDURE mgmt$step_414_13048;
DROP PROCEDURE mgmt$step_415_13048;
DROP PROCEDURE mgmt$step_416_13048;
DROP PROCEDURE mgmt$step_417_13048;
DROP PROCEDURE mgmt$step_418_13048;
DROP PROCEDURE mgmt$step_419_13048;
DROP PROCEDURE mgmt$step_420_13048;
DROP PROCEDURE mgmt$step_421_13048;
DROP PROCEDURE mgmt$step_422_13048;
DROP PROCEDURE mgmt$step_423_13048;
DROP PROCEDURE mgmt$step_424_13048;
DROP PROCEDURE mgmt$step_425_13048;
DROP PROCEDURE mgmt$step_426_13048;
DROP PROCEDURE mgmt$step_427_13048;
DROP PROCEDURE mgmt$step_428_13048;
DROP PROCEDURE mgmt$step_429_13048;
DROP PROCEDURE mgmt$step_430_13048;
DROP PROCEDURE mgmt$step_431_13048;
DROP PROCEDURE mgmt$step_432_13048;
DROP PROCEDURE mgmt$step_433_13048;
DROP PROCEDURE mgmt$step_434_13048;
DROP PROCEDURE mgmt$step_435_13048;
DROP PROCEDURE mgmt$step_436_13048;
DROP PROCEDURE mgmt$step_437_13048;
DROP PROCEDURE mgmt$step_438_13048;
DROP PROCEDURE mgmt$step_439_13048;
DROP PROCEDURE mgmt$step_440_13048;
DROP PROCEDURE mgmt$step_441_13048;
DROP PROCEDURE mgmt$step_442_13048;
DROP PROCEDURE mgmt$step_443_13048;
DROP PROCEDURE mgmt$step_444_13048;
DROP PROCEDURE mgmt$step_445_13048;
DROP PROCEDURE mgmt$step_446_13048;
DROP PROCEDURE mgmt$step_447_13048;
DROP PROCEDURE mgmt$step_448_13048;
DROP PROCEDURE mgmt$step_449_13048;
DROP PROCEDURE mgmt$step_450_13048;
DROP PROCEDURE mgmt$step_451_13048;
DROP PROCEDURE mgmt$step_452_13048;
DROP PROCEDURE mgmt$step_453_13048;
DROP PROCEDURE mgmt$step_454_13048;
DROP PROCEDURE mgmt$step_455_13048;
DROP PROCEDURE mgmt$step_456_13048;
DROP PROCEDURE mgmt$step_457_13048;
DROP PROCEDURE mgmt$step_458_13048;
DROP PROCEDURE mgmt$step_459_13048;
DROP PROCEDURE mgmt$step_460_13048;
DROP PROCEDURE mgmt$step_461_13048;
DROP PROCEDURE mgmt$step_462_13048;
DROP PROCEDURE mgmt$step_463_13048;
DROP PROCEDURE mgmt$step_464_13048;
DROP PROCEDURE mgmt$step_465_13048;
DROP PROCEDURE mgmt$step_466_13048;
DROP PROCEDURE mgmt$step_467_13048;
DROP PROCEDURE mgmt$step_468_13048;
DROP PROCEDURE mgmt$step_469_13048;
DROP PROCEDURE mgmt$step_470_13048;
DROP PROCEDURE mgmt$step_471_13048;
DROP PROCEDURE mgmt$step_472_13048;
DROP PROCEDURE mgmt$step_473_13048;
DROP PROCEDURE mgmt$step_474_13048;
DROP PROCEDURE mgmt$step_475_13048;
DROP PROCEDURE mgmt$step_476_13048;
DROP PROCEDURE mgmt$step_477_13048;
DROP PROCEDURE mgmt$step_478_13048;
DROP PROCEDURE mgmt$step_479_13048;
DROP PROCEDURE mgmt$step_480_13048;
DROP PROCEDURE mgmt$step_481_13048;
DROP PROCEDURE mgmt$step_482_13048;
DROP PROCEDURE mgmt$step_483_13048;
DROP PROCEDURE mgmt$step_484_13048;
DROP PROCEDURE mgmt$step_485_13048;
DROP PROCEDURE mgmt$step_486_13048;
DROP PROCEDURE mgmt$step_487_13048;
DROP PROCEDURE mgmt$step_488_13048;
DROP PROCEDURE mgmt$step_489_13048;
DROP PROCEDURE mgmt$step_490_13048;
DROP PROCEDURE mgmt$step_491_13048;
DROP PROCEDURE mgmt$step_492_13048;
DROP PROCEDURE mgmt$step_493_13048;
DROP PROCEDURE mgmt$step_494_13048;
DROP PROCEDURE mgmt$step_495_13048;
DROP PROCEDURE mgmt$step_496_13048;
DROP PROCEDURE mgmt$step_497_13048;
DROP PROCEDURE mgmt$step_498_13048;
DROP PROCEDURE mgmt$step_499_13048;
DROP PROCEDURE mgmt$step_500_13048;
DROP PROCEDURE mgmt$step_501_13048;
DROP PROCEDURE mgmt$step_502_13048;
DROP PROCEDURE mgmt$step_503_13048;
DROP PROCEDURE mgmt$step_504_13048;
DROP PROCEDURE mgmt$step_505_13048;
DROP PROCEDURE mgmt$step_506_13048;
DROP PROCEDURE mgmt$step_507_13048;
DROP PROCEDURE mgmt$step_508_13048;
DROP PROCEDURE mgmt$step_509_13048;
DROP PROCEDURE mgmt$step_510_13048;
DROP PROCEDURE mgmt$step_511_13048;
DROP PROCEDURE mgmt$step_512_13048;
DROP PROCEDURE mgmt$step_513_13048;
DROP PROCEDURE mgmt$step_514_13048;
DROP PROCEDURE mgmt$step_515_13048;
DROP PROCEDURE mgmt$step_516_13048;
DROP PROCEDURE mgmt$step_517_13048;
DROP PROCEDURE mgmt$step_518_13048;
DROP PROCEDURE mgmt$step_519_13048;
DROP PROCEDURE mgmt$step_520_13048;
DROP PROCEDURE mgmt$step_521_13048;
DROP PROCEDURE mgmt$step_522_13048;
DROP PROCEDURE mgmt$step_523_13048;
DROP PROCEDURE mgmt$step_524_13048;
DROP PROCEDURE mgmt$step_525_13048;
DROP PROCEDURE mgmt$step_526_13048;
DROP PROCEDURE mgmt$step_527_13048;
DROP PROCEDURE mgmt$step_528_13048;
DROP PROCEDURE mgmt$step_529_13048;
DROP PROCEDURE mgmt$step_530_13048;
DROP PROCEDURE mgmt$step_531_13048;
DROP PROCEDURE mgmt$step_532_13048;
DROP PROCEDURE mgmt$step_533_13048;
DROP PROCEDURE mgmt$step_534_13048;
DROP PROCEDURE mgmt$step_535_13048;
DROP PROCEDURE mgmt$step_536_13048;
DROP PROCEDURE mgmt$step_537_13048;
DROP PROCEDURE mgmt$step_538_13048;
DROP PROCEDURE mgmt$step_539_13048;
DROP PROCEDURE mgmt$step_540_13048;
DROP PROCEDURE mgmt$step_541_13048;
DROP PROCEDURE mgmt$step_542_13048;
DROP PROCEDURE mgmt$step_543_13048;
DROP PROCEDURE mgmt$step_544_13048;
DROP PROCEDURE mgmt$step_545_13048;
DROP PROCEDURE mgmt$step_546_13048;
DROP PROCEDURE mgmt$step_547_13048;
DROP PROCEDURE mgmt$step_548_13048;
DROP PROCEDURE mgmt$step_549_13048;
DROP PROCEDURE mgmt$step_550_13048;
DROP PROCEDURE mgmt$step_551_13048;
DROP PROCEDURE mgmt$step_552_13048;
DROP PROCEDURE mgmt$step_553_13048;
DROP PROCEDURE mgmt$step_554_13048;
DROP PROCEDURE mgmt$step_555_13048;
DROP PROCEDURE mgmt$step_556_13048;
DROP PROCEDURE mgmt$step_557_13048;
DROP PROCEDURE mgmt$step_558_13048;
DROP PROCEDURE mgmt$step_559_13048;
DROP PROCEDURE mgmt$step_560_13048;
DROP PROCEDURE mgmt$step_561_13048;
DROP PROCEDURE mgmt$step_562_13048;
DROP PROCEDURE mgmt$step_563_13048;
DROP PROCEDURE mgmt$step_564_13048;
DROP PROCEDURE mgmt$step_565_13048;
DROP PROCEDURE mgmt$step_566_13048;
DROP PROCEDURE mgmt$step_567_13048;
DROP PROCEDURE mgmt$step_568_13048;
DROP PROCEDURE mgmt$step_569_13048;
DROP PROCEDURE mgmt$step_570_13048;
DROP PROCEDURE mgmt$step_571_13048;
DROP PROCEDURE mgmt$step_572_13048;
DROP PROCEDURE mgmt$step_573_13048;
DROP PROCEDURE mgmt$step_574_13048;
DROP PROCEDURE mgmt$step_575_13048;
DROP PROCEDURE mgmt$step_576_13048;
DROP PROCEDURE mgmt$step_577_13048;
DROP PROCEDURE mgmt$step_578_13048;
DROP PROCEDURE mgmt$step_579_13048;
DROP PROCEDURE mgmt$step_580_13048;
DROP PROCEDURE mgmt$step_581_13048;
DROP PROCEDURE mgmt$step_582_13048;
DROP PROCEDURE mgmt$step_583_13048;
DROP PROCEDURE mgmt$step_584_13048;
DROP PROCEDURE mgmt$step_585_13048;
DROP PROCEDURE mgmt$step_586_13048;
DROP PROCEDURE mgmt$step_587_13048;
DROP PROCEDURE mgmt$step_588_13048;
DROP PROCEDURE mgmt$step_589_13048;
DROP PROCEDURE mgmt$step_590_13048;
DROP PROCEDURE mgmt$step_591_13048;
DROP PROCEDURE mgmt$step_592_13048;
DROP PROCEDURE mgmt$step_593_13048;
DROP PROCEDURE mgmt$step_594_13048;
DROP PROCEDURE mgmt$step_595_13048;
DROP PROCEDURE mgmt$step_596_13048;
DROP PROCEDURE mgmt$step_597_13048;
DROP PROCEDURE mgmt$step_598_13048;
DROP PROCEDURE mgmt$step_599_13048;
DROP PROCEDURE mgmt$step_600_13048;
DROP PROCEDURE mgmt$step_601_13048;
DROP PROCEDURE mgmt$step_602_13048;
DROP PROCEDURE mgmt$step_603_13048;
DROP PROCEDURE mgmt$step_604_13048;
DROP PROCEDURE mgmt$step_605_13048;
DROP PROCEDURE mgmt$step_606_13048;
DROP PROCEDURE mgmt$step_607_13048;
DROP PROCEDURE mgmt$step_608_13048;
DROP PROCEDURE mgmt$step_609_13048;
DROP PROCEDURE mgmt$step_610_13048;
DROP PROCEDURE mgmt$step_611_13048;
DROP PROCEDURE mgmt$step_612_13048;
DROP PROCEDURE mgmt$step_613_13048;
DROP PROCEDURE mgmt$step_614_13048;
DROP PROCEDURE mgmt$step_615_13048;
DROP PROCEDURE mgmt$step_616_13048;
DROP PROCEDURE mgmt$step_617_13048;
DROP PROCEDURE mgmt$step_618_13048;
DROP PROCEDURE mgmt$step_619_13048;
DROP PROCEDURE mgmt$step_620_13048;
DROP PROCEDURE mgmt$step_621_13048;
DROP PROCEDURE mgmt$step_622_13048;
DROP PROCEDURE mgmt$step_623_13048;
DROP PROCEDURE mgmt$step_624_13048;
DROP PROCEDURE mgmt$step_625_13048;
DROP PROCEDURE mgmt$step_626_13048;
DROP PROCEDURE mgmt$step_627_13048;
DROP PROCEDURE mgmt$step_628_13048;
DROP PROCEDURE mgmt$step_629_13048;
DROP PROCEDURE mgmt$step_630_13048;
DROP PROCEDURE mgmt$step_631_13048;
DROP PROCEDURE mgmt$step_632_13048;
DROP PROCEDURE mgmt$step_633_13048;
DROP PROCEDURE mgmt$step_634_13048;
DROP PROCEDURE mgmt$step_635_13048;
DROP PROCEDURE mgmt$step_636_13048;
DROP PROCEDURE mgmt$step_637_13048;
DROP PROCEDURE mgmt$step_638_13048;
DROP PROCEDURE mgmt$step_639_13048;
DROP PROCEDURE mgmt$step_640_13048;
DROP PROCEDURE mgmt$step_641_13048;
DROP PROCEDURE mgmt$step_642_13048;
DROP PROCEDURE mgmt$step_643_13048;
DROP PROCEDURE mgmt$step_644_13048;
DROP PROCEDURE mgmt$step_645_13048;
DROP PROCEDURE mgmt$step_646_13048;
DROP PROCEDURE mgmt$step_647_13048;
DROP PROCEDURE mgmt$step_648_13048;
DROP PROCEDURE mgmt$step_649_13048;
DROP PROCEDURE mgmt$step_650_13048;
DROP PROCEDURE mgmt$step_651_13048;
DROP PROCEDURE mgmt$step_652_13048;
DROP PROCEDURE mgmt$step_653_13048;
DROP PROCEDURE mgmt$step_654_13048;
DROP PROCEDURE mgmt$step_655_13048;
DROP PROCEDURE mgmt$step_656_13048;
DROP PROCEDURE mgmt$step_657_13048;
DROP PROCEDURE mgmt$step_658_13048;
DROP PROCEDURE mgmt$step_659_13048;
DROP PROCEDURE mgmt$step_660_13048;
DROP PROCEDURE mgmt$step_661_13048;
DROP PROCEDURE mgmt$step_662_13048;
DROP PROCEDURE mgmt$step_663_13048;
DROP PROCEDURE mgmt$step_664_13048;
DROP PROCEDURE mgmt$step_665_13048;
DROP PROCEDURE mgmt$step_666_13048;
DROP PROCEDURE mgmt$step_667_13048;
DROP PROCEDURE mgmt$step_668_13048;
DROP PROCEDURE mgmt$step_669_13048;
DROP PROCEDURE mgmt$step_670_13048;
DROP PROCEDURE mgmt$step_671_13048;
DROP PROCEDURE mgmt$step_672_13048;
DROP PROCEDURE mgmt$step_673_13048;
DROP PROCEDURE mgmt$step_674_13048;
DROP PROCEDURE mgmt$step_675_13048;
DROP PROCEDURE mgmt$step_676_13048;
DROP PROCEDURE mgmt$step_677_13048;
DROP PROCEDURE mgmt$step_678_13048;
DROP PROCEDURE mgmt$step_679_13048;
DROP PROCEDURE mgmt$step_680_13048;
DROP PROCEDURE mgmt$step_681_13048;
DROP PROCEDURE mgmt$step_682_13048;
DROP PROCEDURE mgmt$step_683_13048;
DROP PROCEDURE mgmt$step_684_13048;
DROP PROCEDURE mgmt$step_685_13048;
DROP PROCEDURE mgmt$step_686_13048;
DROP PROCEDURE mgmt$step_687_13048;
DROP PROCEDURE mgmt$step_688_13048;
DROP PROCEDURE mgmt$step_689_13048;
DROP PROCEDURE mgmt$step_690_13048;
DROP PROCEDURE mgmt$step_691_13048;
DROP PROCEDURE mgmt$step_692_13048;
DROP PROCEDURE mgmt$step_693_13048;
DROP PROCEDURE mgmt$step_694_13048;
DROP PROCEDURE mgmt$step_695_13048;
DROP PROCEDURE mgmt$step_696_13048;
DROP PROCEDURE mgmt$step_697_13048;
DROP PROCEDURE mgmt$step_698_13048;
DROP PROCEDURE mgmt$step_699_13048;
DROP PROCEDURE mgmt$step_700_13048;
DROP PROCEDURE mgmt$step_701_13048;
DROP PROCEDURE mgmt$step_702_13048;
DROP PROCEDURE mgmt$step_703_13048;
DROP PROCEDURE mgmt$step_704_13048;
DROP PROCEDURE mgmt$step_705_13048;
DROP PROCEDURE mgmt$step_706_13048;
DROP PROCEDURE mgmt$step_707_13048;
DROP PROCEDURE mgmt$step_708_13048;
DROP PROCEDURE mgmt$step_709_13048;
DROP PROCEDURE mgmt$step_710_13048;
DROP PROCEDURE mgmt$step_711_13048;
DROP PROCEDURE mgmt$step_712_13048;
DROP PROCEDURE mgmt$step_713_13048;
DROP PROCEDURE mgmt$step_714_13048;
DROP PROCEDURE mgmt$step_715_13048;
DROP PROCEDURE mgmt$step_716_13048;
DROP PROCEDURE mgmt$step_717_13048;
DROP PROCEDURE mgmt$step_718_13048;
DROP PROCEDURE mgmt$step_719_13048;
DROP PROCEDURE mgmt$step_720_13048;
DROP PROCEDURE mgmt$step_721_13048;
DROP PROCEDURE mgmt$step_722_13048;
DROP PROCEDURE mgmt$step_723_13048;
DROP PROCEDURE mgmt$step_724_13048;
DROP PROCEDURE mgmt$step_725_13048;
DROP PROCEDURE mgmt$step_726_13048;
DROP PROCEDURE mgmt$step_727_13048;
DROP PROCEDURE mgmt$step_728_13048;
DROP PROCEDURE mgmt$step_729_13048;
DROP PROCEDURE mgmt$step_730_13048;
DROP PROCEDURE mgmt$step_731_13048;
DROP PROCEDURE mgmt$step_732_13048;
DROP PROCEDURE mgmt$step_733_13048;
DROP PROCEDURE mgmt$step_734_13048;
DROP PROCEDURE mgmt$step_735_13048;
DROP PROCEDURE mgmt$step_736_13048;
DROP PROCEDURE mgmt$step_737_13048;
DROP PROCEDURE mgmt$step_738_13048;
DROP PROCEDURE mgmt$step_739_13048;
DROP PROCEDURE mgmt$step_740_13048;
DROP PROCEDURE mgmt$step_741_13048;
DROP PROCEDURE mgmt$step_742_13048;
DROP PROCEDURE mgmt$step_743_13048;
DROP PROCEDURE mgmt$step_744_13048;
DROP PROCEDURE mgmt$step_745_13048;
DROP PROCEDURE mgmt$step_746_13048;
DROP PROCEDURE mgmt$step_747_13048;
DROP PROCEDURE mgmt$step_748_13048;
DROP PROCEDURE mgmt$step_749_13048;
DROP PROCEDURE mgmt$step_750_13048;
DROP PROCEDURE mgmt$step_751_13048;
DROP PROCEDURE mgmt$step_752_13048;
DROP PROCEDURE mgmt$step_753_13048;
DROP PROCEDURE mgmt$step_754_13048;
DROP PROCEDURE mgmt$step_755_13048;
DROP PROCEDURE mgmt$step_756_13048;
DROP PROCEDURE mgmt$step_757_13048;
DROP PROCEDURE mgmt$step_758_13048;
DROP PROCEDURE mgmt$step_759_13048;
DROP PROCEDURE mgmt$step_760_13048;
DROP PROCEDURE mgmt$step_761_13048;
DROP PROCEDURE mgmt$step_762_13048;
DROP PROCEDURE mgmt$step_763_13048;
DROP PROCEDURE mgmt$step_764_13048;
DROP PROCEDURE mgmt$step_765_13048;
DROP PROCEDURE mgmt$step_766_13048;
DROP PROCEDURE mgmt$step_767_13048;
DROP PROCEDURE mgmt$step_768_13048;
DROP PROCEDURE mgmt$step_769_13048;
DROP PROCEDURE mgmt$step_770_13048;
DROP PROCEDURE mgmt$step_771_13048;
DROP PROCEDURE mgmt$step_772_13048;
DROP PROCEDURE mgmt$step_773_13048;
DROP PROCEDURE mgmt$step_774_13048;
DROP PROCEDURE mgmt$step_775_13048;
DROP PROCEDURE mgmt$step_776_13048;
DROP PROCEDURE mgmt$step_777_13048;
DROP PROCEDURE mgmt$step_778_13048;
DROP PROCEDURE mgmt$step_779_13048;
DROP PROCEDURE mgmt$step_780_13048;
DROP PROCEDURE mgmt$step_781_13048;
DROP PROCEDURE mgmt$step_782_13048;
DROP PROCEDURE mgmt$step_783_13048;
DROP PROCEDURE mgmt$step_784_13048;
DROP PROCEDURE mgmt$step_785_13048;
DROP PROCEDURE mgmt$step_786_13048;
DROP PROCEDURE mgmt$step_787_13048;
DROP PROCEDURE mgmt$step_788_13048;
DROP PROCEDURE mgmt$step_789_13048;
DROP PROCEDURE mgmt$step_790_13048;
DROP PROCEDURE mgmt$step_791_13048;
DROP PROCEDURE mgmt$step_792_13048;
DROP PROCEDURE mgmt$step_793_13048;
DROP PROCEDURE mgmt$step_794_13048;
DROP PROCEDURE mgmt$step_795_13048;
DROP PROCEDURE mgmt$step_796_13048;
DROP PROCEDURE mgmt$step_797_13048;
DROP PROCEDURE mgmt$step_798_13048;
DROP PROCEDURE mgmt$step_799_13048;
DROP PROCEDURE mgmt$step_800_13048;
DROP PROCEDURE mgmt$step_801_13048;
DROP PROCEDURE mgmt$step_802_13048;
DROP PROCEDURE mgmt$step_803_13048;
DROP PROCEDURE mgmt$step_804_13048;
DROP PROCEDURE mgmt$step_805_13048;
DROP PROCEDURE mgmt$step_806_13048;
DROP PROCEDURE mgmt$step_807_13048;
DROP PROCEDURE mgmt$step_808_13048;
DROP PROCEDURE mgmt$step_809_13048;
DROP PROCEDURE mgmt$step_810_13048;
DROP PROCEDURE mgmt$step_811_13048;
DROP PROCEDURE mgmt$step_812_13048;
DROP PROCEDURE mgmt$step_813_13048;
DROP PROCEDURE mgmt$step_814_13048;
DROP PROCEDURE mgmt$step_815_13048;
DROP PROCEDURE mgmt$step_816_13048;
DROP PROCEDURE mgmt$step_817_13048;
DROP PROCEDURE mgmt$step_818_13048;
DROP PROCEDURE mgmt$step_819_13048;
DROP PROCEDURE mgmt$step_820_13048;
DROP PROCEDURE mgmt$step_821_13048;
DROP PROCEDURE mgmt$step_822_13048;
DROP PROCEDURE mgmt$step_823_13048;
DROP PROCEDURE mgmt$step_824_13048;
DROP PROCEDURE mgmt$step_825_13048;
DROP PROCEDURE mgmt$step_826_13048;
DROP PROCEDURE mgmt$step_827_13048;
DROP PROCEDURE mgmt$step_828_13048;
DROP PROCEDURE mgmt$step_829_13048;
DROP PROCEDURE mgmt$step_830_13048;
DROP PROCEDURE mgmt$step_831_13048;
DROP PROCEDURE mgmt$step_832_13048;
DROP PROCEDURE mgmt$step_833_13048;
DROP PROCEDURE mgmt$step_834_13048;
DROP PROCEDURE mgmt$step_835_13048;
DROP PROCEDURE mgmt$step_836_13048;
DROP PROCEDURE mgmt$step_837_13048;
DROP PROCEDURE mgmt$step_838_13048;
DROP PROCEDURE mgmt$step_839_13048;
DROP PROCEDURE mgmt$step_840_13048;
DROP PROCEDURE mgmt$step_841_13048;
DROP PROCEDURE mgmt$step_842_13048;
DROP PROCEDURE mgmt$step_843_13048;
DROP PROCEDURE mgmt$step_844_13048;
DROP PROCEDURE mgmt$step_845_13048;
DROP PROCEDURE mgmt$step_846_13048;
DROP PROCEDURE mgmt$step_847_13048;
DROP PROCEDURE mgmt$step_848_13048;
DROP PROCEDURE mgmt$step_849_13048;
DROP PROCEDURE mgmt$step_850_13048;
DROP PROCEDURE mgmt$step_851_13048;
DROP PROCEDURE mgmt$step_852_13048;
DROP PROCEDURE mgmt$step_853_13048;
DROP PROCEDURE mgmt$step_854_13048;
DROP PROCEDURE mgmt$step_855_13048;
DROP PROCEDURE mgmt$step_856_13048;
DROP PROCEDURE mgmt$step_857_13048;
DROP PROCEDURE mgmt$step_858_13048;
DROP PROCEDURE mgmt$step_859_13048;
DROP PROCEDURE mgmt$step_860_13048;
DROP PROCEDURE mgmt$step_861_13048;
DROP PROCEDURE mgmt$step_862_13048;
DROP PROCEDURE mgmt$step_863_13048;
DROP PROCEDURE mgmt$step_864_13048;
DROP PROCEDURE mgmt$step_865_13048;
DROP PROCEDURE mgmt$step_866_13048;
DROP PROCEDURE mgmt$step_867_13048;
DROP PROCEDURE mgmt$step_868_13048;
DROP PROCEDURE mgmt$step_869_13048;
DROP PROCEDURE mgmt$step_870_13048;
DROP PROCEDURE mgmt$step_871_13048;
DROP PROCEDURE mgmt$step_872_13048;
DROP PROCEDURE mgmt$step_873_13048;
DROP PROCEDURE mgmt$step_874_13048;
DROP PROCEDURE mgmt$step_875_13048;
DROP PROCEDURE mgmt$step_876_13048;
DROP PROCEDURE mgmt$step_877_13048;
DROP PROCEDURE mgmt$step_878_13048;
DROP PROCEDURE mgmt$step_879_13048;
DROP PROCEDURE mgmt$step_880_13048;
DROP PROCEDURE mgmt$step_881_13048;
DROP PROCEDURE mgmt$step_882_13048;
DROP PROCEDURE mgmt$step_883_13048;
DROP PROCEDURE mgmt$step_884_13048;
DROP PROCEDURE mgmt$step_885_13048;
DROP PROCEDURE mgmt$step_886_13048;
DROP PROCEDURE mgmt$step_887_13048;
DROP PROCEDURE mgmt$step_888_13048;
DROP PROCEDURE mgmt$step_889_13048;
DROP PROCEDURE mgmt$step_890_13048;
DROP PROCEDURE mgmt$step_891_13048;
DROP PROCEDURE mgmt$step_892_13048;
DROP PROCEDURE mgmt$step_893_13048;
DROP PROCEDURE mgmt$step_894_13048;
DROP PROCEDURE mgmt$step_895_13048;
DROP PROCEDURE mgmt$step_896_13048;
DROP PROCEDURE mgmt$step_897_13048;
DROP PROCEDURE mgmt$step_898_13048;
DROP PROCEDURE mgmt$step_899_13048;
DROP PROCEDURE mgmt$step_900_13048;
DROP PROCEDURE mgmt$step_901_13048;
DROP PROCEDURE mgmt$step_902_13048;
DROP PROCEDURE mgmt$step_903_13048;
DROP PROCEDURE mgmt$step_904_13048;
DROP PROCEDURE mgmt$step_905_13048;
DROP PROCEDURE mgmt$step_906_13048;
DROP PROCEDURE mgmt$step_907_13048;
DROP PROCEDURE mgmt$step_908_13048;
DROP PROCEDURE mgmt$step_909_13048;
DROP PROCEDURE mgmt$step_910_13048;
DROP PROCEDURE mgmt$step_911_13048;
DROP PROCEDURE mgmt$step_912_13048;
DROP PROCEDURE mgmt$step_913_13048;
DROP PROCEDURE mgmt$step_914_13048;
DROP PROCEDURE mgmt$step_915_13048;
DROP PROCEDURE mgmt$step_916_13048;
DROP PROCEDURE mgmt$step_917_13048;
DROP PROCEDURE mgmt$step_918_13048;
DROP PROCEDURE mgmt$step_919_13048;
DROP PROCEDURE mgmt$step_920_13048;
DROP PROCEDURE mgmt$step_921_13048;
DROP PROCEDURE mgmt$step_922_13048;
DROP PROCEDURE mgmt$step_923_13048;
DROP PROCEDURE mgmt$step_924_13048;
DROP PROCEDURE mgmt$step_925_13048;
DROP PROCEDURE mgmt$step_926_13048;
DROP PROCEDURE mgmt$step_927_13048;
DROP PROCEDURE mgmt$step_928_13048;
DROP PROCEDURE mgmt$step_929_13048;
DROP PROCEDURE mgmt$step_930_13048;
DROP PROCEDURE mgmt$step_931_13048;
DROP PROCEDURE mgmt$step_932_13048;
DROP PROCEDURE mgmt$step_933_13048;
DROP PROCEDURE mgmt$step_934_13048;
DROP PROCEDURE mgmt$step_935_13048;
DROP PROCEDURE mgmt$step_936_13048;
DROP PROCEDURE mgmt$step_937_13048;
DROP PROCEDURE mgmt$step_938_13048;
DROP PROCEDURE mgmt$step_939_13048;
DROP PROCEDURE mgmt$step_940_13048;
DROP PROCEDURE mgmt$step_941_13048;
DROP PROCEDURE mgmt$step_942_13048;
DROP PROCEDURE mgmt$step_943_13048;
DROP PROCEDURE mgmt$step_944_13048;
DROP PROCEDURE mgmt$step_945_13048;
DROP PROCEDURE mgmt$step_946_13048;
DROP PROCEDURE mgmt$step_947_13048;
DROP PROCEDURE mgmt$step_948_13048;
DROP PROCEDURE mgmt$step_949_13048;
DROP PROCEDURE mgmt$step_950_13048;
DROP PROCEDURE mgmt$step_951_13048;
DROP PROCEDURE mgmt$step_952_13048;
DROP PROCEDURE mgmt$step_953_13048;
DROP PROCEDURE mgmt$step_954_13048;
DROP PROCEDURE mgmt$step_955_13048;
DROP PROCEDURE mgmt$step_956_13048;
DROP PROCEDURE mgmt$step_957_13048;
DROP PROCEDURE mgmt$step_958_13048;
DROP PROCEDURE mgmt$step_959_13048;
DROP PROCEDURE mgmt$step_960_13048;
DROP PROCEDURE mgmt$step_961_13048;
DROP PROCEDURE mgmt$step_962_13048;
DROP PROCEDURE mgmt$step_963_13048;
DROP PROCEDURE mgmt$step_964_13048;
DROP PROCEDURE mgmt$step_965_13048;
DROP PROCEDURE mgmt$step_966_13048;
DROP PROCEDURE mgmt$step_967_13048;
DROP PROCEDURE mgmt$step_968_13048;
DROP PROCEDURE mgmt$step_969_13048;
DROP PROCEDURE mgmt$step_970_13048;
DROP PROCEDURE mgmt$step_971_13048;
DROP PROCEDURE mgmt$step_972_13048;
DROP PROCEDURE mgmt$step_973_13048;
DROP PROCEDURE mgmt$step_974_13048;
DROP PROCEDURE mgmt$step_975_13048;
DROP PROCEDURE mgmt$step_976_13048;
DROP PROCEDURE mgmt$step_977_13048;
DROP PROCEDURE mgmt$step_978_13048;
DROP PROCEDURE mgmt$step_979_13048;
DROP PROCEDURE mgmt$step_980_13048;
DROP PROCEDURE mgmt$step_981_13048;
DROP PROCEDURE mgmt$step_982_13048;
DROP PROCEDURE mgmt$step_983_13048;
DROP PROCEDURE mgmt$step_984_13048;
DROP PROCEDURE mgmt$step_985_13048;
DROP PROCEDURE mgmt$step_986_13048;
DROP PROCEDURE mgmt$step_987_13048;
DROP PROCEDURE mgmt$step_988_13048;
DROP PROCEDURE mgmt$step_989_13048;
DROP PROCEDURE mgmt$step_990_13048;
DROP PROCEDURE mgmt$step_991_13048;
DROP PROCEDURE mgmt$step_992_13048;
DROP PROCEDURE mgmt$step_993_13048;
DROP PROCEDURE mgmt$step_994_13048;
DROP PROCEDURE mgmt$step_995_13048;
DROP PROCEDURE mgmt$step_996_13048;
DROP PROCEDURE mgmt$step_997_13048;
DROP PROCEDURE mgmt$step_998_13048;
DROP PROCEDURE mgmt$step_999_13048;
DROP PROCEDURE mgmt$step_1000_13048;
DROP PROCEDURE mgmt$step_1001_13048;
DROP PROCEDURE mgmt$step_1002_13048;
DROP PROCEDURE mgmt$step_1003_13048;
DROP PROCEDURE mgmt$step_1004_13048;
DROP PROCEDURE mgmt$step_1005_13048;
DROP PROCEDURE mgmt$step_1006_13048;
DROP PROCEDURE mgmt$step_1007_13048;
DROP PROCEDURE mgmt$step_1008_13048;
DROP PROCEDURE mgmt$step_1009_13048;
DROP PROCEDURE mgmt$step_1010_13048;
DROP PROCEDURE mgmt$step_1011_13048;
DROP PROCEDURE mgmt$step_1012_13048;
DROP PROCEDURE mgmt$step_1013_13048;
DROP PROCEDURE mgmt$step_1014_13048;
DROP PROCEDURE mgmt$step_1015_13048;
DROP PROCEDURE mgmt$step_1016_13048;
DROP PROCEDURE mgmt$step_1017_13048;
DROP PROCEDURE mgmt$step_1018_13048;
DROP PROCEDURE mgmt$step_1019_13048;
DROP PROCEDURE mgmt$step_1020_13048;
DROP PROCEDURE mgmt$step_1021_13048;
DROP PROCEDURE mgmt$step_1022_13048;
DROP PROCEDURE mgmt$step_1023_13048;
DROP PROCEDURE mgmt$step_1024_13048;
DROP PROCEDURE mgmt$step_1025_13048;
DROP PROCEDURE mgmt$step_1026_13048;
DROP PROCEDURE mgmt$step_1027_13048;
DROP PROCEDURE mgmt$step_1028_13048;
DROP PROCEDURE mgmt$step_1029_13048;
DROP PROCEDURE mgmt$step_1030_13048;
DROP PROCEDURE mgmt$step_1031_13048;
DROP PROCEDURE mgmt$step_1032_13048;
DROP PROCEDURE mgmt$step_1033_13048;
DROP PROCEDURE mgmt$step_1034_13048;
DROP PROCEDURE mgmt$step_1035_13048;
DROP PROCEDURE mgmt$step_1036_13048;
DROP PROCEDURE mgmt$step_1037_13048;
DROP PROCEDURE mgmt$step_1038_13048;
DROP PROCEDURE mgmt$step_1039_13048;
DROP PROCEDURE mgmt$step_1040_13048;
DROP PROCEDURE mgmt$step_1041_13048;
DROP PROCEDURE mgmt$step_1042_13048;
DROP PROCEDURE mgmt$step_1043_13048;
DROP PROCEDURE mgmt$step_1044_13048;
DROP PROCEDURE mgmt$step_1045_13048;
DROP PROCEDURE mgmt$step_1046_13048;
DROP PROCEDURE mgmt$step_1047_13048;
DROP PROCEDURE mgmt$step_1048_13048;
DROP PROCEDURE mgmt$step_1049_13048;
DROP PROCEDURE mgmt$step_1050_13048;
DROP PROCEDURE mgmt$step_1051_13048;
DROP PROCEDURE mgmt$step_1052_13048;
DROP PROCEDURE mgmt$step_1053_13048;
DROP PROCEDURE mgmt$step_1054_13048;
DROP PROCEDURE mgmt$step_1055_13048;
DROP PROCEDURE mgmt$step_1056_13048;
DROP PROCEDURE mgmt$step_1057_13048;
DROP PROCEDURE mgmt$step_1058_13048;
DROP PROCEDURE mgmt$step_1059_13048;
DROP PROCEDURE mgmt$step_1060_13048;
DROP PROCEDURE mgmt$step_1061_13048;
DROP PROCEDURE mgmt$step_1062_13048;
DROP PROCEDURE mgmt$step_1063_13048;
DROP PROCEDURE mgmt$step_1064_13048;
DROP PROCEDURE mgmt$step_1065_13048;
DROP PROCEDURE mgmt$step_1066_13048;
DROP PROCEDURE mgmt$step_1067_13048;
DROP PROCEDURE mgmt$step_1068_13048;
DROP PROCEDURE mgmt$step_1069_13048;
DROP PROCEDURE mgmt$step_1070_13048;
DROP PROCEDURE mgmt$step_1071_13048;
DROP PROCEDURE mgmt$step_1072_13048;
DROP PROCEDURE mgmt$step_1073_13048;
DROP PROCEDURE mgmt$step_1074_13048;
DROP PROCEDURE mgmt$step_1075_13048;
DROP PROCEDURE mgmt$step_1076_13048;
DROP PROCEDURE mgmt$step_1077_13048;
DROP PROCEDURE mgmt$step_1078_13048;
DROP PROCEDURE mgmt$step_1079_13048;
DROP PROCEDURE mgmt$step_1080_13048;
DROP PROCEDURE mgmt$step_1081_13048;
DROP PROCEDURE mgmt$step_1082_13048;
DROP PROCEDURE mgmt$step_1083_13048;
DROP PROCEDURE mgmt$step_1084_13048;
DROP PROCEDURE mgmt$step_1085_13048;
DROP PROCEDURE mgmt$step_1086_13048;
DROP PROCEDURE mgmt$step_1087_13048;
DROP PROCEDURE mgmt$step_1088_13048;
DROP PROCEDURE mgmt$step_1089_13048;
DROP PROCEDURE mgmt$step_1090_13048;
DROP PROCEDURE mgmt$step_1091_13048;
DROP PROCEDURE mgmt$step_1092_13048;
DROP PROCEDURE mgmt$step_1093_13048;
DROP PROCEDURE mgmt$step_1094_13048;
DROP PROCEDURE mgmt$step_1095_13048;
DROP PROCEDURE mgmt$step_1096_13048;
DROP PROCEDURE mgmt$step_1097_13048;
DROP PROCEDURE mgmt$step_1098_13048;
DROP PROCEDURE mgmt$step_1099_13048;
DROP PROCEDURE mgmt$step_1100_13048;
DROP PROCEDURE mgmt$step_1101_13048;
DROP PROCEDURE mgmt$step_1102_13048;
DROP PROCEDURE mgmt$step_1103_13048;
DROP PROCEDURE mgmt$step_1104_13048;
DROP PROCEDURE mgmt$step_1105_13048;
DROP PROCEDURE mgmt$step_1106_13048;
DROP PROCEDURE mgmt$step_1107_13048;
DROP PROCEDURE mgmt$step_1108_13048;
DROP PROCEDURE mgmt$step_1109_13048;
DROP PROCEDURE mgmt$step_1110_13048;
DROP PROCEDURE mgmt$step_1111_13048;
DROP PROCEDURE mgmt$step_1112_13048;
DROP PROCEDURE mgmt$step_1113_13048;
DROP PROCEDURE mgmt$step_1114_13048;
DROP PROCEDURE mgmt$step_1115_13048;
DROP PROCEDURE mgmt$step_1116_13048;
DROP PROCEDURE mgmt$step_1117_13048;
DROP PROCEDURE mgmt$step_1118_13048;
DROP PROCEDURE mgmt$step_1119_13048;
DROP PROCEDURE mgmt$step_1120_13048;
DROP PROCEDURE mgmt$step_1121_13048;
DROP PROCEDURE mgmt$step_1122_13048;
DROP PROCEDURE mgmt$step_1123_13048;
DROP PROCEDURE mgmt$step_1124_13048;
DROP PROCEDURE mgmt$step_1125_13048;
DROP PROCEDURE mgmt$step_1126_13048;
DROP PROCEDURE mgmt$step_1127_13048;
DROP PROCEDURE mgmt$step_1128_13048;
DROP PROCEDURE mgmt$step_1129_13048;
DROP PROCEDURE mgmt$step_1130_13048;
DROP PROCEDURE mgmt$step_1131_13048;
DROP PROCEDURE mgmt$step_1132_13048;
DROP PROCEDURE mgmt$step_1133_13048;
DROP PROCEDURE mgmt$step_1134_13048;
DROP PROCEDURE mgmt$step_1135_13048;
DROP PROCEDURE mgmt$step_1136_13048;
DROP PROCEDURE mgmt$step_1137_13048;
DROP PROCEDURE mgmt$step_1138_13048;
DROP PROCEDURE mgmt$step_1139_13048;
DROP PROCEDURE mgmt$step_1140_13048;
DROP PROCEDURE mgmt$step_1141_13048;
DROP PROCEDURE mgmt$step_1142_13048;
DROP PROCEDURE mgmt$step_1143_13048;
DROP PROCEDURE mgmt$step_1144_13048;
DROP PROCEDURE mgmt$step_1145_13048;
DROP PROCEDURE mgmt$step_1146_13048;
DROP PROCEDURE mgmt$step_1147_13048;
DROP PROCEDURE mgmt$step_1148_13048;
DROP PROCEDURE mgmt$step_1149_13048;
DROP PROCEDURE mgmt$step_1150_13048;
DROP PROCEDURE mgmt$step_1151_13048;
DROP PROCEDURE mgmt$step_1152_13048;
DROP PROCEDURE mgmt$step_1153_13048;
DROP PROCEDURE mgmt$step_1154_13048;
DROP PROCEDURE mgmt$step_1155_13048;
DROP PROCEDURE mgmt$step_1156_13048;
DROP PROCEDURE mgmt$step_1157_13048;
DROP PROCEDURE mgmt$step_1158_13048;
DROP PROCEDURE mgmt$step_1159_13048;
DROP PROCEDURE mgmt$step_1160_13048;
DROP PROCEDURE mgmt$step_1161_13048;
DROP PROCEDURE mgmt$step_1162_13048;
DROP PROCEDURE mgmt$step_1163_13048;
DROP PROCEDURE mgmt$step_1164_13048;
DROP PROCEDURE mgmt$step_1165_13048;
DROP PROCEDURE mgmt$step_1166_13048;
DROP PROCEDURE mgmt$step_1167_13048;
DROP PROCEDURE mgmt$step_1168_13048;
DROP PROCEDURE mgmt$step_1169_13048;
DROP PROCEDURE mgmt$step_1170_13048;
DROP PROCEDURE mgmt$step_1171_13048;
DROP PROCEDURE mgmt$step_1172_13048;
DROP PROCEDURE mgmt$step_1173_13048;
DROP PROCEDURE mgmt$step_1174_13048;
DROP PROCEDURE mgmt$step_1175_13048;
DROP PROCEDURE mgmt$step_1176_13048;
DROP PROCEDURE mgmt$step_1177_13048;
DROP PROCEDURE mgmt$step_1178_13048;
DROP PROCEDURE mgmt$step_1179_13048;
DROP PROCEDURE mgmt$step_1180_13048;
DROP PROCEDURE mgmt$step_1181_13048;
DROP PROCEDURE mgmt$step_1182_13048;
DROP PROCEDURE mgmt$step_1183_13048;
DROP PROCEDURE mgmt$step_1184_13048;
DROP PROCEDURE mgmt$step_1185_13048;
DROP PROCEDURE mgmt$step_1186_13048;
DROP PROCEDURE mgmt$step_1187_13048;
DROP PROCEDURE mgmt$step_1188_13048;
DROP PROCEDURE mgmt$step_1189_13048;
DROP PROCEDURE mgmt$step_1190_13048;
DROP PROCEDURE mgmt$step_1191_13048;
DROP PROCEDURE mgmt$step_1192_13048;
DROP PROCEDURE mgmt$step_1193_13048;
DROP PROCEDURE mgmt$step_1194_13048;
DROP PROCEDURE mgmt$step_1195_13048;
DROP PROCEDURE mgmt$step_1196_13048;
DROP PROCEDURE mgmt$step_1197_13048;
DROP PROCEDURE mgmt$step_1198_13048;
DROP PROCEDURE mgmt$step_1199_13048;
DROP PROCEDURE mgmt$step_1200_13048;
DROP PROCEDURE mgmt$step_1201_13048;
DROP PROCEDURE mgmt$step_1202_13048;
DROP PROCEDURE mgmt$step_1203_13048;
DROP PROCEDURE mgmt$step_1204_13048;
DROP PROCEDURE mgmt$step_1205_13048;
DROP PROCEDURE mgmt$step_1206_13048;
DROP PROCEDURE mgmt$step_1207_13048;
DROP PROCEDURE mgmt$step_1208_13048;
DROP PROCEDURE mgmt$step_1209_13048;
DROP PROCEDURE mgmt$step_1210_13048;
DROP PROCEDURE mgmt$step_1211_13048;
DROP PROCEDURE mgmt$step_1212_13048;
DROP PROCEDURE mgmt$step_1213_13048;
DROP PROCEDURE mgmt$step_1214_13048;
DROP PROCEDURE mgmt$step_1215_13048;
DROP PROCEDURE mgmt$step_1216_13048;
DROP PROCEDURE mgmt$step_1217_13048;
DROP PROCEDURE mgmt$step_1218_13048;
DROP PROCEDURE mgmt$step_1219_13048;
DROP PROCEDURE mgmt$step_1220_13048;
DROP PROCEDURE mgmt$step_1221_13048;
DROP PROCEDURE mgmt$step_1222_13048;
DROP PROCEDURE mgmt$step_1223_13048;
DROP PROCEDURE mgmt$step_1224_13048;
DROP PROCEDURE mgmt$step_1225_13048;
DROP PROCEDURE mgmt$step_1226_13048;
DROP PROCEDURE mgmt$step_1227_13048;
DROP PROCEDURE mgmt$step_1228_13048;
DROP PROCEDURE mgmt$step_1229_13048;
DROP PROCEDURE mgmt$step_1230_13048;
DROP PROCEDURE mgmt$step_1231_13048;
DROP PROCEDURE mgmt$step_1232_13048;
DROP PROCEDURE mgmt$step_1233_13048;
DROP PROCEDURE mgmt$step_1234_13048;
DROP PROCEDURE mgmt$step_1235_13048;
DROP PROCEDURE mgmt$step_1236_13048;
DROP PROCEDURE mgmt$step_1237_13048;
DROP PROCEDURE mgmt$step_1238_13048;
DROP PROCEDURE mgmt$step_1239_13048;
DROP PROCEDURE mgmt$step_1240_13048;
DROP PROCEDURE mgmt$step_1241_13048;
DROP PROCEDURE mgmt$step_1242_13048;
DROP PROCEDURE mgmt$step_1243_13048;
DROP PROCEDURE mgmt$step_1244_13048;
DROP PROCEDURE mgmt$step_1245_13048;
DROP PROCEDURE mgmt$step_1246_13048;
DROP PROCEDURE mgmt$step_1247_13048;
DROP PROCEDURE mgmt$step_1248_13048;
DROP PROCEDURE mgmt$step_1249_13048;
DROP PROCEDURE mgmt$step_1250_13048;
DROP PROCEDURE mgmt$step_1251_13048;
DROP PROCEDURE mgmt$step_1252_13048;
DROP PROCEDURE mgmt$step_1253_13048;
DROP PROCEDURE mgmt$step_1254_13048;
DROP PROCEDURE mgmt$step_1255_13048;
DROP PROCEDURE mgmt$step_1256_13048;
DROP PROCEDURE mgmt$step_1257_13048;
DROP PROCEDURE mgmt$step_1258_13048;
DROP PROCEDURE mgmt$step_1259_13048;
DROP PROCEDURE mgmt$step_1260_13048;
DROP PROCEDURE mgmt$step_1261_13048;
DROP PROCEDURE mgmt$step_1262_13048;
DROP PROCEDURE mgmt$step_1263_13048;
DROP PROCEDURE mgmt$step_1264_13048;
DROP PROCEDURE mgmt$step_1265_13048;
DROP PROCEDURE mgmt$step_1266_13048;
DROP PROCEDURE mgmt$step_1267_13048;
DROP PROCEDURE mgmt$step_1268_13048;
DROP PROCEDURE mgmt$step_1269_13048;
DROP PROCEDURE mgmt$step_1270_13048;
DROP PROCEDURE mgmt$step_1271_13048;
DROP PROCEDURE mgmt$step_1272_13048;
DROP PROCEDURE mgmt$step_1273_13048;
DROP PROCEDURE mgmt$step_1274_13048;
DROP PROCEDURE mgmt$step_1275_13048;
DROP PROCEDURE mgmt$step_1276_13048;
DROP PROCEDURE mgmt$step_1277_13048;
DROP PROCEDURE mgmt$step_1278_13048;
DROP PROCEDURE mgmt$step_1279_13048;
DROP PROCEDURE mgmt$step_1280_13048;
DROP PROCEDURE mgmt$step_1281_13048;
DROP PROCEDURE mgmt$step_1282_13048;
DROP PROCEDURE mgmt$step_1283_13048;
DROP PROCEDURE mgmt$step_1284_13048;
DROP PROCEDURE mgmt$step_1285_13048;
DROP PROCEDURE mgmt$step_1286_13048;
DROP PROCEDURE mgmt$step_1287_13048;
DROP PROCEDURE mgmt$step_1288_13048;
DROP PROCEDURE mgmt$step_1289_13048;
DROP PROCEDURE mgmt$step_1290_13048;
DROP PROCEDURE mgmt$step_1291_13048;
DROP PROCEDURE mgmt$step_1292_13048;
DROP PROCEDURE mgmt$step_1293_13048;
DROP PROCEDURE mgmt$step_1294_13048;
DROP PROCEDURE mgmt$step_1295_13048;
DROP PROCEDURE mgmt$step_1296_13048;
DROP PROCEDURE mgmt$step_1297_13048;
DROP PROCEDURE mgmt$step_1298_13048;
DROP PROCEDURE mgmt$step_1299_13048;
DROP PROCEDURE mgmt$step_1300_13048;
DROP PROCEDURE mgmt$step_1301_13048;
DROP PROCEDURE mgmt$step_1302_13048;
DROP PROCEDURE mgmt$step_1303_13048;
DROP PROCEDURE mgmt$step_1304_13048;
DROP PROCEDURE mgmt$step_1305_13048;
DROP PROCEDURE mgmt$step_1306_13048;
DROP PROCEDURE mgmt$step_1307_13048;
DROP PROCEDURE mgmt$step_1308_13048;
DROP PROCEDURE mgmt$step_1309_13048;
DROP PROCEDURE mgmt$step_1310_13048;
DROP PROCEDURE mgmt$step_1311_13048;
DROP PROCEDURE mgmt$step_1312_13048;
DROP PROCEDURE mgmt$step_1313_13048;
DROP PROCEDURE mgmt$step_1314_13048;
DROP PROCEDURE mgmt$step_1315_13048;
DROP PROCEDURE mgmt$step_1316_13048;
DROP PROCEDURE mgmt$step_1317_13048;
DROP PROCEDURE mgmt$step_1318_13048;
DROP PROCEDURE mgmt$step_1319_13048;
DROP PROCEDURE mgmt$step_1320_13048;
DROP PROCEDURE mgmt$step_1321_13048;
DROP PROCEDURE mgmt$step_1322_13048;
DROP PROCEDURE mgmt$step_1323_13048;
DROP PROCEDURE mgmt$step_1324_13048;
DROP PROCEDURE mgmt$step_1325_13048;
DROP PROCEDURE mgmt$step_1326_13048;
DROP PROCEDURE mgmt$step_1327_13048;
DROP PROCEDURE mgmt$step_1328_13048;
DROP PROCEDURE mgmt$step_1329_13048;
DROP PROCEDURE mgmt$step_1330_13048;
DROP PROCEDURE mgmt$step_1331_13048;
DROP PROCEDURE mgmt$step_1332_13048;
DROP PROCEDURE mgmt$step_1333_13048;
DROP PROCEDURE mgmt$step_1334_13048;
DROP PROCEDURE mgmt$step_1335_13048;
DROP PROCEDURE mgmt$step_1336_13048;
DROP PROCEDURE mgmt$step_1337_13048;
DROP PROCEDURE mgmt$step_1338_13048;
DROP PROCEDURE mgmt$step_1339_13048;
DROP PROCEDURE mgmt$step_1340_13048;
DROP PROCEDURE mgmt$step_1341_13048;
DROP PROCEDURE mgmt$step_1342_13048;
DROP PROCEDURE mgmt$step_1343_13048;
DROP PROCEDURE mgmt$step_1344_13048;
DROP PROCEDURE mgmt$step_1345_13048;
DROP PROCEDURE mgmt$step_1346_13048;
DROP PROCEDURE mgmt$step_1347_13048;
DROP PROCEDURE mgmt$step_1348_13048;
DROP PROCEDURE mgmt$step_1349_13048;
DROP PROCEDURE mgmt$step_1350_13048;
DROP PROCEDURE mgmt$step_1351_13048;
DROP PROCEDURE mgmt$step_1352_13048;
DROP PROCEDURE mgmt$step_1353_13048;
DROP PROCEDURE mgmt$step_1354_13048;
DROP PROCEDURE mgmt$step_1355_13048;
DROP PROCEDURE mgmt$step_1356_13048;
DROP PROCEDURE mgmt$step_1357_13048;
DROP PROCEDURE mgmt$step_1358_13048;
DROP PROCEDURE mgmt$step_1359_13048;
DROP PROCEDURE mgmt$step_1360_13048;
DROP PROCEDURE mgmt$step_1361_13048;

DROP PROCEDURE mgmt$mask_cleanup_13048;
DROP PROCEDURE mgmt$mask_commentheader_13048;

exec mgmt$mask_sendMsg ('Completed cleanup of generated procedures');

whenever sqlerror exit;
begin
if :step_num <> 1362 then
dbms_standard.raise_application_error(-20001, 'ERROR executing steps ');
end if;
end;
/
whenever sqlerror continue;

exec mgmt$mask_sendMsg ('Script execution complete');

-- Post script
UPDATE SYSADM.PS_OP_TRV_MSG_DAT SET DESCRLONG = mask.pkg_mask.fnc_generic_mask_string() WHERE LENGTH(DESCRLONG) > 0;

UPDATE SYSADM.PS_OP_TRV_MSG_DAT
SET OP_TRV_MSG = 
    CASE
        WHEN (OP_TRV_MSG_TYPE ='TMONE') THEN MASK.PKG_MASK.fnc_tm1_clob()
        WHEN (OP_TRV_MSG_TYPE ='TMFOUR') THEN MASK.PKG_MASK.fnc_tm4_clob()
        WHEN (OP_TRV_MSG_TYPE ='TMFIVE') THEN MASK.PKG_MASK.fnc_tm5_clob()
        WHEN (OP_TRV_MSG_TYPE ='TMEIGHT') THEN MASK.PKG_MASK.fnc_tm8_clob()
    END 
WHERE LENGTH(OP_TRV_MSG) > 0 AND OP_TRV_MSG_TYPE IN ('TMONE','TMFOUR','TMFIVE','TMEIGHT');

UPDATE SYSADM.PS_OP_TM_STG 
SET OP_TRV_MSG = 
    CASE 
        WHEN (OP_TRV_MSG_TYPE ='TMONE') THEN MASK.PKG_MASK.fnc_tm1_clob()
        WHEN (OP_TRV_MSG_TYPE ='TMFOUR') THEN MASK.PKG_MASK.fnc_tm4_clob()
    END
WHERE LENGTH(OP_TRV_MSG) > 0 AND OP_TRV_MSG_TYPE IN ('TMONE','TMFOUR');


UPDATE SYSADM.PS_OP_TRV_MSG_VAL SET OP_TM_VAR_PREFIX =  mask.pkg_mask.fnc_generic_mask_string(),CONFIG_VALUE = mask.pkg_mask.fnc_generic_mask_string(),DESCRLONG = DECODE(LENGTH(DESCRLONG), NULL, DESCRLONG, mask.pkg_mask.fnc_generic_mask_string())
WHERE FIELDNAME ='OP_TM_APPROVER' AND XLATLONGNAME = ' ';

UPDATE SYSADM.PS_OP_TRV_MSG_VAL SET OP_TM_VAR_PREFIX =  mask.pkg_mask.fnc_generic_mask_string(),CONFIG_VALUE = mask.pkg_mask.fnc_generic_mask_string(),DESCRLONG = DECODE(LENGTH(DESCRLONG), NULL, DESCRLONG, mask.pkg_mask.fnc_generic_mask_string())
WHERE FIELDNAME IN ('OP_TM_ATTENTION1', 'OP_TM_ATTENTION2') AND XLATLONGNAME = ' ';

UPDATE SYSADM.PS_OP_TRV_MSG_VAL SET CONFIG_VALUE = DECODE (CONFIG_VALUE, ' ',' ', mask.pkg_mask.fnc_generic_mask_string()),DESCRLONG = DECODE(LENGTH(DESCRLONG), NULL, DESCRLONG, mask.pkg_mask.fnc_generic_mask_string())
WHERE FIELDNAME ='OP_TM_CABLE_VAR' AND XLATLONGNAME = '<EFM LIST>';

UPDATE SYSADM.PS_OP_TRV_MSG_VAL SET CONFIG_VALUE = DECODE (CONFIG_VALUE, ' ',' ', mask.pkg_mask.udf_mask_street('','',CONFIG_VALUE)),DESCRLONG = DECODE(LENGTH(DESCRLONG), NULL, DESCRLONG, mask.pkg_mask.fnc_generic_mask_string())
WHERE FIELDNAME ='OP_TM_CABLE_VAR' AND XLATLONGNAME = '<HOME LEAVE ADDRESS>';

UPDATE SYSADM.PS_OP_TRV_MSG_VAL SET CONFIG_VALUE = DECODE (CONFIG_VALUE, ' ',' ', SUBSTR(mask.pkg_mask.udf_mask_email('','',CONFIG_VALUE),1,50)),DESCRLONG = DECODE(LENGTH(DESCRLONG), NULL, DESCRLONG, mask.pkg_mask.fnc_generic_mask_string())
WHERE FIELDNAME ='OP_TM_CABLE_VAR' AND XLATLONGNAME = '<HOME LEAVE EMAIL>';

UPDATE SYSADM.PS_OP_TRV_MSG_VAL SET CONFIG_VALUE = DECODE (CONFIG_VALUE, ' ',' ', mask.pkg_mask.fnc_generic_mask_string()),DESCRLONG = DECODE(LENGTH(DESCRLONG), NULL, DESCRLONG, mask.pkg_mask.fnc_generic_mask_string())
WHERE FIELDNAME ='OP_TM_CABLE_VAR' AND XLATLONGNAME = '<OPTIONAL REMARKS>';

UPDATE SYSADM.PS_OP_TRV_MSG_VAL SET CONFIG_VALUE = DECODE (CONFIG_VALUE, ' ',' ', mask.pkg_mask.fnc_generic_mask_string()),DESCRLONG = DECODE(LENGTH(DESCRLONG), NULL, DESCRLONG, mask.pkg_mask.fnc_generic_mask_string())
WHERE FIELDNAME ='OP_TM_DRAFTER' ;

UPDATE SYSADM.PS_OP_TRV_MSG_VAL SET CONFIG_VALUE = DECODE (CONFIG_VALUE, ' ',' ', mask.pkg_mask.udf_mask_street('','',CONFIG_VALUE)),DESCRLONG = DECODE(LENGTH(DESCRLONG), NULL, DESCRLONG, mask.pkg_mask.udf_mask_street('','',DESCRLONG))
WHERE FIELDNAME  IN ('OP_TM_INFO_ADRSEE1','OP_TM_INFO_ADRSEE2','OP_TM_INFO_ADRSEE3');

UPDATE SYSADM.PS_OP_TRV_MSG_VAL SET DESCRLONG = DECODE(LENGTH(DESCRLONG), NULL, DESCRLONG, mask.pkg_mask.fnc_generic_mask_string())
WHERE FIELDNAME IN ('OP_TM_SIGNATURE','OP_TM_SUBJECT_TXT') ;

UPDATE SYSADM.PS_OP_TRV_MSG_VAL SET CONFIG_VALUE = DECODE (CONFIG_VALUE, ' ',' ', mask.pkg_mask.fnc_generic_mask_string()),DESCRLONG = DECODE(LENGTH(DESCRLONG), NULL, DESCRLONG, mask.pkg_mask.fnc_generic_mask_string())
WHERE FIELDNAME IN ('OP_TM_SLUG_LINE1','OP_TM_SLUG_LINE2') ;

UPDATE SYSADM.PS_EMPL_PHOTO SET EMPLOYEE_PHOTO = MASK.PKG_MASK.fnc_photo_by_size_blob(PHOTO_SIZENAME);

COMMIT;

spool off
set pagesize 24
set serveroutput off
set feedback on
set echo on
set ver on
